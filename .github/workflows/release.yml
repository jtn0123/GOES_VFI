# Automated Release Pipeline
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Validate version format
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-beta"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag already exists
      run: |
        if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "Tag ${{ steps.version.outputs.version }} already exists"
          exit 1
        fi

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-version

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Run linting
      run: |
        python run_linters.py --check

    - name: Run type checking
      run: |
        python run_mypy_checks.py

    - name: Run tests
      run: |
        python run_working_tests_with_mocks.py

  update-version:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: [validate-version, run-tests]

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        sed -i "s/version = \".*\"/version = \"$VERSION_NUM\"/" pyproject.toml

    - name: Update version in __init__.py
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        echo "__version__ = \"$VERSION_NUM\"" > goesvfi/__init__.py

    - name: Update CHANGELOG.md
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        DATE=$(date +%Y-%m-%d)

        # Create new changelog entry
        {
          echo "# Changelog"
          echo ""
          echo "## [$VERSION] - $DATE"
          echo ""
          echo "### Added"
          echo "- New release $VERSION"
          echo ""
          tail -n +3 CHANGELOG.md
        } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml goesvfi/__init__.py CHANGELOG.md
        git commit -m "chore: bump version to ${{ needs.validate-version.outputs.version }}"
        git push

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, update-version]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main

    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ needs.validate-version.outputs.version }}
        git push origin ${{ needs.validate-version.outputs.version }}

    - name: Generate changelog for release
      id: changelog
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"

        # Extract changelog for this version
        CHANGELOG=$(awk "/^## \[$VERSION\]/,/^## \[/{print}" CHANGELOG.md | head -n -1)

        # Format for GitHub release
        {
          echo "## What's New in $VERSION"
          echo ""
          echo "$CHANGELOG"
          echo ""
          echo "## Installation"
          echo ""
          echo "\`\`\`bash"
          echo "pip install goes-vfi==${VERSION#v}"
          echo "\`\`\`"
          echo ""
          echo "## Docker"
          echo ""
          echo "\`\`\`bash"
          echo "docker pull goesvfi/goes-vfi:$VERSION"
          echo "\`\`\`"
        } > release_notes.md

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.validate-version.outputs.version }}
        name: "Release ${{ needs.validate-version.outputs.version }}"
        bodyFile: release_notes.md
        prerelease: ${{ github.event.inputs.prerelease }}
        generateReleaseNotes: true
        token: ${{ secrets.GITHUB_TOKEN }}

  trigger-cd:
    name: Trigger CD Pipeline
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Trigger CD workflow
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: release-created
        client-payload: '{"version": "${{ needs.validate-version.outputs.version }}"}'

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-version, create-release]
    if: always()

    steps:
    - name: Send notification
      run: |
        echo "Release ${{ needs.validate-version.outputs.version }} has been created!"
        echo "Status: ${{ needs.create-release.result }}"

    - name: Create release summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ needs.validate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Pre-release: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
