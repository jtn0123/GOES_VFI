# Continuous Deployment Pipeline for GOES_VFI
name: CD

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to Test PyPI
      if: github.event_name == 'push'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Publish to PyPI
      if: github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release-artifacts:
    name: Create Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build standalone executable
      run: |
        pyinstaller --onefile --windowed --name=GOES_VFI-${{ matrix.os }} \
          --add-data "goesvfi/models:goesvfi/models" \
          --add-data "goesvfi/sanchez/bin:goesvfi/sanchez/bin" \
          goesvfi/gui.py

    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        tar -czf GOES_VFI-${{ matrix.os }}.tar.gz -C dist GOES_VFI-${{ matrix.os }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a GOES_VFI-${{ matrix.os }}.zip dist/GOES_VFI-${{ matrix.os }}.exe

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: |
          GOES_VFI-${{ matrix.os }}.tar.gz
          GOES_VFI-${{ matrix.os }}.zip

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r docs/requirements.txt

    - name: Generate API documentation
      run: |
        python scripts/generate_docs.py --build --format html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html/
        cname: goes-vfi.readthedocs.io

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: goesvfi/goes-vfi
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-pypi, create-release-artifacts, deploy-docs, docker-build-push]
    if: always()

    steps:
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'GOES_VFI deployment completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- PyPI: ${{ needs.deploy-pypi.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Release Artifacts: ${{ needs.create-release-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: ${{ needs.deploy-docs.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker: ${{ needs.docker-build-push.result }}" >> $GITHUB_STEP_SUMMARY
