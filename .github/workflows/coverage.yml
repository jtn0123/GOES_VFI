# Code Coverage Workflow
name: Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-coverage-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-coverage-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libegl1-mesa-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        pip install coverage[toml] pytest-cov pytest-xdist

    - name: Run tests with coverage
      run: |
        # Run tests with coverage in parallel
        xvfb-run -a python run_coverage.py --parallel --clean
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Generate coverage reports
      if: always()
      run: |
        # Generate additional reports
        coverage lcov -o coverage.lcov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml,./coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        file: ./coverage.lcov
        flag-name: python-${{ matrix.python-version }}
        parallel: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          coverage.json
          coverage.lcov
          htmlcov/

    - name: Comment PR with coverage
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MINIMUM_GREEN: 85
        MINIMUM_ORANGE: 70

    - name: Coverage summary
      if: always()
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Extract coverage percentage from JSON
        if [ -f coverage.json ]; then
          COVERAGE=$(python -c "import json; data=json.load(open('coverage.json')); print(f\"{data['totals']['percent_covered']:.2f}%\")")
          echo "Overall Coverage: **$COVERAGE**" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Reports" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“Š [Codecov Report](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“ˆ [Coveralls Report](https://coveralls.io/github/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

  finish:
    name: Finish Coverage
    needs: coverage
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true
