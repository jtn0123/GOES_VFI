[project]
name = "goesvfi"
version = "0.8.0"  # Updated version for Integrity Check feature
description = "GOES satellite frame interpolation tool with integrity checking"
authors = [
    {name = "GOES VFI Contributors"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
    "PyQt6",
    "qt-material>=2.14",
    "numpy",
    "Pillow",
    "opencv-python-headless",
    "ffmpeg-python",
    "colorlog",
    "requests",
    "psutil",
    "tqdm",
    "imageio",
    "python-dateutil>=2.9.0",
    # Integrity Check module dependencies
    "aiohttp>=3.11.0",
    "aioboto3>=14.0.0",
    "xarray>=2025.4.0",
    "netCDF4>=1.6.0",
    "matplotlib>=3.10.0",
    "aiofiles>=24.1.0",
]
readme = "README.md"
requires-python = ">=3.13"  # Updated Python requirement
keywords = ["satellite", "goes", "video", "interpolation", "frame-interpolation", "rife", "ffmpeg"]

[project.urls]
"Homepage" = "https://github.com/jtn0123/GOES_VFI"
"Repository" = "https://github.com/jtn0123/GOES_VFI"
"Issues" = "https://github.com/jtn0123/GOES_VFI/issues"
"Documentation" = "https://goes-vfi.readthedocs.io"

[build-system]
requires = ["setuptools>=64.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["goesvfi"]

[project.scripts]
goesvfi = "goesvfi.cli:main"

[project.optional-dependencies]
test = [
    "pytest>=8.3.0",
    "pytest-cov>=4.1.0",
    "pytest-qt>=4.4.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=1.0.0",
    "mock>=5.2.0",
]

dev = [
    "ruff>=0.8.0",  # Replaces black, isort, flake8, and most pylint checks
    "bandit>=1.8.0",  # Security scanning (not replaced by ruff)
    "xenon>=0.9.3",  # Complexity checking (not replaced by ruff)
    "tox>=4.0.0",
    "pre-commit>=3.5.0",  # For running pre-commit hooks
]

typing = [
    "mypy",
    "pyright>=1.1.390",
    "types-requests",
    "types-Pillow",
    "types-aiofiles",
    "types-tqdm>=4.66.0",
    "PyQt6-stubs @ git+https://github.com/python-qt-tools/PyQt6-stubs.git",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.0",
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "tests",
]
python_files = "test_*.py"
addopts = "-ra -q --cov=goesvfi --cov-report=term-missing"

[tool.ruff]
# Enable as many rules as possible for comprehensive linting
line-length = 120
target-version = "py313"

# Include all Python files, even tests and scripts
include = ["*.py", "*.pyi", "**/pyproject.toml"]

# Exclude only truly unnecessary directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "legacy_tests",  # Old tests we're not maintaining
]

# Enable preview rules for cutting-edge checks
preview = true

# Enable unsafe fixes (with --fix --unsafe-fixes)
unsafe-fixes = true

[tool.ruff.format]
# Code formatting settings
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true  # Format code snippets in docstrings
docstring-code-line-length = 88  # Shorter for docstrings

[tool.ruff.lint]
# Enable ALL rule categories for maximum coverage
select = [
    "ALL",  # Enable all rules, then selectively disable problematic ones
]

# Ignore only rules that conflict with the project style or are too strict
ignore = [
    # Line length (handled by formatter)
    "E501",  # line too long

    # Docstring rules that are too strict
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D213",  # Multi-line docstring summary should start at the second line (conflicts with D212)
    "D401",  # First line of docstring should be in imperative mood
    "D406",  # Section name should end with a newline
    "D407",  # Missing dashed underline after section
    "D408",  # Section underline should be in the line following the section's name
    "D409",  # Section underline should match the length of its name

    # Too opinionated or conflicting
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "B008",    # Do not perform function calls in argument defaults
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "CPY001",  # Missing copyright notice
    "ISC001",  # Implicitly concatenated string literals on one line (conflicts with formatter)
    "PD901",   # Avoid using `df` for pandas DataFrame
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected (needed for tests)
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link on the line following this TODO
    "FIX002",  # Line contains TODO, consider resolving
    "ERA001",  # Found commented-out code

    # These are handled better by type checkers (updated rule names)
    "TC001",   # Move application import into a type-checking block
    "TC002",   # Move third-party import into a type-checking block
    "TC003",   # Move standard library import into a type-checking block
]

# Allow certain violations in specific contexts
[tool.ruff.lint.per-file-ignores]
# Test files can have different rules
"tests/**/*.py" = [
    "S101",    # Allow assert in tests
    "PLR2004", # Allow magic values in tests
    "PLR0913", # Allow many arguments in test functions
    "D",       # Don't require docstrings in tests
]
# Scripts can be more relaxed
"scripts/*.py" = [
    "T201",    # Allow print statements in scripts
    "D",       # Don't require docstrings in scripts
]
# Allow TODO comments in specific files
"**/__init__.py" = ["D104"]  # Don't require docstrings in __init__.py

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["goesvfi"]
known-local-folder = ["tests", "scripts"]
combine-as-imports = true
force-single-line = false
force-sort-within-sections = true

[tool.ruff.lint.flake8-annotations]
# Type annotation settings
allow-star-arg-any = true
ignore-fully-untyped = false
mypy-init-return = true
suppress-dummy-args = false
suppress-none-returning = false

[tool.ruff.lint.flake8-bugbear]
# Bugbear settings
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.pydocstyle]
# Docstring settings
convention = "google"  # or "numpy" or "pep257"

[tool.ruff.lint.flake8-pytest-style]
# Pytest style settings
fixture-parentheses = true
mark-parentheses = true
parametrize-names-type = "csv"
parametrize-values-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.flake8-quotes]
# Quote style settings
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = true

[tool.ruff.lint.flake8-tidy-imports]
# Import tidiness settings
ban-relative-imports = "parents"  # Ban relative imports from parent modules

[tool.ruff.lint.flake8-type-checking]
# Type checking import settings
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
runtime-evaluated-decorators = ["attrs.define", "attrs.frozen"]

[tool.ruff.lint.flake8-unused-arguments]
# Unused argument settings
ignore-variadic-names = true

[tool.ruff.lint.mccabe]
# Complexity settings
max-complexity = 10  # Adjust based on your needs

[tool.ruff.lint.pycodestyle]
# Pycodestyle settings
ignore-overlong-task-comments = true
max-doc-length = 120

[tool.ruff.lint.pylint]
# Pylint settings
max-args = 6
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.pyupgrade]
# Upgrade suggestions for newer Python syntax
keep-runtime-typing = false
