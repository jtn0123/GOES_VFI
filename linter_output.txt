[94m
======================================================================[0m
[1m[94m             GOES_VFI LINTER RUNNER                [0m
[94m======================================================================
[0m
[1m[94m
[1mRunning Flake8...[0m[0m
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:10:1: F401 'importlib.resources as pkgres' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:11:1: F401 'json' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:12:1: F401 'logging' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:16:1: F401 'shutil' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:19:1: F401 'time' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:20:1: F401 'datetime.datetime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:22:1: F401 'typing.Iterator' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:23:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:23:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:23:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:23:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:37:1: F401 'PyQt6.QtGui.QPen' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:48:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:48:1: F401 'PyQt6.QtWidgets.QStatusBar' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:79:1: F401 'goesvfi.sanchez.runner.colourise' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:2657:38: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:2759:41: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:3092:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py:3094:69: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/cache_db.py:11:1: F401 'enum.Enum' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/cache_db.py:14:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/cache_db.py:14:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/combined_tab_refactored.py:10:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/combined_tab_refactored.py:10:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/combined_tab_refactored.py:10:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/combined_tab_refactored.py:10:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/combined_tab_refactored.py:10:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:8:1: F401 'os' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:10:1: F401 'datetime.timedelta' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:11:1: F401 'enum.Enum' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:13:1: F401 'typing.Set' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:13:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QAbstractTableModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QDate' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QRunnable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QSortFilterProxyModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QThread' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QThreadPool' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:15:1: F401 'PyQt6.QtCore.QTimer' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:32:1: F401 'PyQt6.QtGui.QBrush' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:32:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:32:1: F401 'PyQt6.QtGui.QPalette' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:32:1: F401 'PyQt6.QtGui.QPixmap' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:32:1: F401 'PyQt6.QtGui.QStandardItem' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:32:1: F401 'PyQt6.QtGui.QStandardItemModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:44:1: F401 'PyQt6.QtWidgets.QDateTimeEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:44:1: F401 'PyQt6.QtWidgets.QGridLayout' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:44:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:44:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:44:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:44:1: F401 'PyQt6.QtWidgets.QTabWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:83:1: F401 '.enhanced_imagery_tab.EnhancedGOESImageryTab' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:89:1: F401 '.gui_tab.CacheInfoDialog' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:91:1: F401 '.view_model.ScanStatus' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:2211:9: F401 'goesvfi.integrity_check.remote.s3_store.log_download_statistics' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:3493:30: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:3686:59: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:3686:82: E228 missing whitespace around modulo operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:3714:32: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py:3731:17: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:8:1: F401 'time' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:10:1: F401 'enum.Enum' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:12:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:12:1: F401 'typing.Set' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:12:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:12:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:14:1: F401 'PyQt6.QtCore.QAbstractTableModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:14:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:14:1: F401 'PyQt6.QtCore.QRunnable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:14:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:14:1: F401 'PyQt6.QtCore.QThread' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:14:1: F401 'PyQt6.QtCore.QThreadPool' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:14:1: F401 'PyQt6.QtCore.QTimer' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QBrush' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QCloseEvent' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QPalette' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QPixmap' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QStandardItem' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:31:1: F401 'PyQt6.QtGui.QStandardItemModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QDateTimeEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QFormLayout' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QFrame' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QProgressDialog' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QRadioButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QStackedWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QStyle' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QTabWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QTextBrowser' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QTextEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QToolButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:43:1: F401 'PyQt6.QtWidgets.QToolTip' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:84:1: F401 '.enhanced_imagery_tab.EnhancedGOESImageryTab' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:90:1: F401 '.gui_tab.IntegrityCheckTab' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab_improved.py:91:1: F401 '.time_index.TimeIndex' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:9:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:9:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:9:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:9:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:9:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:11:1: F401 'PyQt6.QtCore.QEasingCurve' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:11:1: F401 'PyQt6.QtCore.QPoint' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:11:1: F401 'PyQt6.QtCore.QRect' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:11:1: F401 'PyQt6.QtCore.QRectF' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:11:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:11:1: F401 'PyQt6.QtCore.pyqtSignal' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:21:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:21:1: F401 'PyQt6.QtGui.QFontMetrics' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:21:1: F401 'PyQt6.QtGui.QPainterPath' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QFrame' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QHBoxLayout' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QLabel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QStyle' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QStyleOption' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QToolTip' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:34:1: F401 'PyQt6.QtWidgets.QVBoxLayout' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_timeline.py:47:1: F401 'goesvfi.integrity_check.view_model.MissingTimestamp' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:28:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:30:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:31:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:32:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:33:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:39:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:40:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:41:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:42:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_view_model.py:43:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:10:1: F401 'datetime.datetime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:12:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:12:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:14:1: F401 'PyQt6.QtCore.QDate' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:14:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:14:1: F401 'PyQt6.QtCore.QTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:14:1: F401 'PyQt6.QtCore.pyqtSlot' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:24:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:24:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QCheckBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QDateEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QFileDialog' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QFrame' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QMessageBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QSpacerItem' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QSpinBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QTimeEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/goes_imagery_tab.py:25:1: F401 'PyQt6.QtWidgets.QToolButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:8:1: F401 'time' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:10:1: F401 'enum.Enum' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:11:1: F401 'pathlib.Path' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:12:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:12:1: F401 'typing.Set' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:12:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:12:1: F401 'typing.Type' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:12:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QDate' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QRunnable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QSortFilterProxyModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QThread' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QThreadPool' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:14:1: F401 'PyQt6.QtCore.QTimer' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QAction' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QBrush' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QPalette' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QPixmap' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QStandardItem' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:30:1: F401 'PyQt6.QtGui.QStandardItemModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QDateTimeEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QFrame' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QGridLayout' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QStackedWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QTabWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:41:1: F401 'PyQt6.QtWidgets.QTextEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:89:46: B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/gui_tab.py:93:49: B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_dark_mode.py:10:1: F401 'PyQt6.QtGui.QBrush' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_dark_mode.py:10:1: F401 'PyQt6.QtGui.QLinearGradient' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_dark_mode.py:11:1: F401 'PyQt6.QtWidgets.QStyle' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:8:1: F401 'datetime.timedelta' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:9:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:9:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:9:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:9:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:11:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:12:1: F401 'PyQt6.QtGui.QBrush' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:12:1: F401 'PyQt6.QtGui.QColor' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:12:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:12:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:12:1: F401 'PyQt6.QtGui.QPainter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:12:1: F401 'PyQt6.QtGui.QPen' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QButtonGroup' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QGridLayout' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QRadioButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QStyle' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QTabWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QToolButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/optimized_timeline_tab.py:13:1: F401 'PyQt6.QtWidgets.QToolTip' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:9:1: F401 'logging' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:10:1: F401 'threading' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:13:1: F401 'typing.Awaitable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:13:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:151:22: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:153:37: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:249:36: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:271:22: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:273:37: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:371:78: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:373:77: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:386:67: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:392:67: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:404:73: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:410:73: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:427:71: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:460:74: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:466:74: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:494:29: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:531:66: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:537:66: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:569:66: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:575:66: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:717:37: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py:740:21: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:9:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:132:22: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:165:57: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:401:74: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:403:73: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:416:37: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:416:66: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:428:41: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:428:72: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:455:41: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:455:73: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:482:37: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:482:65: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:499:37: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py:499:65: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/base.py:10:1: F401 'sys' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/base.py:13:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/base.py:13:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/cdn_store.py:7:1: F401 'asyncio' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/cdn_store.py:8:1: F401 'logging' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/cdn_store.py:11:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:19:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:24:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:25:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:26:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:27:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:30:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:31:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:32:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:33:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:38:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:43:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:152:41: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:152:46: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:154:41: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:179:48: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:179:53: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:181:48: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:261:34: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:278:36: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:298:21: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:361:9: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:826:67: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:833:95: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1149:25: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1229:58: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1229:63: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1231:58: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1285:21: F842 local variable 'download_error_obj' is annotated but never used
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1507:33: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1559:62: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1559:67: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1561:62: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:1753:34: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:8:1: F401 'datetime.timedelta' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:9:1: F401 'enum.Enum' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:9:1: F401 'enum.auto' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:10:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:10:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:10:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QAbstractTableModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QDate' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QItemSelectionModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QPoint' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QRunnable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QSortFilterProxyModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QThread' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QThreadPool' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:12:1: F401 'PyQt6.QtCore.QTimer' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QAction' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QBrush' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QPalette' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QPixmap' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QStandardItem' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:31:1: F401 'PyQt6.QtGui.QStandardItemModel' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QApplication' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QCheckBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QDateTimeEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QDialog' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QDialogButtonBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QFileDialog' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QFrame' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QLineEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QMenu' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QMessageBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QProgressDialog' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QRadioButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QSpinBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QStackedWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QStyle' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QTableView' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QTabWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QTextBrowser' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QToolButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:42:1: F401 'PyQt6.QtWidgets.QToolTip' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:94:60: B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:128:46: B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/results_organization.py:140:49: B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:14:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:14:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:14:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:14:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:23:1: F401 'PIL.ImageDraw' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:23:1: F401 'PIL.ImageFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:25:1: F401 '.goes_imagery.ImageryMode' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:25:1: F401 '.goes_imagery.ProcessingMode' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:135:17: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:155:25: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:187:17: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:343:60: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:456:21: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:463:21: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:469:21: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:682:56: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:734:50: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:742:59: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/sample_processor.py:750:56: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/satellite_integrity_tab_group.py:10:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/satellite_integrity_tab_group.py:10:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/satellite_integrity_tab_group.py:10:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/satellite_integrity_tab_group.py:12:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/satellite_integrity_tab_group.py:13:1: F401 'PyQt6.QtWidgets.QApplication' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/satellite_integrity_tab_group.py:13:1: F401 'PyQt6.QtWidgets.QStackedWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/shared_components.py:11:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/shared_components.py:11:1: F401 'typing.TypeVar' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/shared_components.py:11:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/shared_components.py:1035:52: E226 missing whitespace around arithmetic operator
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:11:1: F401 'pathlib.Path' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:12:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:12:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:12:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:12:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:14:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:14:1: F401 'PyQt6.QtCore.Qt' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:15:1: F401 'PyQt6.QtWidgets.QPushButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/standardized_combined_tab.py:15:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/tasks.py:8:1: F401 'time' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/tasks.py:11:1: F401 'typing.Optional' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/tasks.py:11:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/tasks.py:11:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/thread_cache_db.py:10:1: F401 'logging' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/thread_cache_db.py:11:1: F401 'os' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/thread_cache_db.py:16:1: F401 'typing.Callable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/thread_cache_db.py:16:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/thread_cache_db.py:16:1: F401 'typing.TypeVar' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/thread_cache_db.py:16:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/thread_cache_db.py:16:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/time_index_refactored.py:5:1: F401 'inspect' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/time_index_refactored.py:9:1: F401 'datetime.timedelta' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/time_index_refactored.py:11:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/time_index_refactored.py:13:1: F401 '..utils' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:8:1: F401 'math' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:10:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:10:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:10:1: F401 'typing.TypeVar' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:10:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:10:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:12:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:12:1: F401 'PyQt6.QtCore.QPoint' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:12:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:13:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:13:1: F401 'PyQt6.QtGui.QFontMetrics' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:13:1: F401 'PyQt6.QtGui.QResizeEvent' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:25:1: F401 'PyQt6.QtWidgets.QToolTip' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:1269:26: B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:1270:28: B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:1364:9: B010 Do not call setattr with a constant attribute value, it is not any safer than normal property access.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:1365:9: B010 Do not call setattr with a constant attribute value, it is not any safer than normal property access.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:1371:21: B009 Do not call getattr with a constant attribute value, it is not any safer than normal property access.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:1372:21: B009 Do not call getattr with a constant attribute value, it is not any safer than normal property access.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/timeline_visualization.py:1376:9: B010 Do not call setattr with a constant attribute value, it is not any safer than normal property access.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:12:1: F401 'datetime.timedelta' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:15:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:15:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:15:1: F401 'typing.Union' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:17:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:17:1: F401 'PyQt6.QtCore.QRunnable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:17:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:17:1: F401 'PyQt6.QtCore.QThreadPool' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:17:1: F401 'PyQt6.QtCore.QTimer' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:27:1: F401 'PyQt6.QtGui.QFont' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:27:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:27:1: F401 'PyQt6.QtGui.QPalette' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:27:1: F401 'PyQt6.QtGui.QPixmap' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:28:1: F401 'PyQt6.QtWidgets.QDialogButtonBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:28:1: F401 'PyQt6.QtWidgets.QFrame' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:28:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:28:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:28:1: F401 'PyQt6.QtWidgets.QTabWidget' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:28:1: F401 'PyQt6.QtWidgets.QTextEdit' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:287:49: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/user_feedback.py:304:49: F541 f-string is missing placeholders
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:8:1: F401 'threading' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:9:1: F401 'time' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:13:1: F401 'typing.Callable' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:13:1: F401 'typing.Set' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:13:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:15:1: F401 'PyQt6.QtCore.QMetaObject' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:15:1: F401 'PyQt6.QtCore.Qt' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:15:1: F401 'PyQt6.QtCore.QThread' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:25:1: F401 'goesvfi.utils.config' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py:564:33: E128 continuation line under-indented for visual indent
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:9:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:11:1: F401 'PyQt6.QtCore.QDateTime' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:11:1: F401 'PyQt6.QtCore.QSize' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:12:1: F401 'PyQt6.QtGui.QIcon' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:12:1: F401 'PyQt6.QtGui.QPixmap' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:13:1: F401 'PyQt6.QtWidgets.QButtonGroup' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:13:1: F401 'PyQt6.QtWidgets.QRadioButton' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visual_date_picker.py:13:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visualization_manager.py:9:1: F401 'os' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visualization_manager.py:13:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visualization_manager.py:13:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visualization_manager.py:20:1: F401 '.goes_imagery.ProcessingMode' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visualization_manager.py:20:1: F401 '.goes_imagery.ProductType' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/visualization_manager.py:488:22: B007 Loop control variable 'title' not used within the loop body. If this is intended, start the name with an underscore.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/encode.py:3:1: F401 'os' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_cropper.py:7:1: F401 'abc' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_cropper.py:8:1: F401 'typing' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_cropper.py:11:1: F401 'numpy as np' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_loader.py:8:1: F401 'abc' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_loader.py:10:1: F401 'dataclasses.dataclass' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_loader.py:10:1: F401 'dataclasses.field' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_loader.py:11:1: F401 'typing.Dict' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_loader.py:11:1: F401 'typing.Optional' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/image_saver.py:10:1: F401 'numpy as np' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/interpolate.py:17:1: F401 'goesvfi.utils.rife_analyzer.RifeCapabilityDetector' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/raw_encoder.py:6:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/raw_encoder.py:6:1: F401 'typing.List' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:2:1: F401 'math' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:5:1: F401 'shutil' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:10:1: F401 'concurrent.futures.as_completed' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:11:1: F401 'typing.IO' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:11:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:20:1: F401 'goesvfi.pipeline.image_processing_interfaces.ImageData' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:37:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:42:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:1393:13: B014 Redundant exception types in `except (IOError, BrokenPipeError):`.  Write `except IOError:`, which catches exactly the same exceptions.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:1417:13: B014 Redundant exception types in `except (IOError, BrokenPipeError):`.  Write `except IOError:`, which catches exactly the same exceptions.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py:1661:13: B014 Redundant exception types in `except (IOError, BrokenPipeError):`.  Write `except IOError:`, which catches exactly the same exceptions.
/Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/tiler.py:5:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/run_vfi.py:7:1: F401 'typing.Any' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/run_vfi.py:7:1: F401 'typing.cast' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/sanchez/runner.py:4:1: F401 'tarfile' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/sanchez/runner.py:5:1: F401 'zipfile' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/sanchez/runner.py:7:1: F401 'urllib.request.urlretrieve' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/sanchez/runner.py:16:14: E262 inline comment should start with '# '
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/date_utils.py:8:1: F401 'logging' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:12:1: F401 'typing.Tuple' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:15:1: F401 'PyQt6.QtGui.QScreen' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:28:1: F401 'PyQt6.QtWidgets.QComboBox' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:401:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:402:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:403:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:404:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:405:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:406:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py:406:1: E402 module level import not at top of file
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/log.py:70:1: W293 blank line contains whitespace
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/log.py:76:1: W293 blank line contains whitespace
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/log.py:112:1: W293 blank line contains whitespace
/Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/log.py:114:5: F824 `global _handler` is unused: name is never assigned in scope
/Users/justin/Documents/Github/GOES_VFI/goesvfi/view_models/main_window_view_model.py:10:1: F401 'typing.Optional' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/view_models/processing_view_model.py:9:1: F401 'logging' imported but unused
/Users/justin/Documents/Github/GOES_VFI/goesvfi/view_models/processing_view_model.py:11:1: F401 'typing.Union' imported but unused
2     B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
7     B008 Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.
2     B009 Do not call getattr with a constant attribute value, it is not any safer than normal property access.
3     B010 Do not call setattr with a constant attribute value, it is not any safer than normal property access.
3     B014 Redundant exception types in `except (IOError, BrokenPipeError):`.  Write `except IOError:`, which catches exactly the same exceptions.
1     E128 continuation line under-indented for visual indent
52    E226 missing whitespace around arithmetic operator
1     E228 missing whitespace around modulo operator
1     E262 inline comment should start with '# '
28    E402 module level import not at top of file
382   F401 'importlib.resources as pkgres' imported but unused
25    F541 f-string is missing placeholders
1     F824 `global _handler` is unused: name is never assigned in scope
1     F842 local variable 'download_error_obj' is annotated but never used
3     W293 blank line contains whitespace

[91mFlake8 found 514 issues. ❌[0m
[1m[94m
[1mRunning Flake8-Qt-TR for PyQt files...[0m[0m
multiprocessing.pool.RemoteTraceback:
"""
Traceback (most recent call last):
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/pydocstyle/parser.py", line 427, in parse
    compile(src, filename, 'exec')
    ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_s3_threadlocal_integration.py", line 403
    all_timestamps = await self._get_all_cache_entries()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: 'await' outside async function

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ~~~~^^^^^^^^^^^^^^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/checker.py", line 81, in _mp_run
    ).run_checks()
      ~~~~~~~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/checker.py", line 525, in run_checks
    self.run_ast_checks()
    ~~~~~~~~~~~~~~~~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/checker.py", line 427, in run_ast_checks
    for line_number, offset, text, _ in runner:
                                        ^^^^^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8_docstrings.py", line 188, in run
    for error in self._check_source():
                 ~~~~~~~~~~~~~~~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8_docstrings.py", line 172, in _check_source
    for err in self._call_check_source():
               ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/pydocstyle/checker.py", line 145, in check_source
    module = parse(StringIO(source), filename)
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/pydocstyle/parser.py", line 441, in __call__
    return self.parse(*args, **kwargs)
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/pydocstyle/parser.py", line 429, in parse
    raise ParseError() from error
pydocstyle.parser.ParseError: Cannot parse file.
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/bin/flake8", line 8, in <module>
    sys.exit(main())
             ~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/main/cli.py", line 23, in main
    app.run(argv)
    ~~~~~~~^^^^^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/main/application.py", line 198, in run
    self._run(argv)
    ~~~~~~~~~^^^^^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/main/application.py", line 187, in _run
    self.run_checks()
    ~~~~~~~~~~~~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/main/application.py", line 103, in run_checks
    self.file_checker_manager.run()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/checker.py", line 234, in run
    self.run_parallel()
    ~~~~~~~~~~~~~~~~~^^
  File "/Users/justin/Documents/Github/GOES_VFI/.venv/lib/python3.13/site-packages/flake8/checker.py", line 203, in run_parallel
    self.results = list(pool.imap_unordered(_mp_run, self.filenames))
                   ~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/pool.py", line 873, in next
    raise value
pydocstyle.parser.ParseError: Cannot parse file.

[91mFlake8-Qt-TR found 69 translation issues in PyQt files. ❌[0m
[1m[94m
[1mRunning Pylint...[0m[0m
[1m[93m⚠️ Pylint has a dependency issue that prevents it from running correctly.[0m
[93mThis is a known issue with the dill package that pylint depends on.[0m
[1m[93mSOLUTION: Use ./run_only_flake8.py instead for linting with flake8 only:[0m
[92m    python run_only_flake8.py /Users/justin/Documents/Github/GOES_VFI/goesvfi /Users/justin/Documents/Github/GOES_VFI/tests /Users/justin/Documents/Github/GOES_VFI/examples[0m
[1m[94m
[1mRunning Mypy Type Checking...[0m[0m
examples/utilities/mypy_analyzer.py:32: error: Incompatible default for argument "exclude_patterns" (default has type "None", argument has type "list[str]")  [assignment]
examples/utilities/mypy_analyzer.py:32: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
examples/utilities/mypy_analyzer.py:32: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
goesvfi/integrity_check/background_worker.py:185: error: Item "None" of "QThreadPool | None" has no attribute "maxThreadCount"  [union-attr]
goesvfi/integrity_check/background_worker.py:186: error: Item "None" of "QThreadPool | None" has no attribute "setMaxThreadCount"  [union-attr]
goesvfi/integrity_check/background_worker.py:207: error: Need type annotation for "task"  [var-annotated]
goesvfi/integrity_check/background_worker.py:220: error: Item "None" of "QThreadPool | None" has no attribute "start"  [union-attr]
goesvfi/integrity_check/background_worker.py:353: error: Item "None" of "QThreadPool | None" has no attribute "waitForDone"  [union-attr]
goesvfi/utils/gui_helpers.py:313: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:319: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:323: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:330: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:335: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:343: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:349: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:356: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:363: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:370: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/utils/gui_helpers.py:377: error: "RifeCapabilityManager" has no attribute "tr"  [attr-defined]
goesvfi/integrity_check/user_feedback.py:389: error: Cannot find implementation or library stub for module named "win10toast"  [import-not-found]
goesvfi/integrity_check/user_feedback.py:389: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
goesvfi/integrity_check/user_feedback.py:415: error: Module has no attribute "MessageBeep"  [attr-defined]
goesvfi/integrity_check/user_feedback.py:415: error: Module has no attribute "MB_OK"  [attr-defined]
goesvfi/integrity_check/user_feedback.py:436: error: Module has no attribute "MessageBeep"  [attr-defined]
goesvfi/integrity_check/user_feedback.py:436: error: Module has no attribute "MB_ICONHAND"  [attr-defined]
goesvfi/integrity_check/user_feedback.py:755: error: Item "None" of "QListWidgetItem | None" has no attribute "setForeground"  [union-attr]
goesvfi/integrity_check/user_feedback.py:757: error: Item "None" of "QListWidgetItem | None" has no attribute "setForeground"  [union-attr]
goesvfi/integrity_check/user_feedback.py:759: error: Item "None" of "QListWidgetItem | None" has no attribute "setForeground"  [union-attr]
goesvfi/integrity_check/user_feedback.py:761: error: Item "None" of "QListWidgetItem | None" has no attribute "setForeground"  [union-attr]
goesvfi/integrity_check/user_feedback.py:773: error: Name "QApplication" is not defined  [name-defined]
goesvfi/integrity_check/user_feedback.py:788: error: Item "None" of "QListWidgetItem | None" has no attribute "text"  [union-attr]
goesvfi/integrity_check/user_feedback.py:792: error: Name "QApplication" is not defined  [name-defined]
goesvfi/integrity_check/user_feedback.py:998: error: Item "None" of "QScrollBar | None" has no attribute "setValue"  [union-attr]
goesvfi/integrity_check/user_feedback.py:999: error: Item "None" of "QScrollBar | None" has no attribute "maximum"  [union-attr]
goesvfi/gui_tabs/ffmpeg_settings_tab.py:961: error: Incompatible default for argument "current_settings" (default has type "None", argument has type "dict[str, Any]")  [assignment]
goesvfi/gui_tabs/ffmpeg_settings_tab.py:961: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
goesvfi/gui_tabs/ffmpeg_settings_tab.py:961: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
goesvfi/gui_tabs/ffmpeg_settings_tab.py:962: error: Incompatible default for argument "profile_dict" (default has type "None", argument has type "FfmpegProfile")  [assignment]
goesvfi/gui_tabs/ffmpeg_settings_tab.py:962: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
goesvfi/gui_tabs/ffmpeg_settings_tab.py:962: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
goesvfi/integrity_check/time_index_refactored.py:64: error: Need type annotation for "COMPILED_PATTERNS" (hint: "COMPILED_PATTERNS: dict[<type>, <type>] = ...")  [var-annotated]
goesvfi/integrity_check/time_index_refactored.py:680: error: Argument 4 to "_get_s3_filename_pattern" has incompatible type "dict[str, object]"; expected "dict[str, str]"  [arg-type]
examples/s3_access/scan_goes_dates.py:81: error: Name "VERBOSE" is not defined  [name-defined]
examples/s3_access/scan_goes_dates.py:138: error: Name "VERBOSE" is not defined  [name-defined]
examples/imagery/scan_goes_dates.py:81: error: Name "VERBOSE" is not defined  [name-defined]
examples/imagery/scan_goes_dates.py:138: error: Name "VERBOSE" is not defined  [name-defined]
examples/download/download_goes_jpeg.py:162: error: Incompatible return value type (got "tuple[str, datetime]", expected "str | None")  [return-value]
examples/download/download_goes_jpeg.py:168: error: Incompatible return value type (got "tuple[None, None]", expected "str | None")  [return-value]
examples/download/download_goes_jpeg.py:229: error: Unpacking a string is disallowed  [misc]
examples/download/download_goes_jpeg.py:229: error: "None" object is not iterable  [misc]
goesvfi/integrity_check/auto_detection.py:114: error: Too many arguments for "addWidget" of "QLayout"  [call-arg]
goesvfi/integrity_check/auto_detection.py:114: error: "QLayout" has no attribute "columnCount"  [attr-defined]
goesvfi/integrity_check/auto_detection.py:137: error: Item "None" of "QListWidgetItem | None" has no attribute "setForeground"  [union-attr]
goesvfi/integrity_check/auto_detection.py:138: error: Item "None" of "QListWidgetItem | None" has no attribute "setBackground"  [union-attr]
goesvfi/integrity_check/auto_detection.py:348: error: Dict entry 1 has incompatible type "str": "datetime"; expected "str": "str | None"  [dict-item]
goesvfi/integrity_check/auto_detection.py:349: error: Dict entry 2 has incompatible type "str": "datetime"; expected "str": "str | None"  [dict-item]
goesvfi/integrity_check/auto_detection.py:350: error: Dict entry 3 has incompatible type "str": "list[datetime]"; expected "str": "str | None"  [dict-item]
goesvfi/integrity_check/auto_detection.py:696: error: Cannot assign to a method  [method-assign]
goesvfi/integrity_check/auto_detection.py:696: error: Incompatible types in assignment (expression has type "dict[str, Any]", variable has type "Callable[[], int]")  [assignment]
examples/s3_access/test_s3_list.py:66: error: Need type annotation for "band_counts" (hint: "band_counts: dict[<type>, <type>] = ...")  [var-annotated]
examples/s3_access/test_real_s3_paths.py:82: error: Argument 1 to "date_to_doy" has incompatible type "date"; expected "datetime"  [arg-type]
examples/s3_access/test_real_s3_paths.py:473: error: Argument 1 to "date_to_doy" has incompatible type "date"; expected "datetime"  [arg-type]
examples/s3_access/test_real_s3_paths.py:490: error: Need type annotation for "band_counts" (hint: "band_counts: dict[<type>, <type>] = ...")  [var-annotated]
examples/s3_access/s3_list.py:70: error: Need type annotation for "band_counts" (hint: "band_counts: dict[<type>, <type>] = ...")  [var-annotated]
examples/download/test_download_mesoscale.py:93: error: Need type annotation for "m1_files" (hint: "m1_files: list[<type>] = ...")  [var-annotated]
examples/download/test_download_mesoscale.py:94: error: Need type annotation for "m2_files" (hint: "m2_files: list[<type>] = ...")  [var-annotated]
examples/download/test_download_mesoscale.py:165: error: Need type annotation for "satellite_results"  [var-annotated]
examples/download/download_mesoscale.py:98: error: Need type annotation for "m1_files" (hint: "m1_files: list[<type>] = ...")  [var-annotated]
examples/download/download_mesoscale.py:99: error: Need type annotation for "m2_files" (hint: "m2_files: list[<type>] = ...")  [var-annotated]
examples/download/download_mesoscale.py:170: error: Need type annotation for "satellite_results"  [var-annotated]
tests/integration/test_unified_interface.py:84: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/integration/test_unified_interface.py:100: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/integration/test_unified_interface.py:101: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/integration/test_unified_interface.py:108: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, Any]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/integration/test_unified_interface.py:333: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
tests/integration/test_unified_interface.py:360: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
tests/integration/test_unified_interface.py:391: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
tests/integration/test_unified_interface.py:408: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
tests/integration/test_unified_interface.py:425: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
tests/integration/test_unified_interface.py:429: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
tests/integration/test_unified_interface.py:435: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
goesvfi/integrity_check/goes_imagery_tab.py:526: error: Name "self" is not defined  [name-defined]
examples/utilities/test_time_index_refactored.py:8: error: Module "goesvfi.integrity_check.time_index_refactored" has no attribute "_get_folder_datetime"  [attr-defined]
examples/utilities/test_time_index_refactored.py:403: error: Argument 2 to "_find_nearest_valid_scan_minute" has incompatible type "None"; expected "list[int]"  [arg-type]
examples/utilities/test_ffmpeg_builder.py:310: error: Argument 2 to "set_two_pass" of "FFmpegCommandBuilder" has incompatible type "None"; expected "str"  [arg-type]
examples/utilities/test_ffmpeg_builder.py:319: error: Argument 3 to "set_two_pass" of "FFmpegCommandBuilder" has incompatible type "None"; expected "int"  [arg-type]
examples/s3_access/test_s3_error_handling.py:40: error: Argument 1 to "addAsyncCleanup" of "IsolatedAsyncioTestCase" has incompatible type "Callable[[], None]"; expected "Callable[[], Awaitable[object]]"  [arg-type]
examples/s3_access/test_s3_error_handling.py:115: error: Need type annotation for "empty_pages" (hint: "empty_pages: list[<type>] = ...")  [var-annotated]
examples/s3_access/test_s3_download_stats_fixed.py:81: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:82: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:88: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:89: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:92: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:93: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:94: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:95: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:96: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:97: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:99: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:121: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:122: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:125: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:126: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:127: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:128: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:129: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:131: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats_fixed.py:205: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:210: error: "object" has no attribute "__iter__"; maybe "__dir__" or "__str__"? (not iterable)  [attr-defined]
examples/s3_access/test_s3_download_stats_fixed.py:217: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:235: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:238: error: "object" has no attribute "__iter__"; maybe "__dir__" or "__str__"? (not iterable)  [attr-defined]
examples/s3_access/test_s3_download_stats_fixed.py:257: error: Argument 1 to "len" has incompatible type "object"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats_fixed.py:259: error: Value of type "object" is not indexable  [index]
examples/s3_access/test_s3_download_stats.py:76: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:89: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:90: error: Value of type "int | float | list[float] | list[dict[str, Any]] | list[str] | str" is not indexable  [index]
examples/s3_access/test_s3_download_stats.py:100: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:114: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:115: error: Value of type "int | float | list[float] | list[dict[str, Any]] | list[str] | str" is not indexable  [index]
examples/s3_access/test_s3_download_stats.py:145: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:169: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:173: error: Argument 2 to "assertNotIn" of "TestCase" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Iterable[Any] | Container[Any]"  [arg-type]
examples/s3_access/test_s3_download_stats.py:181: error: Argument 2 to "assertIn" of "TestCase" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Iterable[Any] | Container[Any]"  [arg-type]
examples/s3_access/test_s3_download_stats.py:289: error: Argument 1 to "addAsyncCleanup" of "IsolatedAsyncioTestCase" has incompatible type "Callable[[], None]"; expected "Callable[[], Awaitable[object]]"  [arg-type]
examples/s3_access/test_s3_download_stats.py:325: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:352: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_download_stats.py:377: error: Name "ResourceNotFoundError" is not defined  [name-defined]
examples/s3_access/test_s3_download_stats.py:387: error: Argument 1 to "len" has incompatible type "int | float | list[float] | list[dict[str, Any]] | list[str] | str"; expected "Sized"  [arg-type]
examples/s3_access/test_s3_band13.py:243: error: Need type annotation for "results" (hint: "results: dict[<type>, <type>] = ...")  [var-annotated]
examples/s3_access/test_real_s3_path.py:137: error: "object" has no attribute "append"  [attr-defined]
examples/s3_access/test_real_s3_path.py:191: error: Incompatible types in assignment (expression has type "str", variable has type "SatellitePattern")  [assignment]
examples/s3_access/s3_band13.py:243: error: Need type annotation for "results" (hint: "results: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/test_goes_imagery.py:98: error: Item "None" of "Path | None" has no attribute "exists"  [union-attr]
examples/download/test_download_band13.py:313: error: Need type annotation for "results" (hint: "results: dict[<type>, <type>] = ...")  [var-annotated]
examples/download/download_band13.py:317: error: Need type annotation for "results" (hint: "results: dict[<type>, <type>] = ...")  [var-annotated]
tests/utils/pyqt_async_test.py:131: error: Item "None" of "QMetaObject | None" has no attribute "methodCount"  [union-attr]
tests/utils/pyqt_async_test.py:132: error: Item "None" of "QMetaObject | None" has no attribute "method"  [union-attr]
tests/utils/pyqt_async_test.py:135: error: Argument 1 to "bytes" has incompatible type "QByteArray | Any"; expected "Iterable[SupportsIndex] | SupportsIndex | SupportsBytes | Buffer"  [arg-type]
tests/integration/test_goes_imagery_tab.py:90: error: Value of type "Any | None" is not indexable  [index]
tests/integration/test_goes_imagery_tab.py:91: error: Value of type "Any | None" is not indexable  [index]
tests/integration/test_goes_imagery_tab.py:92: error: Value of type "Any | None" is not indexable  [index]
tests/integration/test_goes_imagery_tab.py:93: error: Value of type "Any | None" is not indexable  [index]
tests/integration/test_goes_imagery_tab.py:179: error: Cannot assign to a method  [method-assign]
tests/gui/imagery/test_imagery_zoom.py:151: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_zoom.py:159: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_zoom.py:160: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_zoom.py:168: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, Any]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_simplified.py:149: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_simplified.py:157: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_simplified.py:158: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_simplified.py:166: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, Any]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_simple.py:93: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_simple.py:96: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_simple.py:102: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, Any]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_simple.py:206: error: Module "PyQt6.QtGui" has no attribute "QRect"  [attr-defined]
tests/gui/imagery/test_imagery_simple.py:208: error: Incompatible types in assignment (expression has type "QPainter", variable has type "voidptr | None")  [assignment]
tests/gui/imagery/test_imagery_simple.py:211: error: Item "voidptr" of "voidptr | None" has no attribute "fillRect"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:211: error: Item "None" of "voidptr | None" has no attribute "fillRect"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:212: error: Item "voidptr" of "voidptr | None" has no attribute "setPen"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:212: error: Item "None" of "voidptr | None" has no attribute "setPen"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:213: error: Item "voidptr" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:213: error: Item "None" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:221: error: Item "voidptr" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:221: error: Item "None" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:225: error: Item "voidptr" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:225: error: Item "None" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:228: error: Item "voidptr" of "voidptr | None" has no attribute "setPen"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:228: error: Item "None" of "voidptr | None" has no attribute "setPen"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:229: error: Item "voidptr" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:229: error: Item "None" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:265: error: Item "voidptr" of "voidptr | None" has no attribute "fillRect"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:265: error: Item "None" of "voidptr | None" has no attribute "fillRect"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:266: error: Item "voidptr" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:266: error: Item "None" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:267: error: Item "voidptr" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:267: error: Item "None" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:270: error: Item "voidptr" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:270: error: Item "None" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:273: error: Item "voidptr" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:273: error: Item "None" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:278: error: Item "voidptr" of "voidptr | None" has no attribute "fillRect"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:278: error: Item "None" of "voidptr | None" has no attribute "fillRect"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:279: error: Item "voidptr" of "voidptr | None" has no attribute "setPen"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:279: error: Item "None" of "voidptr | None" has no attribute "setPen"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:280: error: Item "voidptr" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:280: error: Item "None" of "voidptr | None" has no attribute "setFont"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:281: error: Item "voidptr" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:281: error: Item "None" of "voidptr | None" has no attribute "drawText"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:287: error: Item "voidptr" of "voidptr | None" has no attribute "end"  [union-attr]
tests/gui/imagery/test_imagery_simple.py:287: error: Item "None" of "voidptr | None" has no attribute "end"  [union-attr]
examples/s3_access/test_real_s3_store.py:247: error: Argument 1 to "addAsyncCleanup" of "IsolatedAsyncioTestCase" has incompatible type "Callable[[], None]"; expected "Callable[[], Awaitable[object]]"  [arg-type]
examples/debugging/test_remote_stores.py:602: error: Cannot assign to a method  [method-assign]
examples/debugging/test_remote_stores.py:675: error: Need type annotation for "empty_page_content"  [var-annotated]
examples/debugging/test_date_range_selector.py:33: error: Need type annotation for "emitted_ranges" (hint: "emitted_ranges: list[<type>] = ...")  [var-annotated]
examples/debugging/test_date_range_selector.py:158: error: Need type annotation for "emitted_ranges" (hint: "emitted_ranges: list[<type>] = ...")  [var-annotated]
tests/unit/test_tiler.py:60: error: Argument "full_shape" to "merge_tiles" has incompatible type "tuple[int, ...]"; expected "tuple[int, int]"  [arg-type]
tests/unit/test_thread_cache_db.py:67: error: "object" has no attribute "append"  [attr-defined]
tests/unit/test_date_sorter.py:174: error: Need type annotation for "daily_records" (hint: "daily_records: dict[<type>, <type>] = ...")  [var-annotated]
tests/unit/test_date_sorter.py:277: error: Need type annotation for "daily_records" (hint: "daily_records: dict[<type>, <type>] = ...")  [var-annotated]
tests/unit/test_date_sorter.py:278: error: Need type annotation for "missing_intervals" (hint: "missing_intervals: list[<type>] = ...")  [var-annotated]
tests/unit/test_date_sorter.py:312: error: Need type annotation for "daily_records" (hint: "daily_records: dict[<type>, <type>] = ...")  [var-annotated]
tests/unit/test_date_sorter.py:313: error: Need type annotation for "missing_intervals" (hint: "missing_intervals: list[<type>] = ...")  [var-annotated]
tests/unit/test_cache.py:86: error: Argument 5 to "save_cache" has incompatible type "list[ndarray[tuple[int, int], dtype[float64]]]"; expected "list[ndarray[tuple[int, ...], dtype[Any]]]"  [arg-type]
tests/unit/test_cache.py:86: note: "List" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance
tests/unit/test_cache.py:86: note: Consider using "Sequence" instead, which is covariant
tests/unit/test_cache.py:109: error: Argument 5 to "save_cache" has incompatible type "list[ndarray[tuple[int, int], dtype[float64]]]"; expected "list[ndarray[tuple[int, ...], dtype[Any]]]"  [arg-type]
tests/unit/test_cache.py:109: note: "List" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance
tests/unit/test_cache.py:109: note: Consider using "Sequence" instead, which is covariant
tests/unit/test_background_worker.py:72: error: Need type annotation for "result"  [var-annotated]
tests/unit/test_background_worker.py:93: error: Need type annotation for "task"  [var-annotated]
tests/unit/test_background_worker.py:114: error: Need type annotation for "task"  [var-annotated]
tests/unit/test_background_worker.py:153: error: Need type annotation for "task"  [var-annotated]
tests/unit/test_background_worker.py:183: error: Need type annotation for "task"  [var-annotated]
tests/unit/test_background_worker.py:217: error: Need type annotation for "task"  [var-annotated]
tests/unit/test_background_worker.py:468: error: Need type annotation for "task"  [var-annotated]
tests/unit/test_background_worker.py:486: error: Need type annotation for "task"  [var-annotated]
tests/unit/test_background_worker.py:504: error: Item "None" of "QThreadPool | None" has no attribute "maxThreadCount"  [union-attr]
tests/unit/test_background_worker.py:533: error: Need type annotation for "task"  [var-annotated]
goesvfi/pipeline/run_vfi.py:316: error: Argument "rife_exe_path" to "run_vfi" has incompatible type "Path | None"; expected "Path"  [arg-type]
goesvfi/pipeline/run_vfi.py:1687: error: Incompatible types in "yield" (actual type "str", expected type "tuple[int, int, float] | Path")  [misc]
tests/unit/test_run_vfi_refactored.py:533: error: Cannot assign to class variable "finished" via instance  [misc]
tests/unit/test_run_vfi_refactored.py:542: error: Argument 1 to "_process_run_vfi_output" of "VfiWorker" has incompatible type "list[tuple[int, int, float]]"; expected "Iterator[tuple[int, int, float] | Path | str]"  [arg-type]
tests/unit/test_run_vfi_refactored.py:542: note: "list" is missing following "Iterator" protocol member:
tests/unit/test_run_vfi_refactored.py:542: note:     __next__
tests/unit/test_run_vfi_refactored.py:549: error: Argument 1 to "_process_run_vfi_output" of "VfiWorker" has incompatible type "list[Path]"; expected "Iterator[tuple[int, int, float] | Path | str]"  [arg-type]
tests/unit/test_run_vfi_refactored.py:549: note: "list" is missing following "Iterator" protocol member:
tests/unit/test_run_vfi_refactored.py:549: note:     __next__
tests/unit/test_run_vfi_refactored.py:553: error: Argument 1 to "_process_run_vfi_output" of "VfiWorker" has incompatible type "list[str]"; expected "Iterator[tuple[int, int, float] | Path | str]"  [arg-type]
tests/unit/test_run_vfi_refactored.py:553: note: "list" is missing following "Iterator" protocol member:
tests/unit/test_run_vfi_refactored.py:553: note:     __next__
tests/unit/test_run_vfi_fixed.py:152: error: Cannot assign to a method  [method-assign]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "Path"  [arg-type]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "int"  [arg-type]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "str"  [arg-type]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "bool"  [arg-type]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "float | None"  [arg-type]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "int | None"  [arg-type]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "float"  [arg-type]
tests/integration/test_vfi_worker.py:113: error: Argument 1 to "VfiWorker" has incompatible type "**dict[str, object]"; expected "tuple[int, int, int, int] | None"  [arg-type]
tests/unit/test_main_tab.py:111: error: "MainTab" has no attribute "mock_image_loader"  [attr-defined]
tests/unit/test_main_tab.py:112: error: "MainTab" has no attribute "mock_sanchez_processor"  [attr-defined]
tests/unit/test_main_tab.py:113: error: "MainTab" has no attribute "mock_image_cropper"  [attr-defined]
tests/unit/test_main_tab.py:114: error: "MainTab" has no attribute "mock_settings"; maybe "load_settings"?  [attr-defined]
tests/unit/test_main_tab.py:115: error: "MainTab" has no attribute "mock_preview_signal"  [attr-defined]
tests/unit/test_main_tab.py:116: error: "MainTab" has no attribute "mock_main_window_ref"  [attr-defined]
examples/visualization/visualize_all_channels.py:262: error: "object" not callable  [operator]
examples/visualization/natural_earth_color.py:14: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/visualization/improved_true_color.py:21: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/visualization/improved_true_color.py:127: error: Need type annotation for "timestamps_by_band" (hint: "timestamps_by_band: dict[<type>, <type>] = ...")  [var-annotated]
examples/visualization/enhanced_true_color.py:14: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/processing/improved_goes_processor.py:893: error: Need type annotation for "timestamps" (hint: "timestamps: dict[<type>, <type>] = ...")  [var-annotated]
examples/processing/improved_cmip_processor.py:263: error: Need type annotation for "files_by_band" (hint: "files_by_band: dict[<type>, <type>] = ...")  [var-annotated]
examples/processing/improved_cmip_processor.py:322: error: Need type annotation for "product_groups" (hint: "product_groups: dict[<type>, <type>] = ...")  [var-annotated]
examples/processing/goes_satpy_processor.py:22: error: Cannot find implementation or library stub for module named "satpy"  [import-not-found]
examples/processing/goes_satpy_processor.py:23: error: Cannot find implementation or library stub for module named "satpy.writers"  [import-not-found]
examples/processing/goes_satpy_processor.py:405: error: Need type annotation for "downloaded_files" (hint: "downloaded_files: dict[<type>, <type>] = ...")  [var-annotated]
examples/processing/goes_satpy_processor.py:438: error: Need type annotation for "timestamps" (hint: "timestamps: dict[<type>, <type>] = ...")  [var-annotated]
examples/processing/goes_satpy_processor.py:469: error: Incompatible types in assignment (expression has type "list[Never]", variable has type "dict[Any, Any]")  [assignment]
examples/processing/goes_satpy_processor.py:474: error: "dict[Any, Any]" has no attribute "append"  [attr-defined]
examples/processing/extract_cmip_truecolor.py:93: error: Argument 1 to "join" of "str" has incompatible type "list[Hashable]"; expected "Iterable[str]"  [arg-type]
examples/processing/analyze_cmip_structure.py:99: error: Need type annotation for "files_by_product" (hint: "files_by_product: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/test_netcdf_channel_extraction.py:124: error: Incompatible default for argument "min_val" (default has type "None", argument has type "float")  [assignment]
examples/imagery/test_netcdf_channel_extraction.py:124: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
examples/imagery/test_netcdf_channel_extraction.py:124: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
examples/imagery/test_netcdf_channel_extraction.py:125: error: Incompatible default for argument "max_val" (default has type "None", argument has type "float")  [assignment]
examples/imagery/test_netcdf_channel_extraction.py:125: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
examples/imagery/test_netcdf_channel_extraction.py:125: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
examples/imagery/test_netcdf_channel_extraction.py:178: error: No overload variant of "add_axes" of "FigureBase" matches argument type "list[int]"  [call-overload]
examples/imagery/test_netcdf_channel_extraction.py:178: note: Possible overload variants:
examples/imagery/test_netcdf_channel_extraction.py:178: note:     def add_axes(self, ax: Axes) -> Axes
examples/imagery/test_netcdf_channel_extraction.py:178: note:     def add_axes(self, rect: tuple[float, float, float, float], projection: str | None = ..., polar: bool = ..., **kwargs: Any) -> Axes
examples/imagery/test_netcdf_channel_extraction.py:259: error: Incompatible return value type (got "None", expected "int")  [return-value]
examples/imagery/netcdf_channel_extraction.py:124: error: Incompatible default for argument "min_val" (default has type "None", argument has type "float")  [assignment]
examples/imagery/netcdf_channel_extraction.py:124: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
examples/imagery/netcdf_channel_extraction.py:124: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
examples/imagery/netcdf_channel_extraction.py:125: error: Incompatible default for argument "max_val" (default has type "None", argument has type "float")  [assignment]
examples/imagery/netcdf_channel_extraction.py:125: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
examples/imagery/netcdf_channel_extraction.py:125: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
examples/imagery/netcdf_channel_extraction.py:178: error: No overload variant of "add_axes" of "FigureBase" matches argument type "list[int]"  [call-overload]
examples/imagery/netcdf_channel_extraction.py:178: note: Possible overload variants:
examples/imagery/netcdf_channel_extraction.py:178: note:     def add_axes(self, ax: Axes) -> Axes
examples/imagery/netcdf_channel_extraction.py:178: note:     def add_axes(self, rect: tuple[float, float, float, float], projection: str | None = ..., polar: bool = ..., **kwargs: Any) -> Axes
examples/imagery/netcdf_channel_extraction.py:259: error: Incompatible return value type (got "None", expected "int")  [return-value]
examples/imagery/natural_earth_color.py:14: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/imagery/improved_true_color.py:21: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/imagery/improved_true_color.py:127: error: Need type annotation for "timestamps_by_band" (hint: "timestamps_by_band: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/improved_goes_processor.py:893: error: Need type annotation for "timestamps" (hint: "timestamps: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/improved_cmip_processor.py:263: error: Need type annotation for "files_by_band" (hint: "files_by_band: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/improved_cmip_processor.py:322: error: Need type annotation for "product_groups" (hint: "product_groups: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/goes_satpy_processor.py:22: error: Cannot find implementation or library stub for module named "satpy"  [import-not-found]
examples/imagery/goes_satpy_processor.py:23: error: Cannot find implementation or library stub for module named "satpy.writers"  [import-not-found]
examples/imagery/goes_satpy_processor.py:405: error: Need type annotation for "downloaded_files" (hint: "downloaded_files: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/goes_satpy_processor.py:438: error: Need type annotation for "timestamps" (hint: "timestamps: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/goes_satpy_processor.py:469: error: Incompatible types in assignment (expression has type "list[Never]", variable has type "dict[Any, Any]")  [assignment]
examples/imagery/goes_satpy_processor.py:474: error: "dict[Any, Any]" has no attribute "append"  [attr-defined]
examples/imagery/extract_cmip_truecolor.py:93: error: Argument 1 to "join" of "str" has incompatible type "list[Hashable]"; expected "Iterable[str]"  [arg-type]
examples/imagery/enhanced_true_color.py:14: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/imagery/analyze_cmip_structure.py:99: error: Need type annotation for "files_by_product" (hint: "files_by_product: dict[<type>, <type>] = ...")  [var-annotated]
examples/download/download_true_color.py:124: error: Need type annotation for "timestamps_by_band" (hint: "timestamps_by_band: dict[<type>, <type>] = ...")  [var-annotated]
examples/download/download_and_process_cmip.py:56: error: Need type annotation for "files_by_band" (hint: "files_by_band: dict[<type>, <type>] = ...")  [var-annotated]
examples/imagery/test_satpy_rendering.py:19: error: Cannot find implementation or library stub for module named "dask.array"  [import-not-found]
examples/imagery/test_satpy_rendering.py:19: error: Cannot find implementation or library stub for module named "dask"  [import-not-found]
examples/imagery/test_satpy_rendering.py:23: error: Cannot find implementation or library stub for module named "satpy"  [import-not-found]
examples/imagery/test_satpy_rendering.py:24: error: Cannot find implementation or library stub for module named "satpy.writers"  [import-not-found]
examples/imagery/test_satpy_rendering.py:25: error: Cannot find implementation or library stub for module named "trollimage.xrimage"  [import-not-found]
examples/imagery/test_satpy_rendering.py:142: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "DataArray")  [assignment]
examples/imagery/test_satpy_rendering.py:155: error: Cannot find implementation or library stub for module named "skimage.transform"  [import-not-found]
examples/imagery/test_satpy_rendering.py:174: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "DataArray")  [assignment]
examples/imagery/test_satpy_rendering.py:209: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "DataArray")  [assignment]
examples/imagery/test_satpy_rendering.py:347: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "ndarray[tuple[int, int, int], dtype[float64]]")  [assignment]
examples/imagery/test_satpy_rendering.py:350: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[float64]]", variable has type "ndarray[tuple[int, int, int], dtype[float64]]")  [assignment]
examples/imagery/test_goes_product_detection.py:277: error: "Hashable" has no attribute "lower"  [attr-defined]
examples/imagery/test_goes_product_detection.py:363: error: Argument 2 to "Axes" has incompatible type "list[float]"; expected "tuple[float, float, float, float] | Bbox | int"  [arg-type]
examples/imagery/test_goes_product_detection.py:485: error: Cannot find implementation or library stub for module named "skimage.transform"  [import-not-found]
examples/imagery/test_goes_product_detection.py:485: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/imagery/test_goes_product_detection.py:557: error: Argument 2 to "Axes" has incompatible type "list[float]"; expected "tuple[float, float, float, float] | Bbox | int"  [arg-type]
examples/imagery/satpy_rendering.py:19: error: Cannot find implementation or library stub for module named "dask.array"  [import-not-found]
examples/imagery/satpy_rendering.py:19: error: Cannot find implementation or library stub for module named "dask"  [import-not-found]
examples/imagery/satpy_rendering.py:23: error: Cannot find implementation or library stub for module named "satpy"  [import-not-found]
examples/imagery/satpy_rendering.py:24: error: Cannot find implementation or library stub for module named "satpy.writers"  [import-not-found]
examples/imagery/satpy_rendering.py:25: error: Cannot find implementation or library stub for module named "trollimage.xrimage"  [import-not-found]
examples/imagery/satpy_rendering.py:142: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "DataArray")  [assignment]
examples/imagery/satpy_rendering.py:155: error: Cannot find implementation or library stub for module named "skimage.transform"  [import-not-found]
examples/imagery/satpy_rendering.py:174: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "DataArray")  [assignment]
examples/imagery/satpy_rendering.py:209: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "DataArray")  [assignment]
examples/imagery/satpy_rendering.py:347: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[Any]]", variable has type "ndarray[tuple[int, int, int], dtype[float64]]")  [assignment]
examples/imagery/satpy_rendering.py:350: error: Incompatible types in assignment (expression has type "ndarray[tuple[int, ...], dtype[float64]]", variable has type "ndarray[tuple[int, int, int], dtype[float64]]")  [assignment]
examples/imagery/goes_product_detection.py:277: error: "Hashable" has no attribute "lower"  [attr-defined]
examples/imagery/goes_product_detection.py:363: error: Argument 2 to "Axes" has incompatible type "list[float]"; expected "tuple[float, float, float, float] | Bbox | int"  [arg-type]
examples/imagery/goes_product_detection.py:485: error: Cannot find implementation or library stub for module named "skimage.transform"  [import-not-found]
examples/imagery/goes_product_detection.py:485: error: Cannot find implementation or library stub for module named "skimage"  [import-not-found]
examples/imagery/goes_product_detection.py:557: error: Argument 2 to "Axes" has incompatible type "list[float]"; expected "tuple[float, float, float, float] | Bbox | int"  [arg-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:25: error: Type application is only supported for generic classes  [misc]
goesvfi/integrity_check/reconcile_manager_refactored.py:25: error: Type application targets a non-generic function or class  [misc]
goesvfi/integrity_check/reconcile_manager_refactored.py:25: error: Bracketed expression "[...]" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:26: error: Type application is only supported for generic classes  [misc]
goesvfi/integrity_check/reconcile_manager_refactored.py:26: error: Type application targets a non-generic function or class  [misc]
goesvfi/integrity_check/reconcile_manager_refactored.py:26: error: Bracketed expression "[...]" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:27: error: Type application is only supported for generic classes  [misc]
goesvfi/integrity_check/reconcile_manager_refactored.py:27: error: Type application targets a non-generic function or class  [misc]
goesvfi/integrity_check/reconcile_manager_refactored.py:27: error: Bracketed expression "[...]" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:45: error: Missing return statement  [empty-body]
goesvfi/integrity_check/reconcile_manager_refactored.py:58: error: Missing return statement  [empty-body]
goesvfi/integrity_check/reconcile_manager_refactored.py:97: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ProgressCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:97: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:145: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ProgressCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:145: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:181: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.FileCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:181: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:214: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.FileCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:214: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:215: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ErrorCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:215: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:260: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ErrorCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:260: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:279: error: "Exception" has no attribute "get_user_message"  [attr-defined]
goesvfi/integrity_check/reconcile_manager_refactored.py:308: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ErrorCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:308: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:372: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ProgressCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:372: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:373: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.FileCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:373: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:374: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ErrorCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:374: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:375: error: Incompatible default for argument "semaphore" (default has type "None", argument has type "Semaphore")  [assignment]
goesvfi/integrity_check/reconcile_manager_refactored.py:375: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
goesvfi/integrity_check/reconcile_manager_refactored.py:375: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
goesvfi/integrity_check/reconcile_manager_refactored.py:513: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ProgressCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:513: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:514: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.FileCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:514: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:515: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ErrorCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:515: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:516: error: Incompatible default for argument "semaphore" (default has type "None", argument has type "Semaphore")  [assignment]
goesvfi/integrity_check/reconcile_manager_refactored.py:516: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
goesvfi/integrity_check/reconcile_manager_refactored.py:516: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
goesvfi/integrity_check/reconcile_manager_refactored.py:576: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ProgressCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:576: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:577: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.FileCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:577: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:578: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ErrorCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:578: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:579: error: Incompatible default for argument "semaphore" (default has type "None", argument has type "Semaphore")  [assignment]
goesvfi/integrity_check/reconcile_manager_refactored.py:579: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
goesvfi/integrity_check/reconcile_manager_refactored.py:579: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
goesvfi/integrity_check/reconcile_manager_refactored.py:639: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ProgressCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:639: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:640: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.FileCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:640: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:641: error: Variable "goesvfi.integrity_check.reconcile_manager_refactored.ErrorCallback" is not valid as a type  [valid-type]
goesvfi/integrity_check/reconcile_manager_refactored.py:641: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
goesvfi/integrity_check/reconcile_manager_refactored.py:655: error: Need type annotation for "results" (hint: "results: dict[<type>, <type>] = ...")  [var-annotated]
tests/gui/test_imagery_error_handling.py:66: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/test_imagery_error_handling.py:67: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/test_imagery_error_handling.py:73: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/test_imagery_error_handling.py:90: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, Any]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/test_imagery_error_handling.py:108: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[int, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/test_imagery_error_handling.py:116: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/test_imagery_error_handling.py:117: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/test_imagery_error_handling.py:118: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/test_imagery_error_handling.py:134: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[int, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/test_imagery_error_handling.py:199: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[int, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui_fixed.py:111: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui_fixed.py:112: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui_fixed.py:128: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui_fixed.py:133: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, Any]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui_fixed.py:240: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui.py:149: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui.py:150: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui.py:172: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui.py:177: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[Any, Any]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui.py:195: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[int, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui.py:204: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui.py:205: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui.py:206: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
tests/gui/imagery/test_imagery_gui.py:222: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[int, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui.py:287: error: Argument 1 to "rectangle" of "ImageDraw" has incompatible type "list[tuple[int, int]]"; expected "tuple[float, float, float, float] | tuple[tuple[float, float], tuple[float, float]]"  [arg-type]
tests/gui/imagery/test_imagery_gui.py:337: error: Incompatible types in assignment (expression has type "ImageFont", variable has type "FreeTypeFont")  [assignment]
examples/s3_access/test_s3_threadlocal_integration.py:132: error: "object" has no attribute "replace"  [attr-defined]
examples/s3_access/test_s3_threadlocal_integration.py:133: error: "object" has no attribute "replace"  [attr-defined]
examples/s3_access/test_s3_threadlocal_integration.py:134: error: "object" has no attribute "replace"  [attr-defined]
examples/s3_access/test_s3_threadlocal_integration.py:219: error: Unexpected keyword argument "product_type" for "fetch_missing_files" of "ReconcileManager"  [call-arg]
examples/s3_access/test_s3_threadlocal_integration.py:219: error: Unexpected keyword argument "band" for "fetch_missing_files" of "ReconcileManager"  [call-arg]
examples/s3_access/test_s3_threadlocal_integration.py:350: error: Unexpected keyword argument "product_type" for "fetch_missing_files" of "ReconcileManager"  [call-arg]
examples/s3_access/test_s3_threadlocal_integration.py:403: error: "await" outside coroutine ("async def")  [await-not-async]
examples/s3_access/test_s3_threadlocal_integration.py:419: error: Argument "minute" to "replace" of "datetime" has incompatible type "object"; expected "SupportsIndex"  [arg-type]
examples/s3_access/test_s3_retry_strategy_fixed.py:214: error: Cannot assign to a method  [method-assign]
examples/s3_access/test_s3_retry_strategy.py:46: error: Argument 1 to "addAsyncCleanup" of "IsolatedAsyncioTestCase" has incompatible type "Callable[[], None]"; expected "Callable[[], Awaitable[object]]"  [arg-type]
examples/s3_access/test_s3_retry_strategy.py:309: error: Cannot assign to a method  [method-assign]
examples/s3_access/test_s3_retry_strategy.py:309: error: Incompatible types in assignment (expression has type "Callable[[Any, Any, Any], Any]", variable has type "Callable[[datetime, SatellitePattern, Path, str, int], Coroutine[Any, Any, Path]]")  [assignment]
examples/s3_access/test_s3_retry_strategy.py:312: error: Cannot assign to a method  [method-assign]
examples/s3_access/test_s3_retry_strategy.py:327: error: Cannot assign to a method  [method-assign]
tests/unit/test_progress_reporting.py:336: error: Need type annotation for "missing" (hint: "missing: set[<type>] = ...")  [var-annotated]
examples/debugging/test_enhanced_view_model.py:88: error: Cannot assign to a method  [method-assign]
examples/debugging/test_enhanced_view_model.py:102: error: Incompatible types in assignment (expression has type "None", variable has type "ThreadLocalCacheDB")  [assignment]
examples/debugging/test_enhanced_view_model.py:103: error: Incompatible types in assignment (expression has type "None", variable has type "ReconcileManager")  [assignment]
examples/debugging/test_enhanced_view_model.py:187: error: Property "cdn_resolution" defined in "EnhancedIntegrityCheckViewModel" is read-only  [misc]
examples/debugging/test_enhanced_view_model.py:194: error: Property "aws_profile" defined in "EnhancedIntegrityCheckViewModel" is read-only  [misc]
examples/debugging/test_enhanced_view_model.py:256: error: "ThreadLocalCacheDB" has no attribute "reset_database"  [attr-defined]
examples/debugging/test_enhanced_view_model.py:275: error: Argument 2 to "assertIn" of "TestCase" has incompatible type "str | None"; expected "Iterable[Any] | Container[Any]"  [arg-type]
examples/debugging/test_enhanced_view_model.py:276: error: Argument 2 to "assertIn" of "TestCase" has incompatible type "str | None"; expected "Iterable[Any] | Container[Any]"  [arg-type]
examples/debugging/test_enhanced_view_model.py:279: error: Incompatible types in assignment (expression has type "None", variable has type "ThreadLocalCacheDB")  [assignment]
examples/debugging/test_enhanced_view_model.py:340: error: Item "None" of "datetime | None" has no attribute "date"  [union-attr]
examples/debugging/test_enhanced_view_model.py:449: error: Argument 1 to "_handle_enhanced_download_completed" of "EnhancedIntegrityCheckViewModel" has incompatible type "dict[datetime, object]"; expected "dict[datetime, Path | Exception]"  [arg-type]
examples/debugging/test_enhanced_view_model.py:530: error: Incompatible types in assignment (expression has type "None", variable has type "ThreadLocalCacheDB")  [assignment]
examples/debugging/test_enhanced_view_model.py:682: error: Incompatible types in assignment (expression has type "None", variable has type "AsyncTaskSignals")  [assignment]
examples/debugging/test_enhanced_view_model.py:685: error: Incompatible types in assignment (expression has type "None", variable has type "AsyncTaskSignals")  [assignment]
examples/debugging/test_enhanced_view_model.py:710: error: Cannot assign to a method  [method-assign]
examples/debugging/test_enhanced_view_model.py:796: error: Cannot assign to a method  [method-assign]
examples/debugging/satellite_integrity_group_demo.py:77: error: Argument "cache_db" to "EnhancedIntegrityCheckViewModel" has incompatible type "ThreadLocalCacheDB"; expected "CacheDB | None"  [arg-type]
examples/debugging/satellite_integrity_group_demo.py:78: error: Incompatible types in assignment (expression has type "str", variable has type "Path")  [assignment]
examples/debugging/satellite_integrity_group_demo.py:81: error: "EnhancedIntegrityCheckViewModel" has no attribute "_can_start_scan"  [attr-defined]
examples/debugging/satellite_integrity_group_demo.py:83: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_count"  [attr-defined]
examples/debugging/satellite_integrity_group_demo.py:84: error: "EnhancedIntegrityCheckViewModel" has no attribute "_is_scanning"  [attr-defined]
examples/debugging/satellite_integrity_group_demo.py:85: error: "EnhancedIntegrityCheckViewModel" has no attribute "_is_downloading"; maybe "is_item_downloading"?  [attr-defined]
examples/debugging/satellite_integrity_group_demo.py:166: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:237: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_items"; maybe "download_missing_items"?  [attr-defined]
examples/debugging/satellite_integrity_group_demo.py:238: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_count"  [attr-defined]
examples/debugging/satellite_integrity_group_demo.py:239: error: "EnhancedIntegrityCheckViewModel" has no attribute "_has_missing_items"  [attr-defined]
examples/debugging/satellite_integrity_group_demo.py:292: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:303: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:314: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:325: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:334: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:338: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:344: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:350: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/satellite_integrity_group_demo.py:356: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:89: error: Argument "cache_db" to "EnhancedIntegrityCheckViewModel" has incompatible type "ThreadLocalCacheDB"; expected "CacheDB | None"  [arg-type]
examples/debugging/improved_ui_demo.py:90: error: Incompatible types in assignment (expression has type "str", variable has type "Path")  [assignment]
examples/debugging/improved_ui_demo.py:93: error: "EnhancedIntegrityCheckViewModel" has no attribute "_can_start_scan"  [attr-defined]
examples/debugging/improved_ui_demo.py:95: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_count"  [attr-defined]
examples/debugging/improved_ui_demo.py:96: error: "EnhancedIntegrityCheckViewModel" has no attribute "_is_scanning"  [attr-defined]
examples/debugging/improved_ui_demo.py:97: error: "EnhancedIntegrityCheckViewModel" has no attribute "_is_downloading"; maybe "is_item_downloading"?  [attr-defined]
examples/debugging/improved_ui_demo.py:122: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:193: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_items"; maybe "download_missing_items"?  [attr-defined]
examples/debugging/improved_ui_demo.py:194: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_count"  [attr-defined]
examples/debugging/improved_ui_demo.py:195: error: "EnhancedIntegrityCheckViewModel" has no attribute "_has_missing_items"  [attr-defined]
examples/debugging/improved_ui_demo.py:345: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:364: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:384: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:390: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:399: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:406: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/improved_ui_demo.py:410: error: Item "None" of "QStatusBar | None" has no attribute "showMessage"  [union-attr]
examples/debugging/debug_integrity_scan.py:82: error: Invalid type comment or annotation  [valid-type]
examples/debugging/debug_integrity_scan.py:120: error: Invalid type comment or annotation  [valid-type]
examples/debugging/debug_integrity_scan.py:229: error: "close" of "CacheDB" does not return a value (it only ever returns None)  [func-returns-value]
examples/debugging/debug_integrity_scan.py:233: error: Invalid type comment or annotation  [valid-type]
examples/debugging/debug_integrity_scan.py:328: error: Invalid type comment or annotation  [valid-type]
goesvfi/integrity_check/signal_manager.py:158: error: "pyqtSignal" has no attribute "connect"  [attr-defined]
goesvfi/integrity_check/signal_manager.py:170: error: "pyqtSignal" has no attribute "connect"  [attr-defined]
goesvfi/integrity_check/signal_manager.py:198: error: "pyqtSignal" has no attribute "connect"  [attr-defined]
goesvfi/integrity_check/enhanced_gui_tab.py:2221: error: Name "hostname" is not defined  [name-defined]
goesvfi/integrity_check/enhanced_gui_tab.py:2225: error: Name "session_id" is not defined  [name-defined]
goesvfi/integrity_check/enhanced_gui_tab.py:2229: error: Name "start_timestamp" is not defined  [name-defined]
examples/utilities/test_auto_detect_features.py:118: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:120: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:122: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:124: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:185: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:187: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:189: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:191: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:309: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:311: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:313: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_edit"  [attr-defined]
examples/utilities/test_auto_detect_features.py:315: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_edit"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:126: error: "EnhancedIntegrityCheckTab" has no attribute "_handle_directory_changed"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:156: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_picker"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:159: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_picker"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:213: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_picker"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:214: error: "EnhancedIntegrityCheckTab" has no attribute "_handle_start_date_changed"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:221: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_picker"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:222: error: "EnhancedIntegrityCheckTab" has no attribute "_handle_end_date_changed"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:228: error: "SignalResult" object is not iterable  [misc]
examples/debugging/test_enhanced_integrity_check_tab.py:234: error: Cannot determine type of "start_date"  [has-type]
examples/debugging/test_enhanced_integrity_check_tab.py:235: error: Cannot determine type of "end_date"  [has-type]
examples/debugging/test_enhanced_integrity_check_tab.py:266: error: "EnhancedIntegrityCheckTab" has no attribute "download_all_button"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:269: error: "EnhancedIntegrityCheckTab" has no attribute "download_all_button"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:277: error: "EnhancedIntegrityCheckTab" has no attribute "cancel_download_button"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:280: error: "EnhancedIntegrityCheckTab" has no attribute "cancel_download_button"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:295: error: "EnhancedIntegrityCheckTab" has no attribute "missing_items_model"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:299: error: "EnhancedIntegrityCheckTab" has no attribute "missing_items_model"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:302: error: "EnhancedIntegrityCheckTab" has no attribute "download_all_button"  [attr-defined]
examples/debugging/test_enhanced_integrity_check_tab.py:310: error: "EnhancedIntegrityCheckTab" has no attribute "download_all_button"  [attr-defined]
examples/debugging/debug_integrity_tab_improved.py:64: error: Argument "cache_db" to "EnhancedIntegrityCheckViewModel" has incompatible type "ThreadLocalCacheDB"; expected "CacheDB | None"  [arg-type]
examples/debugging/debug_integrity_tab_improved.py:66: error: Incompatible types in assignment (expression has type "str", variable has type "Path")  [assignment]
examples/debugging/debug_integrity_tab_improved.py:79: error: Property "can_start_scan" defined in "IntegrityCheckViewModel" is read-only  [misc]
examples/debugging/debug_integrity_tab_improved.py:82: error: Property "total_expected" defined in "IntegrityCheckViewModel" is read-only  [misc]
examples/debugging/debug_integrity_tab_improved.py:85: error: Property "missing_count" defined in "IntegrityCheckViewModel" is read-only  [misc]
examples/debugging/debug_integrity_tab_improved.py:88: error: Property "is_scanning" defined in "IntegrityCheckViewModel" is read-only  [misc]
examples/debugging/debug_integrity_tab_improved.py:91: error: Property "is_downloading" defined in "IntegrityCheckViewModel" is read-only  [misc]
examples/debugging/debug_integrity_tab_improved.py:164: error: Incompatible types in assignment (expression has type "Satellite", variable has type "str")  [assignment]
examples/debugging/debug_integrity_tab_improved.py:177: error: "MissingTimestamp" has no attribute "progress"  [attr-defined]
examples/debugging/debug_integrity_tab_improved.py:184: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_items"; maybe "download_missing_items"?  [attr-defined]
examples/debugging/debug_integrity_tab_improved.py:185: error: "EnhancedIntegrityCheckViewModel" has no attribute "_missing_count"  [attr-defined]
examples/debugging/debug_integrity_tab_improved.py:187: error: "EnhancedIntegrityCheckViewModel" has no attribute "_has_missing_items"  [attr-defined]
tests/integration/test_integrity_tab_integration.py:148: error: Too many arguments for "SatelliteIntegrityTabGroup"  [call-arg]
tests/integration/test_integrity_tab_integration.py:207: error: "SignalResult" object is not iterable  [misc]
tests/integration/test_integrity_tab_integration.py:211: error: Cannot determine type of "start"  [has-type]
tests/integration/test_integrity_tab_integration.py:216: error: Cannot determine type of "end"  [has-type]
tests/integration/test_integrity_tab_integration.py:262: error: Argument 1 to "len" has incompatible type "SignalResult"; expected "Sized"  [arg-type]
tests/integration/test_integrity_tab_integration.py:272: error: "SignalResult" object is not iterable  [misc]
tests/integration/test_integrity_tab_integration.py:275: error: Cannot determine type of "success"  [has-type]
tests/integration/test_integrity_tab_integration.py:300: error: "SignalResult" object is not iterable  [misc]
tests/integration/test_integrity_tab_integration.py:304: error: Cannot determine type of "received_start"  [has-type]
tests/integration/test_integrity_tab_integration.py:306: error: Cannot determine type of "received_end"  [has-type]
tests/integration/test_integrity_check_tab.py:234: error: "EnhancedIntegrityCheckTab" has no attribute "start_date_edit"  [attr-defined]
tests/integration/test_integrity_check_tab.py:238: error: "EnhancedIntegrityCheckTab" has no attribute "end_date_edit"  [attr-defined]
tests/integration/test_integrity_tab_performance.py:85: error: Incompatible types in assignment (expression has type "float", variable has type "int")  [assignment]
tests/integration/test_integrity_tab_performance.py:101: error: Incompatible types in assignment (expression has type "float", variable has type "int")  [assignment]
tests/integration/test_integrity_tab_performance.py:357: error: Name "QTabWidget" is not defined  [name-defined]
tests/integration/test_integrity_tab_performance.py:441: error: Name "QTabWidget" is not defined  [name-defined]
tests/integration/test_integrity_tab_performance.py:474: error: No overload variant of "mouseMove" of "QTest" matches argument type "Any"  [call-overload]
tests/integration/test_integrity_tab_performance.py:474: note: Possible overload variants:
tests/integration/test_integrity_tab_performance.py:474: note:     def mouseMove(self: QTest, widget: QWidget | None, pos: QPoint = ..., delay: int = ...) -> None
tests/integration/test_integrity_tab_performance.py:474: note:     def mouseMove(self: QTest, window: QWindow | None, pos: QPoint = ..., delay: int = ...) -> None
tests/integration/test_integrity_tab_data_flow.py:205: error: "EnhancedIntegrityCheckTab" has no attribute "_handle_directory_changed"  [attr-defined]
tests/integration/test_integrity_tab_data_flow.py:227: error: "EnhancedIntegrityCheckTab" has no attribute "_handle_start_date_changed"  [attr-defined]
tests/integration/test_integrity_tab_data_flow.py:228: error: "EnhancedIntegrityCheckTab" has no attribute "_handle_end_date_changed"  [attr-defined]
tests/integration/test_integrity_tab_data_flow.py:261: error: "GroupingModel" has no attribute "_items"  [attr-defined]
tests/integration/test_integrity_tab_data_flow.py:295: error: Cannot assign to a method  [method-assign]
tests/integration/test_integrity_tab_data_flow.py:323: error: "EnhancedIntegrityCheckTab" has no attribute "_handle_directory_changed"  [attr-defined]
tests/integration/test_integrity_tab_data_flow.py:359: error: "GroupingModel" has no attribute "_items"  [attr-defined]
tests/integration/test_combined_tab.py:67: error: Unexpected keyword argument "path" for "CacheDB"  [call-arg]
tests/integration/test_combined_tab.py:70: error: Unexpected keyword argument "cache_db" for "CDNStore"  [call-arg]
tests/integration/test_combined_tab.py:71: error: Unexpected keyword argument "cache_db" for "S3Store"  [call-arg]
goesvfi/integrity_check/remote/s3_store.py:697: note: "S3Store" defined here
examples/debugging/debug_integrity_crash.py:99: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_crash.py:190: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_crash.py:191: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_crash.py:191: error: Incompatible types in assignment (expression has type "Callable[[Any, Any, Any], Any]", variable has type "Callable[[S3Store, datetime, SatellitePattern, str, int], Coroutine[Any, Any, bool]]")  [assignment]
examples/debugging/debug_integrity_crash.py:192: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_crash.py:192: error: Incompatible types in assignment (expression has type "Callable[[Any, Any, Any, Any], Any]", variable has type "Callable[[S3Store, datetime, SatellitePattern, Path, str, int], Coroutine[Any, Any, Path]]")  [assignment]
examples/debugging/debug_integrity_crash.py:264: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_crash.py:265: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_browse.py:101: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_browse.py:101: error: Incompatible types in assignment (expression has type "Callable[[Any, Any, Any, Any], Any]", variable has type "Callable[[QWidget | None, str | None, str | None, Option], str]")  [assignment]
examples/debugging/debug_integrity_browse.py:235: error: Cannot assign to a method  [method-assign]
examples/debugging/debug_integrity_browse.py:264: error: Cannot assign to a method  [method-assign]
tests/gui/test_main_window.py:148: error: Module has no attribute "QTableWidgetItem"; maybe "QTabWidget"?  [attr-defined]
tests/gui/test_main_window.py:150: error: Module has no attribute "QTableWidgetItem"; maybe "QTabWidget"?  [attr-defined]
tests/gui/test_main_window.py:153: error: Module has no attribute "QTableWidgetItem"; maybe "QTabWidget"?  [attr-defined]
Found 525 errors in 96 files (checked 279 source files)

[91mMypy found 525 type errors. ❌[0m
[1m[94m
[1mRunning Black Code Formatter...[0m[0m
--- /Users/justin/Documents/Github/GOES_VFI/examples/download/download_and_process_cmip.py	2025-05-11 04:35:11.282882+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/download/download_and_process_cmip.py	2025-06-12 03:36:14.282094+00:00
@@ -126,13 +126,15 @@
         logger.error(f"Expected 3 files for true color, got {len(nc_paths)}")
         return False

     try:
         # Open all three files and extract the data
-        with xr.open_dataset(nc_paths[0]) as ds1, xr.open_dataset(
-            nc_paths[1]
-        ) as ds2, xr.open_dataset(nc_paths[2]) as ds3:
+        with (
+            xr.open_dataset(nc_paths[0]) as ds1,
+            xr.open_dataset(nc_paths[1]) as ds2,
+            xr.open_dataset(nc_paths[2]) as ds3,
+        ):
             # Combine into RGB array
             rgb = np.stack(
                 [ds1["CMI"].values, ds2["CMI"].values, ds3["CMI"].values], axis=2
             )

would reformat /Users/justin/Documents/Github/GOES_VFI/examples/download/download_and_process_cmip.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/debugging/test_enhanced_view_model.py	2025-05-11 04:35:11.295643+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/debugging/test_enhanced_view_model.py	2025-06-12 03:36:14.366640+00:00
@@ -500,22 +500,28 @@

         # Patch the cleanup method to avoid async call
         with patch(
             "goesvfi.integrity_check.enhanced_view_model.EnhancedIntegrityCheckViewModel.cleanup",
             new=lambda self: (
-                self._disk_space_timer.terminate()
-                if hasattr(self, "_disk_space_timer")
-                and self._disk_space_timer is not None
-                and self._disk_space_timer.isRunning()
-                else None,
-                self._disk_space_timer.wait()
-                if hasattr(self, "_disk_space_timer")
-                and self._disk_space_timer is not None
-                else None,
-                self._cache_db.close()
-                if hasattr(self, "_cache_db") and self._cache_db is not None
-                else None,
+                (
+                    self._disk_space_timer.terminate()
+                    if hasattr(self, "_disk_space_timer")
+                    and self._disk_space_timer is not None
+                    and self._disk_space_timer.isRunning()
+                    else None
+                ),
+                (
+                    self._disk_space_timer.wait()
+                    if hasattr(self, "_disk_space_timer")
+                    and self._disk_space_timer is not None
+                    else None
+                ),
+                (
+                    self._cache_db.close()
+                    if hasattr(self, "_cache_db") and self._cache_db is not None
+                    else None
+                ),
             ),
         ):
             # Call the cleanup method
             vm.cleanup()

would reformat /Users/justin/Documents/Github/GOES_VFI/examples/debugging/test_enhanced_view_model.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/debugging/test_remote_stores.py	2025-05-11 04:35:11.296768+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/debugging/test_remote_stores.py	2025-06-12 03:36:14.380355+00:00
@@ -286,12 +286,13 @@
         with patch(
             "goesvfi.integrity_check.time_index.TimeIndex.to_cdn_url",
             return_value=mock_url,
         ):
             # Test file not found case
-            with patch("builtins.open", mock_open), self.assertRaises(
-                FileNotFoundError
+            with (
+                patch("builtins.open", mock_open),
+                self.assertRaises(FileNotFoundError),
             ):
                 await cdn_store.download(
                     self.test_timestamp, self.test_satellite, dest_path
                 )

@@ -392,14 +393,15 @@
         """Test that S3 client is created with unsigned access configuration."""
         # Setup
         mock_session_class.return_value = self.session_mock

         # We need to patch the Config and UNSIGNED imports directly in the S3Store module
-        with patch(
-            "goesvfi.integrity_check.remote.s3_store.Config"
-        ) as mock_config_class, patch(
-            "goesvfi.integrity_check.remote.s3_store.UNSIGNED", "UNSIGNED"
+        with (
+            patch(
+                "goesvfi.integrity_check.remote.s3_store.Config"
+            ) as mock_config_class,
+            patch("goesvfi.integrity_check.remote.s3_store.UNSIGNED", "UNSIGNED"),
         ):
             # Mock for Config
             mock_config = MagicMock()
             mock_config_class.return_value = mock_config

would reformat /Users/justin/Documents/Github/GOES_VFI/examples/debugging/test_remote_stores.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/imagery/netcdf_channel_extraction.py	2025-05-11 04:35:11.284497+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/imagery/netcdf_channel_extraction.py	2025-06-12 03:36:14.413182+00:00
@@ -400,13 +400,13 @@
             "max_val": float(max_val),
             "robust_min": float(robust_min),
             "robust_max": float(robust_max),
             "output_path": str(output_path),
             "robust_output_path": str(robust_output_path),
-            "comparison_path": str(comparison_path)
-            if "comparison_path" in locals()
-            else None,
+            "comparison_path": (
+                str(comparison_path) if "comparison_path" in locals() else None
+            ),
         }
     else:
         return {
             "channel": channel_num,
             "error": f"Variable '{var_name}' not found in dataset",
would reformat /Users/justin/Documents/Github/GOES_VFI/examples/imagery/netcdf_channel_extraction.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/imagery/test_netcdf_channel_extraction.py	2025-05-11 04:35:11.296143+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/imagery/test_netcdf_channel_extraction.py	2025-06-12 03:36:14.457382+00:00
@@ -400,13 +400,13 @@
             "max_val": float(max_val),
             "robust_min": float(robust_min),
             "robust_max": float(robust_max),
             "output_path": str(output_path),
             "robust_output_path": str(robust_output_path),
-            "comparison_path": str(comparison_path)
-            if "comparison_path" in locals()
-            else None,
+            "comparison_path": (
+                str(comparison_path) if "comparison_path" in locals() else None
+            ),
         }
     else:
         return {
             "channel": channel_num,
             "error": f"Variable '{var_name}' not found in dataset",
would reformat /Users/justin/Documents/Github/GOES_VFI/examples/imagery/test_netcdf_channel_extraction.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_real_s3_path.py	2025-05-11 04:35:11.296472+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_real_s3_path.py	2025-06-12 03:36:14.470086+00:00
@@ -116,13 +116,13 @@
                             )

                             # Success for this product type
                             product_result["success"] = True
                         else:
-                            attempt[
-                                "error"
-                            ] = "File reported as downloaded but doesn't exist"
+                            attempt["error"] = (
+                                "File reported as downloaded but doesn't exist"
+                            )
                             LOGGER.error(
                                 f"✗ Download failed: File doesn't exist at {dest_path}"
                             )
                     else:
                         attempt["error"] = "File doesn't exist in S3"
would reformat /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_real_s3_path.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_s3_retry_strategy_fixed.py	2025-05-11 04:35:11.297277+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_s3_retry_strategy_fixed.py	2025-06-12 03:36:14.501486+00:00
@@ -139,19 +139,22 @@

         # Create test destination path
         test_dest_path = Path(f"/tmp/test_{time.time()}.nc")

         # Mock Path.exists and Path.stat for success verification
-        with patch("pathlib.Path.exists", return_value=True), patch(
-            "pathlib.Path.stat", return_value=MagicMock(st_size=1024)
-        ), patch(
-            "goesvfi.integrity_check.remote.s3_store.update_download_stats",
-            new_callable=AsyncMock,
-        ) as mock_stats, patch(
-            "goesvfi.integrity_check.remote.s3_store.S3Store._get_s3_client",
-            new_callable=AsyncMock,
-        ) as mock_get_s3_client:
+        with (
+            patch("pathlib.Path.exists", return_value=True),
+            patch("pathlib.Path.stat", return_value=MagicMock(st_size=1024)),
+            patch(
+                "goesvfi.integrity_check.remote.s3_store.update_download_stats",
+                new_callable=AsyncMock,
+            ) as mock_stats,
+            patch(
+                "goesvfi.integrity_check.remote.s3_store.S3Store._get_s3_client",
+                new_callable=AsyncMock,
+            ) as mock_get_s3_client,
+        ):
             # Configure _get_s3_client to return our mock
             mock_get_s3_client.return_value = mock_s3_client

             # Create store and run download
             store = S3Store(timeout=5)
@@ -225,15 +228,18 @@
         self.assertLessEqual(max_active, 2)

     async def test_network_diagnostics_collection(self):
         """Test that network diagnostics are collected on repeated failures."""
         # Mock get_system_network_info
-        with patch(
-            "goesvfi.integrity_check.remote.s3_store.get_system_network_info"
-        ) as mock_info, patch(
-            "goesvfi.integrity_check.remote.s3_store.DOWNLOAD_STATS"
-        ) as mock_stats:
+        with (
+            patch(
+                "goesvfi.integrity_check.remote.s3_store.get_system_network_info"
+            ) as mock_info,
+            patch(
+                "goesvfi.integrity_check.remote.s3_store.DOWNLOAD_STATS"
+            ) as mock_stats,
+        ):
             # Setup mock stats
             mock_stats.get.return_value = 0  # Return 0 for any key for simplicity
             mock_stats.__getitem__.return_value = 4  # Return 4 for failed count

             # Call update_download_stats with a failure
would reformat /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_s3_retry_strategy_fixed.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_real_s3_store.py	2025-05-11 04:35:11.296657+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_real_s3_store.py	2025-06-12 03:36:14.508956+00:00
@@ -168,11 +168,13 @@
             exists_results[product_type] = exists

             if exists:
                 print(f"✅ Product {product_type} exists for {test_date.isoformat()}")
             else:
-                print(f"❌ Product {product_type} not found for {test_date.isoformat()}")
+                print(
+                    f"❌ Product {product_type} not found for {test_date.isoformat()}"
+                )

         # Print summary
         print(f"Product type availability summary:")
         for product_type, exists in exists_results.items():
             test_date = locals()[f"{product_type.lower()}_test_date"]
would reformat /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_real_s3_store.py
--- /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_s3_retry_strategy.py	2025-05-11 04:35:11.297219+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_s3_retry_strategy.py	2025-06-12 03:36:14.527279+00:00
@@ -202,12 +202,13 @@
         with patch(
             "goesvfi.integrity_check.remote.s3_store.update_download_stats",
             side_effect=mock_update_stats,
         ) as mock_update:
             # Mock file existence check and size
-            with patch("pathlib.Path.exists", return_value=True), patch(
-                "pathlib.Path.stat", return_value=MagicMock(st_size=1024)
+            with (
+                patch("pathlib.Path.exists", return_value=True),
+                patch("pathlib.Path.stat", return_value=MagicMock(st_size=1024)),
             ):
                 result = await self.store.download(
                     self.test_timestamp, self.test_satellite, tmp_dest_path
                 )

would reformat /Users/justin/Documents/Github/GOES_VFI/examples/s3_access/test_s3_retry_strategy.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/cdn_store.py	2025-05-11 04:35:11.289277+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/cdn_store.py	2025-06-12 03:36:14.779670+00:00
@@ -2,10 +2,11 @@
 CDN Store implementation for accessing GOES imagery via NOAA STAR CDN.

 This module provides a RemoteStore implementation that fetches GOES Band 13
 imagery from the NOAA STAR CDN using asynchronous HTTP requests.
 """
+
 import asyncio
 import logging
 from datetime import datetime
 from pathlib import Path
 from typing import Optional, Type, cast
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/cdn_store.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py	2025-05-11 05:18:52.291831+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py	2025-06-12 03:36:14.841239+00:00
@@ -3,10 +3,11 @@

 This module provides the ReconcileManager class that coordinates scanning
 directories, identifying missing files, and fetching them from remote sources
 using the hybrid CDN/S3 strategy.
 """
+
 import asyncio
 import logging
 import threading
 from datetime import datetime, timedelta
 from pathlib import Path
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/render/netcdf.py	2025-05-11 05:18:52.291950+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/render/netcdf.py	2025-06-12 03:36:14.850337+00:00
@@ -2,10 +2,11 @@
 NetCDF renderer for GOES satellite imagery.

 This module provides functions to render PNG images from GOES NetCDF files,
 specifically for Band 13 (Clean IR, 10.3 µm) data.
 """
+
 from pathlib import Path
 from typing import Any, Dict, Optional, Tuple, Union

 import numpy as np
 import xarray as xr
@@ -297,16 +298,20 @@
         with xr.open_dataset(netcdf_path) as ds:
             metadata = {
                 "satellite": ds.attrs.get("platform_ID", None),
                 "instrument": ds.attrs.get("instrument_type", None),
                 "timestamp": ds.attrs.get("date_created", None),
-                "band_id": ds[BAND_ID_VAR].values.item()
-                if BAND_ID_VAR in ds.variables
-                else None,
-                "band_wavelength": ds[BAND_WAVELENGTH_VAR].values.item()
-                if BAND_WAVELENGTH_VAR in ds.variables
-                else None,
+                "band_id": (
+                    ds[BAND_ID_VAR].values.item()
+                    if BAND_ID_VAR in ds.variables
+                    else None
+                ),
+                "band_wavelength": (
+                    ds[BAND_WAVELENGTH_VAR].values.item()
+                    if BAND_WAVELENGTH_VAR in ds.variables
+                    else None
+                ),
                 "resolution_x": ds[X_VAR].size if X_VAR in ds.variables else None,
                 "resolution_y": ds[Y_VAR].size if Y_VAR in ds.variables else None,
             }
             return metadata
     except Exception as e:
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/render/netcdf.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py	2025-05-11 05:18:52.291885+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py	2025-06-12 03:36:14.865700+00:00
@@ -1,9 +1,10 @@
 """
 ReconcileManager refactored module.
 Contains the refactored version of the ReconcileManager class with reduced complexity.
 """
+
 import asyncio
 import traceback
 from datetime import datetime
 from pathlib import Path
 from typing import Dict, List, Optional, Set, Tuple, Union
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/reconcile_manager_refactored.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_tabs/ffmpeg_settings_tab.py	2025-06-05 19:57:13.653291+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_tabs/ffmpeg_settings_tab.py	2025-06-12 03:36:14.884364+00:00
@@ -897,11 +897,11 @@
             return  # Unknown profile selected

         if not self._check_settings_match_profile(profile_dict):
             LOGGER.warning(
                 f"Settings drifted after applying profile {current_profile_name!r}. "
-                f"Setting to \'Custom\'."
+                f"Setting to 'Custom'."
             )
             self.ffmpeg_profile_combo.blockSignals(True)
             self.ffmpeg_profile_combo.setCurrentText("Custom")
             self.ffmpeg_profile_combo.blockSignals(False)
             # Ensure quality controls are enabled when switching to Custom this way
@@ -1178,18 +1178,18 @@
             "mi_mode": self.ffmpeg_mi_mode_combo.currentText(),
             "mc_mode": self.ffmpeg_mc_mode_combo.currentText(),
             "me_mode": self.ffmpeg_me_mode_combo.currentText(),
             "vsbmc": self.ffmpeg_vsbmc_checkbox.isChecked(),
             "scd": self.ffmpeg_scd_combo.currentText(),
-            "me_algo": me_algo
-            if me_algo != "(default)"
-            else "",  # Store empty string if default
+            "me_algo": (
+                me_algo if me_algo != "(default)" else ""
+            ),  # Store empty string if default
             "search_param": self.ffmpeg_search_param_spinbox.value(),
             "scd_threshold": self.ffmpeg_scd_threshold_spinbox.value(),
-            "mb_size": mb_size
-            if mb_size != "(default)"
-            else "",  # Store empty string if default
+            "mb_size": (
+                mb_size if mb_size != "(default)" else ""
+            ),  # Store empty string if default
             # Unsharp Group
             "apply_unsharp": self.ffmpeg_unsharp_group.isChecked(),
             "unsharp_lx": self.ffmpeg_unsharp_lx_spinbox.value(),
             "unsharp_ly": self.ffmpeg_unsharp_ly_spinbox.value(),
             "unsharp_la": self.ffmpeg_unsharp_la_spinbox.value(),
@@ -1230,11 +1230,11 @@
                 self.ffmpeg_profile_combo.itemText(i)
                 for i in range(self.ffmpeg_profile_combo.count())
             ]
             if profile_name not in items:
                 LOGGER.warning(
-                    f"Saved profile {profile_name!r} not found in combo box, defaulting to \'Custom\'."
+                    f"Saved profile {profile_name!r} not found in combo box, defaulting to 'Custom'."
                 )
                 profile_name = "Custom"
             self.ffmpeg_profile_combo.setCurrentText(profile_name)

             # If the loaded profile is "Custom", load individual settings
@@ -1396,11 +1396,11 @@
             # If a profile was explicitly loaded, trust it unless it drifted during load somehow
             profile_dict = FFMPEG_PROFILES.get(current_profile_name)
             if profile_dict and not self._check_settings_match_profile(profile_dict):
                 LOGGER.warning(
                     f"Settings drifted from loaded profile {current_profile_name!r} "
-                    f"during load. Setting to \'Custom\'."
+                    f"during load. Setting to 'Custom'."
                 )
                 self.ffmpeg_profile_combo.blockSignals(True)
                 self.ffmpeg_profile_combo.setCurrentText("Custom")
                 self.ffmpeg_profile_combo.blockSignals(False)
                 self._update_quality_controls_state(
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_tabs/ffmpeg_settings_tab.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/time_index_refactored.py	2025-05-11 06:11:12.335423+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/time_index_refactored.py	2025-06-12 03:36:15.050951+00:00
@@ -1,9 +1,10 @@
 """
 Module for handling date/time indexing of satellite files and directories.
 Includes functions for parsing timestamps from files and generating paths.
 """
+
 import inspect
 import re
 import sys
 import traceback
 from datetime import datetime, timedelta
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/time_index_refactored.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/shared_components.py	2025-05-11 04:35:10.574279+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/shared_components.py	2025-06-12 03:36:15.062605+00:00
@@ -133,13 +133,13 @@

         Args:
             parent: Optional parent widget
         """
         super().__init__(parent)
-        self.preview_cache: Dict[
-            str, Dict[str, Any]
-        ] = {}  # Key -> {'image': QPixmap, 'metadata': PreviewMetadata}
+        self.preview_cache: Dict[str, Dict[str, Any]] = (
+            {}
+        )  # Key -> {'image': QPixmap, 'metadata': PreviewMetadata}
         self.bookmarks: Set[str] = set()  # Set of bookmarked preview keys
         self.current_key: Optional[str] = None  # Currently displayed preview key

         self.initUI()

would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/shared_components.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/raw_encoder.py	2025-06-05 20:08:02.271140+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/raw_encoder.py	2025-06-12 03:36:15.101521+00:00
@@ -60,11 +60,13 @@
             LOGGER.error("FFmpeg (raw) error:")
             LOGGER.debug(f"STDOUT: {e.stdout}")
             LOGGER.debug(f"STDERR: {e.stderr}")
             raise  # Re-raise the exception
         except FileNotFoundError:
-            LOGGER.error("Error: ffmpeg command not found. Is ffmpeg installed and in your PATH?")
+            LOGGER.error(
+                "Error: ffmpeg command not found. Is ffmpeg installed and in your PATH?"
+            )
             raise

     # Directory is automatically cleaned up when exiting the with block
     LOGGER.info(f"Temporary PNGs cleaned up. Raw MP4 created at: {raw_path}")
     return raw_path  # Return the path
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/raw_encoder.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/interpolate.py	2025-05-11 04:35:11.290586+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/interpolate.py	2025-06-12 03:36:15.110368+00:00
@@ -159,20 +159,20 @@
     mid_options["timestep"] = 0.5
     img_mid = backend.interpolate_pair(img1, img2, mid_options)

     # Calculate the frame between img1 and img_mid (t=0.25)
     left_options = options.copy()
-    left_options[
-        "timestep"
-    ] = 0.5  # Always 0.5 for the pair, which is effectively 0.25 overall
+    left_options["timestep"] = (
+        0.5  # Always 0.5 for the pair, which is effectively 0.25 overall
+    )
     img_left = backend.interpolate_pair(img1, img_mid, left_options)

     # Calculate the frame between img_mid and img2 (t=0.75)
     right_options = options.copy()
-    right_options[
-        "timestep"
-    ] = 0.5  # Always 0.5 for the pair, which is effectively 0.75 overall
+    right_options["timestep"] = (
+        0.5  # Always 0.5 for the pair, which is effectively 0.75 overall
+    )
     img_right = backend.interpolate_pair(img_mid, img2, right_options)

     return [img_left, img_mid, img_right]


would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/interpolate.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/sanchez_processor.py	2025-06-05 16:27:03.664375+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/sanchez_processor.py	2025-06-12 03:36:15.152504+00:00
@@ -278,24 +278,24 @@
                 LOGGER.warning(
                     "Sanchez processing failed, using original image as fallback"
                 )
                 processed_image_data = image_data
                 # Record the error in the metadata
-                processed_image_data.metadata[
-                    "error"
-                ] = f"Sanchez output file not found: {fnf_error}"
+                processed_image_data.metadata["error"] = (
+                    f"Sanchez output file not found: {fnf_error}"
+                )
             except Exception as img_error:
                 LOGGER.exception("Error loading Sanchez output: %s", img_error)
                 # Use original image as fallback
                 LOGGER.warning(
                     "Sanchez processing failed, using original image as fallback"
                 )
                 processed_image_data = image_data
                 # Record the error in the metadata
-                processed_image_data.metadata[
-                    "error"
-                ] = f"Sanchez processing error: {img_error}"
+                processed_image_data.metadata["error"] = (
+                    f"Sanchez processing error: {img_error}"
+                )

             return processed_image_data

         finally:
             # 7. Cleanup temporary files (the directory is managed by the caller)
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/sanchez_processor.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/run_vfi.py	2025-05-11 04:35:11.291016+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/run_vfi.py	2025-06-12 03:36:15.201588+00:00
@@ -322,13 +322,13 @@
                 # Use FloatNDArray here
                 fallback_result: Tuple[List[FloatNDArray], str] = (
                     [img1_fallback],
                     f"error: {exc}",
                 )
-                results_list[
-                    task_index
-                ] = fallback_result  # Store result in correct order
+                results_list[task_index] = (
+                    fallback_result  # Store result in correct order
+                )
                 status = "error"

             processed_indices += 1
             end_time = time.time()
             duration = end_time - start_time  # Duration for this completed task
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/run_vfi.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/config.py	2025-06-10 03:01:05.336582+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/config.py	2025-06-12 03:36:15.213171+00:00
@@ -193,11 +193,14 @@
                         data[key] = value

             except tomllib.TOMLDecodeError as e:
                 # If TOML is invalid, just use defaults
                 # Using print to avoid circular import with log module
-                print(f"Warning: Invalid TOML in config file {CONFIG_FILE}: {e}", file=sys.stderr)
+                print(
+                    f"Warning: Invalid TOML in config file {CONFIG_FILE}: {e}",
+                    file=sys.stderr,
+                )
                 pass

     # ensure dirs exist for known path configurations
     # Use .get() with a default to avoid KeyError if config is missing
     output_dir_str = data.get("output_dir")
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/config.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/log.py	2025-06-10 03:28:19.800488+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/log.py	2025-06-12 03:36:15.227526+00:00
@@ -65,17 +65,17 @@
 def get_logger(name: str | None = None) -> logging.Logger:
     """Gets a logger instance. Configuration is handled by the root logger."""
     # Simply return the logger instance. Level and handlers are managed
     # by the root logger setup in set_global_log_level.
     logger = logging.getLogger(name)
-
+
     # Ensure root logger is configured on first use
     global _handler
     if _handler is None:
         _handler = _build_handler()
         set_global_log_level(_LEVEL)
-
+
     return logger


 def set_global_log_level(level: int) -> None:
     """
@@ -107,10 +107,10 @@
 def set_level(debug_mode: bool = False) -> None:
     """Sets the logging level. For backwards compatibility with tests."""
     global _LEVEL
     _LEVEL = logging.DEBUG if debug_mode else logging.INFO
     set_global_log_level(_LEVEL)
-
+
     # Update the global handler level if it exists
     global _handler
     if _handler:
         _handler.setLevel(_LEVEL)
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/log.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py	2025-05-11 05:56:21.912335+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py	2025-06-12 03:36:15.250751+00:00
@@ -5,10 +5,11 @@
 NetCDF data from AWS S3 buckets using asynchronous boto3 operations.

 Note: This implementation uses unsigned S3 access for public NOAA GOES buckets.
 No AWS credentials are required as these buckets are publicly accessible.
 """
+
 import asyncio
 import logging
 import random
 import socket
 import sys
@@ -749,13 +750,11 @@
             "start_timestamp": datetime.now().isoformat(),
         }

         # Get and log system/network info at startup
         try:
-            LOGGER.info(
-                "Collecting system and network diagnostics for S3Store"
-            )
+            LOGGER.info("Collecting system and network diagnostics for S3Store")
             get_system_network_info()
         except Exception as e:
             LOGGER.error(f"Error collecting system diagnostics: {e}")

         # Check connectivity to AWS S3 NOAA buckets
@@ -1170,13 +1169,13 @@
                         f"Hour={ts.strftime('%H')}, Minute={ts.strftime('%M')}\n"
                     )

                     # Create error object using helper function
                     error = create_error_from_code(
-                        error_code=error_code
-                        if error_code is not None
-                        else "UnknownError",
+                        error_code=(
+                            error_code if error_code is not None else "UnknownError"
+                        ),
                         error_message=error_message,
                         technical_details=technical_details,
                         satellite_name=satellite.name,
                         exception=e,
                         error_msg=error_msg,
@@ -1363,13 +1362,15 @@
                     # Update download statistics
                     update_download_stats(
                         success=False,
                         download_time=download_time,
                         error_type=error_type,
-                        error_message=f"{error_type}: {str(download_error)[:100]}..."
-                        if len(str(download_error)) > 100
-                        else str(download_error),
+                        error_message=(
+                            f"{error_type}: {str(download_error)[:100]}..."
+                            if len(str(download_error)) > 100
+                            else str(download_error)
+                        ),
                     )

                     # Log and raise the error
                     LOGGER.error(f"Download error: {error.get_user_message()}")
                     LOGGER.error(
@@ -1693,13 +1694,15 @@
                         # Update download statistics
                         update_download_stats(
                             success=False,
                             download_time=download_time,
                             error_type=error_type,
-                            error_message=f"Wildcard {error_type}: {str(download_error)[:100]}..."
-                            if len(str(download_error)) > 100
-                            else str(download_error),
+                            error_message=(
+                                f"Wildcard {error_type}: {str(download_error)[:100]}..."
+                                if len(str(download_error)) > 100
+                                else str(download_error)
+                            ),
                         )

                         # Log and raise the error
                         LOGGER.error(
                             f"Wildcard download error: {wildcard_error.get_user_message()}"
@@ -1748,13 +1751,15 @@
                         satellite_name=satellite.name,
                         exception=e,
                         error_msg=(
                             f"No files found for {satellite.name} at {ts.isoformat()}"
                             if error_code == "404"
-                            else f"AWS S3 service is currently unavailable"
-                            if error_code in ("ServiceUnavailable", "InternalError")
-                            else f"Error listing {satellite.name} data files"
+                            else (
+                                f"AWS S3 service is currently unavailable"
+                                if error_code in ("ServiceUnavailable", "InternalError")
+                                else f"Error listing {satellite.name} data files"
+                            )
                         ),
                     )

                     # Log and raise the error
                     LOGGER.error(f"List objects error: {list_error.get_user_message()}")
@@ -1823,13 +1828,15 @@
                 satellite_name=satellite.name,
                 exception=e,
                 error_msg=(
                     f"File not found for {satellite.name} at {ts.isoformat()}"
                     if error_code in ("NoSuchBucket", "NoSuchKey", "404")
-                    else f"Timeout accessing {satellite.name} data"
-                    if "timeout" in str(e).lower()
-                    else None  # Use default message
+                    else (
+                        f"Timeout accessing {satellite.name} data"
+                        if "timeout" in str(e).lower()
+                        else None
+                    )  # Use default message
                 ),
             )

             # Log and raise the error
             LOGGER.error(f"S3 client error: {client_error.get_user_message()}")
@@ -1860,15 +1867,19 @@

             # Determine error type based on error string
             error_code = (
                 "timeout"
                 if "timeout" in str(e).lower()
-                else "access"
-                if "permission" in str(e).lower() or "access" in str(e).lower()
-                else "disk"
-                if "disk" in str(e).lower() or "space" in str(e).lower()
-                else "unknown"
+                else (
+                    "access"
+                    if "permission" in str(e).lower() or "access" in str(e).lower()
+                    else (
+                        "disk"
+                        if "disk" in str(e).lower() or "space" in str(e).lower()
+                        else "unknown"
+                    )
+                )
             )

             # Create error object with the appropriate message
             final_error: RemoteErrorType = RemoteStoreError(
                 message=f"An unknown error occurred while downloading the {satellite.name} data",
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py	2025-05-11 06:11:25.875324+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py	2025-06-12 03:36:15.294676+00:00
@@ -558,12 +558,14 @@
             success_count = sum(
                 1 for item in self._missing_timestamps if item.is_downloaded
             )

             self.status = ScanStatus.COMPLETED
-            self.status_message = (f"Downloads complete: "
-                                f"{success_count}/{len(self._missing_timestamps)} successful")
+            self.status_message = (
+                f"Downloads complete: "
+                f"{success_count}/{len(self._missing_timestamps)} successful"
+            )

             # Clear cancel flag
             self._cancel_requested = False


would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/view_model.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_goes_ui.py	2025-06-10 03:56:35.227596+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_goes_ui.py	2025-06-12 03:36:15.404762+00:00
@@ -10,12 +10,14 @@
 import sys
 from pathlib import Path
 from unittest.mock import MagicMock, patch

 # Patch boto3 and botocore before importing the module
-with patch("boto3.client"), patch("botocore.UNSIGNED", create=True), patch(
-    "requests.get"
+with (
+    patch("boto3.client"),
+    patch("botocore.UNSIGNED", create=True),
+    patch("requests.get"),
 ):
     from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget

     from goesvfi.integrity_check.goes_imagery_tab import GOESImageryTab

would reformat /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_goes_ui.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/gui/tabs/test_improved_enhanced_tab.py	2025-06-10 04:09:35.866924+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/gui/tabs/test_improved_enhanced_tab.py	2025-06-12 03:36:15.431664+00:00
@@ -21,11 +21,11 @@
     @pytest.fixture
     def view_model(self, tmpdir):
         """Create a view model for testing."""
         # Create model without parameters (it will use defaults)
         model = EnhancedIntegrityCheckViewModel()
-
+
         # Set the base directory after initialization - ensure it's a Path object
         model._base_directory = Path(str(tmpdir))

         # Set test data
         model.start_date = datetime.now() - timedelta(days=1)
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/gui/tabs/test_improved_enhanced_tab.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_goes_imagery_tab.py	2025-05-11 04:35:11.293907+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_goes_imagery_tab.py	2025-06-12 03:36:15.463626+00:00
@@ -133,14 +133,15 @@

         # Create a test Path
         test_path = Path(self.panel.image_label.objectName() or "dummy_path")

         # Make a mock with special behavior for exists method
-        with patch.object(Path, "exists", return_value=True), patch(
-            "os.path.getsize", return_value=1024
-        ), patch("PyQt6.QtGui.QPixmap"), patch.object(
-            self.panel.image_label, "setPixmap"
+        with (
+            patch.object(Path, "exists", return_value=True),
+            patch("os.path.getsize", return_value=1024),
+            patch("PyQt6.QtGui.QPixmap"),
+            patch.object(self.panel.image_label, "setPixmap"),
         ):
             # Test showing image
             self.panel.showImage(test_path)

             # Verify status message contains expected text
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_goes_imagery_tab.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_integration.py	2025-06-10 03:54:46.250740+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_integration.py	2025-06-12 03:36:15.526935+00:00
@@ -13,11 +13,13 @@
 from unittest.mock import AsyncMock, MagicMock, patch

 from PyQt6.QtCore import QCoreApplication, QDate, QDateTime, Qt, QTime
 from PyQt6.QtWidgets import QApplication, QMainWindow

-from goesvfi.integrity_check.satellite_integrity_tab_group import SatelliteIntegrityTabGroup
+from goesvfi.integrity_check.satellite_integrity_tab_group import (
+    SatelliteIntegrityTabGroup,
+)
 from goesvfi.integrity_check.enhanced_gui_tab import EnhancedIntegrityCheckTab

 # Import the tab components we want to test
 from goesvfi.integrity_check.enhanced_view_model import (
     EnhancedIntegrityCheckViewModel,
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_integration.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_tabs/main_tab.py	2025-06-10 03:20:45.549015+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_tabs/main_tab.py	2025-06-12 03:36:15.522508+00:00
@@ -58,11 +58,13 @@
         LOGGER.info(f"SuperButton created with text: {text}")

     def set_click_callback(self, callback: Optional[Callable[[], None]]) -> None:
         """Set a direct callback function for click events."""
         self.click_callback = callback
-        LOGGER.debug(f"SuperButton callback set: {callback.__name__ if callback else None!r}")
+        LOGGER.debug(
+            f"SuperButton callback set: {callback.__name__ if callback else None!r}"
+        )

     def mousePressEvent(self, event: Optional[QMouseEvent]) -> None:
         """Explicitly override mouse press event."""
         if event is None:
             return
@@ -81,11 +83,13 @@

         # If it's a left-click release, call our callback
         if event.button() == Qt.MouseButton.LeftButton:
             LOGGER.debug("SuperButton: LEFT CLICK DETECTED")
             if self.click_callback:
-                LOGGER.info(f"SuperButton: Calling callback {self.click_callback.__name__}")
+                LOGGER.info(
+                    f"SuperButton: Calling callback {self.click_callback.__name__}"
+                )
                 QTimer.singleShot(
                     10, self.click_callback
                 )  # Small delay to ensure UI updates
             else:
                 LOGGER.warning("SuperButton: No callback registered")
@@ -211,13 +215,13 @@
         self.vfi_worker: VfiWorker | None = None
         self.is_processing = False
         self.current_encoder = "RIFE"  # Default encoder
         self.current_model_key: str | None = "rife-v4.6"  # Default RIFE model key
         self.available_models: Dict[str, RIFEModelDetails] = {}  # Use Dict
-        self.image_viewer_dialog: Optional[
-            ImageViewerDialog
-        ] = None  # Add member to hold viewer reference
+        self.image_viewer_dialog: Optional[ImageViewerDialog] = (
+            None  # Add member to hold viewer reference
+        )
         # -----------------------

         self._setup_ui()
         self._connect_signals()
         self._post_init_setup()  # Perform initial state updates
@@ -973,12 +977,14 @@
                     "\n\nReason: No processed image data is attached to this preview."
                 )
             elif label.processed_image is None:
                 msg += "\n\nReason: The processed image data is null."
             elif not isinstance(label.processed_image, QImage):
-                msg += (f"\n\nReason: The image data is not a QImage "
-                        f"(found {type(label.processed_image)}).")
+                msg += (
+                    f"\n\nReason: The image data is not a QImage "
+                    f"(found {type(label.processed_image)})."
+                )
             elif label.processed_image.isNull():
                 msg += "\n\nReason: The image is empty or invalid."

             # Suggest a solution
             msg += "\n\nTry updating previews or verifying the input directory."
@@ -1146,12 +1152,14 @@
         LOGGER.debug(
             f"Current input directory: {current_in_dir}, Output file: {self.out_file_path}"
         )

         if not current_in_dir or not self.out_file_path:
-            error_msg = (f"Missing paths for processing: in_dir={current_in_dir}, "
-                         f"out_file={self.out_file_path}")
+            error_msg = (
+                f"Missing paths for processing: in_dir={current_in_dir}, "
+                f"out_file={self.out_file_path}"
+            )
             LOGGER.warning(error_msg)
             QMessageBox.warning(
                 self, "Missing Paths", "Please select both input and output paths."
             )
             return
@@ -1792,11 +1800,13 @@
                 f"Using output file: {fresh_output_path.name}", 5000
             )

         # If somehow we still don't have a valid output path (very unlikely at this point)
         if not self.out_file_path:
-            LOGGER.debug("No output file selected - auto-generating default output path")
+            LOGGER.debug(
+                "No output file selected - auto-generating default output path"
+            )

             # Get input directory from main window
             main_window = self.main_window_ref
             current_in_dir = getattr(main_window, "in_dir", None)

@@ -1892,11 +1902,13 @@
             # Attempt direct emit of signal first
             self.processing_started.emit(args)

             # Fallback to direct method call if needed
             if hasattr(main_window, "_handle_processing"):
-                LOGGER.info("Calling main_window._handle_processing directly as fallback")
+                LOGGER.info(
+                    "Calling main_window._handle_processing directly as fallback"
+                )
                 main_window._handle_processing(args)

             LOGGER.info("Processing started successfully")

         except Exception as e:
@@ -2275,13 +2287,13 @@
                 LOGGER.info(f"Analyzing RIFE executable for model {key!r}: {rife_exe}")
                 try:
                     # Cast the result to the TypedDict
                     details_raw = analyze_rife_executable(rife_exe)
                     details = cast(RIFEModelDetails, details_raw)
-                    details[
-                        "_mtime"
-                    ] = exe_mtime  # Store modification time for cache validation
+                    details["_mtime"] = (
+                        exe_mtime  # Store modification time for cache validation
+                    )
                     cached_analysis[exe_path_str] = details  # Update cache entry
                     needs_cache_update = True
                     LOGGER.debug(
                         f"Analysis complete for {key}. Capabilities: {details.get('capabilities')}"
                     )
@@ -2428,34 +2440,44 @@
             "fps": self.fps_spinbox.value(),
             "multiplier": self.multiplier_spinbox.value(),
             "max_workers": self.max_workers_spinbox.value(),
             "encoder": encoder,
             "rife_model_key": rife_model_key if encoder == "RIFE" else None,
-            "rife_model_path": (config.get_project_root() / "models" / rife_model_key)
-            if encoder == "RIFE" and rife_model_key
-            else None,
-            "rife_exe_path": config.find_rife_executable(rife_model_key)
-            if encoder == "RIFE" and rife_model_key
-            else None,
-            "rife_tta_spatial": self.rife_tta_spatial_checkbox.isChecked()
-            if encoder == "RIFE"
-            else False,
-            "rife_tta_temporal": self.rife_tta_temporal_checkbox.isChecked()
-            if encoder == "RIFE"
-            else False,
-            "rife_uhd": self.rife_uhd_checkbox.isChecked()
-            if encoder == "RIFE"
-            else False,
-            "rife_tiling_enabled": self.rife_tile_checkbox.isChecked()
-            if encoder == "RIFE"
-            else False,
-            "rife_tile_size": self.rife_tile_size_spinbox.value()
-            if encoder == "RIFE"
-            else None,
-            "rife_thread_spec": self.rife_thread_spec_edit.text()
-            if encoder == "RIFE" and self.rife_thread_spec_edit.text()
-            else None,
+            "rife_model_path": (
+                (config.get_project_root() / "models" / rife_model_key)
+                if encoder == "RIFE" and rife_model_key
+                else None
+            ),
+            "rife_exe_path": (
+                config.find_rife_executable(rife_model_key)
+                if encoder == "RIFE" and rife_model_key
+                else None
+            ),
+            "rife_tta_spatial": (
+                self.rife_tta_spatial_checkbox.isChecked()
+                if encoder == "RIFE"
+                else False
+            ),
+            "rife_tta_temporal": (
+                self.rife_tta_temporal_checkbox.isChecked()
+                if encoder == "RIFE"
+                else False
+            ),
+            "rife_uhd": (
+                self.rife_uhd_checkbox.isChecked() if encoder == "RIFE" else False
+            ),
+            "rife_tiling_enabled": (
+                self.rife_tile_checkbox.isChecked() if encoder == "RIFE" else False
+            ),
+            "rife_tile_size": (
+                self.rife_tile_size_spinbox.value() if encoder == "RIFE" else None
+            ),
+            "rife_thread_spec": (
+                self.rife_thread_spec_edit.text()
+                if encoder == "RIFE" and self.rife_thread_spec_edit.text()
+                else None
+            ),
             "sanchez_enabled": self.sanchez_false_colour_checkbox.isChecked(),
             # This might control post-processing or preview, not necessarily encoding
             "sanchez_resolution_km": float(self.sanchez_res_combo.currentText()),
             "crop_rect": current_crop_rect_mw,
         }
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_tabs/main_tab.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py	2025-05-11 04:35:11.291224+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py	2025-06-12 03:36:15.527433+00:00
@@ -711,13 +711,13 @@
         self.setMouseTracking(True)  # Need mouse move events

         self.selecting = False
         self.selection_start_point: Optional[QPoint] = None  # In pixmap coordinates
         self.selection_end_point: Optional[QPoint] = None  # In pixmap coordinates
-        self.selected_rect: Optional[
-            QRect
-        ] = None  # Final selection in *pixmap* coordinates
+        self.selected_rect: Optional[QRect] = (
+            None  # Final selection in *pixmap* coordinates
+        )

         # Store pixmap offset for coordinate mapping
         self._pixmap_offset_x = 0.0
         self._pixmap_offset_y = 0.0

would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/utils/gui_helpers.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py	2025-06-10 02:57:17.541052+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py	2025-06-12 03:36:15.567032+00:00
@@ -816,13 +816,13 @@

         # 4. Validate dimensions - REMOVED (Validation will happen in run_vfi after first image)
         # if target_width is not None and target_height is not None:
         #     if image_data.image.size != (target_width, target_height):
         #          raise ValueError(
-#              f"Processed {original_path.name} dimensions {image_data.image.size} != "
-#              f"target {target_width}x{target_height}"
-#          )
+        #              f"Processed {original_path.name} dimensions {image_data.image.size} != "
+        #              f"target {target_width}x{target_height}"
+        #          )

         # 5. Save processed image to unique file in output_dir
         processed_output_path = (
             output_dir / f"processed_{original_path.stem}_{time.monotonic_ns()}.png"
         )
@@ -952,20 +952,18 @@
         crop_for_pil = None  # Explicitly None if no tuple provided

     return updated_false_colour, paths, crop_for_pil


-def _setup_processors_and_temp_dirs() -> (
-    Tuple[
-        pathlib.Path,
-        pathlib.Path,
-        ImageLoader,
-        SanchezProcessor,
-        ImageCropper,
-        ImageSaver,
-    ]
-):
+def _setup_processors_and_temp_dirs() -> Tuple[
+    pathlib.Path,
+    pathlib.Path,
+    ImageLoader,
+    SanchezProcessor,
+    ImageCropper,
+    ImageSaver,
+]:
     """
     Set up temporary directories and instantiate image processors.

     Returns:
         Tuple containing:
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/pipeline/run_vfi.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_performance.py	2025-06-10 03:55:32.045929+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_performance.py	2025-06-12 03:36:15.577116+00:00
@@ -27,19 +27,20 @@
 except ImportError:
     # Create a mock psutil if not available
     class MockProcess:
         def __init__(self, pid):
             pass
-
+
         def memory_info(self):
             class MemInfo:
                 rss = 100 * 1024 * 1024  # 100 MB
+
             return MemInfo()
-
+
     class MockPsutil:
         Process = MockProcess
-
+
     psutil = MockPsutil()

 from PyQt6.QtCore import Qt, QTimer
 from PyQt6.QtTest import QTest
 from PyQt6.QtWidgets import QApplication, QMainWindow
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_performance.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_main_window.py	2025-06-10 04:33:26.885934+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_main_window.py	2025-06-12 03:36:15.577853+00:00
@@ -7,11 +7,18 @@
 from unittest.mock import MagicMock, call, patch

 import pytest
 from PyQt6.QtCore import QByteArray, QRect, Qt, QThread, pyqtSignal
 from PyQt6.QtGui import QImage, QPixmap
-from PyQt6.QtWidgets import QApplication, QDialog, QFileDialog, QMessageBox, QWidget, QPushButton
+from PyQt6.QtWidgets import (
+    QApplication,
+    QDialog,
+    QFileDialog,
+    QMessageBox,
+    QWidget,
+    QPushButton,
+)

 import goesvfi.gui

 # Import the class to be tested and related utilities
 from goesvfi.gui import ClickableLabel, CropDialog, MainWindow, VfiWorker
@@ -240,21 +247,25 @@

     # Buttons - Rely on GUI logic calling state updates in init
     qtbot.wait(100)  # Allow UI to settle after init
     assert not window.main_tab.start_button.isEnabled()  # Should be disabled (no paths)
     assert not window.open_vlc_button.isEnabled()  # Should be disabled (no output path)
-    assert not window.main_tab.crop_button.isEnabled()  # Should be disabled (no input path)
-    assert not window.main_tab.clear_crop_button.isEnabled()  # Disabled initially (no crop)
+    assert (
+        not window.main_tab.crop_button.isEnabled()
+    )  # Should be disabled (no input path)
+    assert (
+        not window.main_tab.clear_crop_button.isEnabled()
+    )  # Disabled initially (no crop)
     # ... rest of test ...


 def test_select_input_path(qtbot, window, mock_dialogs, mocker):
     """Test selecting an input path."""
     # Remove path mocking
     # Find the browse button that is next to in_dir_edit
     in_dir_button = window.main_tab.findChild(QPushButton, "browse_button")
-
+
     qtbot.mouseClick(in_dir_button, Qt.MouseButton.LeftButton)
     mock_dialogs["getExistingDirectory"].assert_called_once()
     assert window.main_tab.in_dir_edit.text() == "/fake/input"
     # qtbot.wait(100) # Allow signals

@@ -282,11 +293,13 @@
     window.main_tab.out_file_edit.setText("/fake/some.other")
     window.main_tab._update_start_button_state()
     assert not window.main_tab.start_button.isEnabled()

     # Find the browse button for output file
-    out_file_button = window.main_tab.findChildren(QPushButton, "browse_button")[1]  # Second browse button
+    out_file_button = window.main_tab.findChildren(QPushButton, "browse_button")[
+        1
+    ]  # Second browse button
     qtbot.mouseClick(out_file_button, Qt.MouseButton.LeftButton)
     mock_dialogs["getSaveFileName"].assert_called_once()
     assert window.main_tab.out_file_edit.text() == "/fake/output.mp4"

     window.main_tab._update_start_button_state()
@@ -412,11 +425,13 @@
     # The FFmpeg settings tab widget itself is always enabled, but its contents
     # are controlled by _update_ffmpeg_controls_state. Check a widget inside.
     assert window.ffmpeg_profile_combo.isEnabled()  # Check a widget inside the tab

     # Switch back to RIFE
-    with qtbot.waitSignals([window.main_tab.encoder_combo.currentTextChanged], timeout=1000):
+    with qtbot.waitSignals(
+        [window.main_tab.encoder_combo.currentTextChanged], timeout=1000
+    ):
         window.main_tab.encoder_combo.setCurrentText("RIFE")
     # qtbot.wait(50) # REMOVED
     assert window.main_tab.rife_options_groupbox.isEnabled()
     assert window.main_tab.model_label.isEnabled()
     assert window.main_tab.model_combo.isEnabled()
@@ -426,11 +441,13 @@
         not window.ffmpeg_profile_combo.isEnabled()
     )  # FFmpeg tab disabled when RIFE selected

     # 2. RIFE Tiling affects Tile Size SpinBox (only when RIFE is selected)
     if window.main_tab.encoder_combo.currentText() != "RIFE":  # Ensure RIFE is selected
-        with qtbot.waitSignals([window.main_tab.encoder_combo.currentTextChanged], timeout=1000):
+        with qtbot.waitSignals(
+            [window.main_tab.encoder_combo.currentTextChanged], timeout=1000
+        ):
             window.main_tab.encoder_combo.setCurrentText("RIFE")
     # qtbot.wait(50) # REMOVED

     # Set tiling enabled (if not default) and wait for signal
     if not window.main_tab.rife_tile_enable_checkbox.isChecked():
@@ -459,11 +476,13 @@
     # qtbot.wait(50) # REMOVED
     assert window.main_tab.rife_tile_size_spinbox.isEnabled()

     # 3. Sanchez Checkbox affects Resolution SpinBox (only when RIFE is selected)
     if window.main_tab.encoder_combo.currentText() != "RIFE":  # Ensure RIFE is selected
-        with qtbot.waitSignals([window.main_tab.encoder_combo.currentTextChanged], timeout=1000):
+        with qtbot.waitSignals(
+            [window.main_tab.encoder_combo.currentTextChanged], timeout=1000
+        ):
             window.main_tab.encoder_combo.setCurrentText("RIFE")
     # qtbot.wait(50) # REMOVED

     # Set false colour disabled (if not default) and wait
     if window.main_tab.sanchez_false_colour_checkbox.isChecked():
@@ -498,19 +517,23 @@
     )
     assert not window.main_tab.sanchez_res_km_spinbox.isEnabled()

     # 4. FFmpeg Settings enable/disable based on encoder
     # Switch to FFmpeg
-    with qtbot.waitSignals([window.main_tab.encoder_combo.currentTextChanged], timeout=1000):
+    with qtbot.waitSignals(
+        [window.main_tab.encoder_combo.currentTextChanged], timeout=1000
+    ):
         window.main_tab.encoder_combo.setCurrentText("FFmpeg")
     # qtbot.wait(50) # REMOVED

     # Check a control within the tab
     assert window.ffmpeg_profile_combo.isEnabled()

     # Switch back to RIFE
-    with qtbot.waitSignals([window.main_tab.encoder_combo.currentTextChanged], timeout=1000):
+    with qtbot.waitSignals(
+        [window.main_tab.encoder_combo.currentTextChanged], timeout=1000
+    ):
         window.main_tab.encoder_combo.setCurrentText("RIFE")
     # qtbot.wait(50) # REMOVED

     # Check a control *inside* the tab
     assert not window.ffmpeg_profile_combo.isEnabled()
@@ -526,11 +549,13 @@
     # Ensure RIFE model is selected (default from fixture)
     assert window.main_tab.encoder_combo.currentText() == "RIFE"
     assert window.main_tab.model_combo.currentData() is not None
     assert window.main_tab.start_button.isEnabled()  # Updated name

-    qtbot.mouseClick(window.main_tab.start_button, Qt.MouseButton.LeftButton)  # Updated name
+    qtbot.mouseClick(
+        window.main_tab.start_button, Qt.MouseButton.LeftButton
+    )  # Updated name
     # qtbot.wait(100) # Wait for UI state change # REMOVED

     # Assert MainWindow created a worker instance
     assert window.worker is not None
     # Check for MagicMock due to mock_worker fixture
@@ -661,11 +686,13 @@
     window.main_tab.in_dir_edit.setText(str(valid_input_dir))  # Updated name
     # Need to set a dummy pixmap on the preview label for the crop dialog to open
     window.main_tab.first_frame_label.setPixmap(QPixmap(10, 10))  # Set a dummy pixmap
     assert window.main_tab.crop_button.isEnabled()  # Updated name

-    qtbot.mouseClick(window.main_tab.crop_button, Qt.MouseButton.LeftButton)  # Updated name
+    qtbot.mouseClick(
+        window.main_tab.crop_button, Qt.MouseButton.LeftButton
+    )  # Updated name

     MockCropDialog.assert_called_once()
     call_args, call_kwargs = MockCropDialog.call_args
     assert isinstance(call_args[0], QPixmap)  # Check first arg is pixmap
     assert call_kwargs.get("init") is None  # Crop rect is initially None
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_main_window.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py	2025-05-11 05:18:52.291682+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py	2025-06-12 03:36:15.575475+00:00
@@ -638,13 +638,13 @@

         self.settings = QSettings("GOES-VFI", "GUI")

         self.worker: Optional[VfiWorker] = None
         self.is_processing = False
-        self.current_crop_rect: tuple[
-            int, int, int, int
-        ] | None = None  # Store crop rect as (x, y, w, h)
+        self.current_crop_rect: tuple[int, int, int, int] | None = (
+            None  # Store crop rect as (x, y, w, h)
+        )

         # Instantiate capability manager
         self.rife_capability_manager = RifeCapabilityManager()

         # Create the View Models for sorter tabs
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui_backup.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_ffmpeg_builder_critical.py	2025-06-12 01:47:47.756598+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_ffmpeg_builder_critical.py	2025-06-12 03:36:15.598433+00:00
@@ -1,100 +1,107 @@
 """Critical tests for FFmpeg command building functionality."""

 import sys
 from pathlib import Path
+
 sys.path.insert(0, str(Path(__file__).parent.parent.parent))

 import pytest
 from goesvfi.pipeline.ffmpeg_builder import FFmpegCommandBuilder


 class TestFFmpegCommandBuilder:
     """Test FFmpeg command building logic."""
-
+
     def test_basic_ffmpeg_command(self):
         """Test basic FFmpeg command construction."""
         builder = FFmpegCommandBuilder()
-
+
         # Test basic video encoding command
-        cmd = (builder
-               .set_input(Path("/tmp/frames/frame_%04d.png"))
-               .set_output(Path("/tmp/output.mp4"))
-               .set_encoder("Software x264")
-               .set_crf(23)
-               .build())
-
+        cmd = (
+            builder.set_input(Path("/tmp/frames/frame_%04d.png"))
+            .set_output(Path("/tmp/output.mp4"))
+            .set_encoder("Software x264")
+            .set_crf(23)
+            .build()
+        )
+
         assert "ffmpeg" in cmd
         assert "-i" in cmd
         assert "/tmp/frames/frame_%04d.png" in cmd
         assert str(Path("/tmp/output.mp4")) in cmd
-
+
     def test_ffmpeg_with_two_pass(self):
         """Test FFmpeg command with two-pass encoding."""
         builder = FFmpegCommandBuilder()
-
+
         # Test first pass
-        cmd = (builder
-               .set_input(Path("/tmp/input.mp4"))
-               .set_output(Path("/tmp/output.mp4"))
-               .set_encoder("Software x265 (2-Pass)")
-               .set_bitrate(5000)
-               .set_two_pass(True, "passlog", 1)
-               .build())
-
+        cmd = (
+            builder.set_input(Path("/tmp/input.mp4"))
+            .set_output(Path("/tmp/output.mp4"))
+            .set_encoder("Software x265 (2-Pass)")
+            .set_bitrate(5000)
+            .set_two_pass(True, "passlog", 1)
+            .build()
+        )
+
         assert "-c:v" in cmd
         assert "libx265" in cmd
         assert "-x265-params" in cmd
         assert "pass=1" in cmd
         assert "-passlogfile" in cmd
         assert "passlog" in cmd
-
+
     def test_ffmpeg_copy_stream(self):
         """Test FFmpeg command for stream copy."""
         builder = FFmpegCommandBuilder()
-
-        cmd = (builder
-               .set_input(Path("/tmp/input.mp4"))
-               .set_output(Path("/tmp/output.mp4"))
-               .set_encoder("None (copy original)")
-               .build())
-
+
+        cmd = (
+            builder.set_input(Path("/tmp/input.mp4"))
+            .set_output(Path("/tmp/output.mp4"))
+            .set_encoder("None (copy original)")
+            .build()
+        )
+
         assert "ffmpeg" in cmd
         assert "-i" in cmd
         assert "/tmp/input.mp4" in cmd
         assert "-c" in cmd
         assert "copy" in cmd
         assert "/tmp/output.mp4" in cmd
-
+
     def test_invalid_parameters(self):
         """Test error handling for invalid parameters."""
         builder = FFmpegCommandBuilder()
-
+
         # Test missing required parameters
-        with pytest.raises(ValueError, match="Input path, output path, and encoder must be set"):
+        with pytest.raises(
+            ValueError, match="Input path, output path, and encoder must be set"
+        ):
             builder.build()
-
+
         # Test missing encoder
         builder.set_input(Path("/tmp/input.mp4"))
         builder.set_output(Path("/tmp/output.mp4"))
         with pytest.raises(ValueError):
             builder.build()
-
+
         # Test two-pass without required params
         builder.set_encoder("Software x265 (2-Pass)")
         with pytest.raises(ValueError, match="Two-pass encoding requires"):
             builder.build()
-
+
     def test_pixel_format_setting(self):
         """Test FFmpeg command with pixel format."""
         builder = FFmpegCommandBuilder()
-
-        cmd = (builder
-               .set_input(Path("/tmp/input.mp4"))
-               .set_output(Path("/tmp/output.mp4"))
-               .set_encoder("Software x264")
-               .set_pix_fmt("yuv420p10le")
-               .set_crf(20)
-               .build())
-
+
+        cmd = (
+            builder.set_input(Path("/tmp/input.mp4"))
+            .set_output(Path("/tmp/output.mp4"))
+            .set_encoder("Software x264")
+            .set_pix_fmt("yuv420p10le")
+            .set_crf(20)
+            .build()
+        )
+
         assert "-pix_fmt" in cmd
-        assert "yuv420p10le" in cmd
\ No newline at end of file
+        assert "yuv420p10le" in cmd
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_ffmpeg_builder_critical.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_log.py	2025-06-12 03:18:08.058114+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_log.py	2025-06-12 03:36:15.620317+00:00
@@ -21,11 +21,11 @@

 def test_get_logger_default_level_and_handler():
     # Reset to ensure we're testing from a clean state
     log._LEVEL = logging.INFO
     log.set_global_log_level(logging.INFO)
-
+
     logger = log.get_logger("test_logger")
     # Check effective level since logger uses root logger's level
     # The default level should be INFO (20) from config
     assert logger.getEffectiveLevel() == logging.INFO
     assert log._LEVEL == logging.INFO
@@ -72,11 +72,11 @@
     mock_colorlog_module.StreamHandler = MockStreamHandler
     mock_colorlog_module.ColoredFormatter = MockColoredFormatter

     # Force handler rebuild by calling set_global_log_level
     log.set_global_log_level(logging.INFO)
-
+
     root_logger = logging.getLogger()
     # Should have exactly one handler
     assert len(root_logger.handlers) == 1
     handler = root_logger.handlers[0]
     assert isinstance(handler, MockStreamHandler)
@@ -85,11 +85,11 @@

 @patch("goesvfi.utils.log.colorlog_module", None)
 def test_handler_type_and_formatter_without_colorlog():
     # Force handler rebuild by calling set_global_log_level
     log.set_global_log_level(logging.INFO)
-
+
     root_logger = logging.getLogger()
     # Should have exactly one handler
     assert len(root_logger.handlers) == 1
     handler = root_logger.handlers[0]
     assert isinstance(handler, logging.StreamHandler)
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_log.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py	2025-06-10 02:56:56.230900+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py	2025-06-12 03:36:15.608672+00:00
@@ -520,13 +520,15 @@
         return {
             "timeout": self.timeout_spinbox.value(),
             "max_concurrent": self.max_concurrent_spinbox.value(),
             "retry_attempts": self.retry_spinbox.value(),
             "throttle_enabled": self.throttle_checkbox.isChecked(),
-            "throttle_speed": self.throttle_spinbox.value()
-            if self.throttle_checkbox.isChecked()
-            else 0,
+            "throttle_speed": (
+                self.throttle_spinbox.value()
+                if self.throttle_checkbox.isChecked()
+                else 0
+            ),
             "process_priority": self.priority_combo.currentText().lower(),
             "auto_enhance": self.auto_enhance_checkbox.isChecked(),
             "false_color": self.false_color_checkbox.isChecked(),
             "convert_netcdf": self.convert_netcdf_checkbox.isChecked(),
             "desktop_notify": self.desktop_notify_checkbox.isChecked(),
@@ -2054,24 +2056,26 @@
                 writer.writeheader()
                 for item in items:
                     status = (
                         "downloaded"
                         if item.is_downloaded
-                        else "error"
-                        if item.download_error
-                        else "missing"
+                        else "error" if item.download_error else "missing"
                     )
                     writer.writerow(
                         {
                             "timestamp": item.timestamp.isoformat(),
-                            "satellite": item.satellite
-                            if hasattr(item, "satellite")
-                            and isinstance(item.satellite, str)
-                            else "Unknown",
-                            "source": item.source
-                            if hasattr(item, "source") and item.source
-                            else "AUTO",
+                            "satellite": (
+                                item.satellite
+                                if hasattr(item, "satellite")
+                                and isinstance(item.satellite, str)
+                                else "Unknown"
+                            ),
+                            "source": (
+                                item.source
+                                if hasattr(item, "source") and item.source
+                                else "AUTO"
+                            ),
                             "status": status,
                             "local_path": item.local_path if item.local_path else "",
                             "error": item.download_error if item.download_error else "",
                         }
                     )
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/enhanced_gui_tab.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_cropper.py	2025-06-12 01:46:12.725910+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_cropper.py	2025-06-12 03:36:15.640645+00:00
@@ -11,190 +11,183 @@
 from goesvfi.pipeline.image_processing_interfaces import ImageData


 class TestImageCropper:
     """Test image cropping functionality."""
-
+
     @pytest.fixture
     def sample_image(self):
         """Create a sample test image array."""
         # Create a 100x100 RGB image with gradient
         img_array = np.zeros((100, 100, 3), dtype=np.uint8)
         for i in range(100):
             for j in range(100):
-                img_array[i, j] = [i*2, j*2, (i+j)]
+                img_array[i, j] = [i * 2, j * 2, (i + j)]
         return img_array
-
+
     @pytest.fixture
     def cropper(self):
         """Create an ImageCropper instance."""
         return ImageCropper()
-
+
     def test_cropper_initialization(self, cropper):
         """Test ImageCropper initialization."""
-        assert hasattr(cropper, 'crop')
-        assert hasattr(cropper, 'load')
-        assert hasattr(cropper, 'save')
-        assert hasattr(cropper, 'process')
-
+        assert hasattr(cropper, "crop")
+        assert hasattr(cropper, "load")
+        assert hasattr(cropper, "save")
+        assert hasattr(cropper, "process")
+
     def test_basic_crop(self, sample_image, cropper):
         """Test basic image cropping."""
         # Create ImageData object
         image_data = ImageData(
-            image_data=sample_image,
-            metadata={"width": 100, "height": 100}
+            image_data=sample_image, metadata={"width": 100, "height": 100}
         )
-
+
         # Crop center region
         rect = (25, 25, 75, 75)
         cropped_data = cropper.crop(image_data, rect)
-
+
         assert cropped_data.image_data.shape == (50, 50, 3)
         assert np.array_equal(cropped_data.image_data, sample_image[25:75, 25:75])
         assert cropped_data.metadata["width"] == 50
         assert cropped_data.metadata["height"] == 50
-
+
     def test_crop_entire_image(self, sample_image, cropper):
         """Test cropping entire image (no actual crop)."""
         image_data = ImageData(
-            image_data=sample_image,
-            metadata={"width": 100, "height": 100}
+            image_data=sample_image, metadata={"width": 100, "height": 100}
         )
-
+
         rect = (0, 0, 100, 100)
         cropped_data = cropper.crop(image_data, rect)
-
+
         assert cropped_data.image_data.shape == sample_image.shape
         assert np.array_equal(cropped_data.image_data, sample_image)
-
+
     def test_crop_edge_regions(self, sample_image, cropper):
         """Test cropping edge regions."""
         image_data = ImageData(
-            image_data=sample_image,
-            metadata={"width": 100, "height": 100}
+            image_data=sample_image, metadata={"width": 100, "height": 100}
         )
-
+
         # Test all corners
         test_cases = [
-            ((0, 0, 50, 50), (50, 50, 3)),      # Top-left
-            ((50, 0, 100, 50), (50, 50, 3)),    # Top-right
-            ((0, 50, 50, 100), (50, 50, 3)),    # Bottom-left
+            ((0, 0, 50, 50), (50, 50, 3)),  # Top-left
+            ((50, 0, 100, 50), (50, 50, 3)),  # Top-right
+            ((0, 50, 50, 100), (50, 50, 3)),  # Bottom-left
             ((50, 50, 100, 100), (50, 50, 3)),  # Bottom-right
         ]
-
+
         for rect, expected_shape in test_cases:
             cropped_data = cropper.crop(image_data, rect)
             assert cropped_data.image_data.shape == expected_shape
-
+
     def test_invalid_crop_rect(self, sample_image, cropper):
         """Test invalid crop rectangles."""
         image_data = ImageData(
-            image_data=sample_image,
-            metadata={"width": 100, "height": 100}
+            image_data=sample_image, metadata={"width": 100, "height": 100}
         )
-
+
         invalid_rects = [
-            (-10, 0, 50, 50),    # Negative x
-            (0, -10, 50, 50),    # Negative y
-            (0, 0, 150, 50),     # x2 > width
-            (0, 0, 50, 150),     # y2 > height
-            (50, 50, 25, 25),    # x2 < x1
-            (25, 50, 50, 25),    # y2 < y1
+            (-10, 0, 50, 50),  # Negative x
+            (0, -10, 50, 50),  # Negative y
+            (0, 0, 150, 50),  # x2 > width
+            (0, 0, 50, 150),  # y2 > height
+            (50, 50, 25, 25),  # x2 < x1
+            (25, 50, 50, 25),  # y2 < y1
         ]
-
+
         for rect in invalid_rects:
             with pytest.raises(ValueError):
                 cropper.crop(image_data, rect)
-
+
     def test_not_implemented_methods(self, cropper):
         """Test that non-crop methods raise NotImplementedError."""
         # Test load
         with pytest.raises(NotImplementedError):
             cropper.load("test.png")
-
+
         # Test save
         image_data = ImageData(image_data=np.zeros((10, 10, 3)))
         with pytest.raises(NotImplementedError):
             cropper.save(image_data, "output.png")
-
+
         # Test process
         with pytest.raises(NotImplementedError):
             cropper.process(image_data)
-
+
     def test_crop_with_metadata_update(self, sample_image, cropper):
         """Test that cropping updates metadata correctly."""
         image_data = ImageData(
             image_data=sample_image,
             metadata={
                 "width": 100,
                 "height": 100,
                 "format": "RGB",
-                "original_path": "/test/image.png"
-            }
+                "original_path": "/test/image.png",
+            },
         )
-
+
         rect = (10, 20, 60, 80)
         cropped_data = cropper.crop(image_data, rect)
-
+
         # Check metadata was updated
         assert cropped_data.metadata["width"] == 50
         assert cropped_data.metadata["height"] == 60
         assert cropped_data.metadata["format"] == "RGB"  # Preserved
         assert cropped_data.metadata["original_path"] == "/test/image.png"  # Preserved
         assert "processing_steps" in cropped_data.metadata
         assert len(cropped_data.metadata["processing_steps"]) == 1
         assert cropped_data.metadata["processing_steps"][0]["operation"] == "crop"
         assert cropped_data.metadata["processing_steps"][0]["area"] == rect
-
+
     def test_crop_grayscale_image(self, cropper):
         """Test cropping grayscale images."""
         # Create grayscale image
         gray_image = np.random.randint(0, 255, (100, 100), dtype=np.uint8)
         image_data = ImageData(
-            image_data=gray_image,
-            metadata={"width": 100, "height": 100, "channels": 1}
+            image_data=gray_image, metadata={"width": 100, "height": 100, "channels": 1}
         )
-
+
         rect = (20, 20, 80, 80)
         cropped_data = cropper.crop(image_data, rect)
-
+
         assert cropped_data.image_data.shape == (60, 60)
         assert cropped_data.metadata["width"] == 60
         assert cropped_data.metadata["height"] == 60
-
+
     def test_multiple_crops_with_metadata_tracking(self, sample_image, cropper):
         """Test multiple crops with metadata tracking."""
         image_data = ImageData(
-            image_data=sample_image,
-            metadata={"width": 100, "height": 100}
+            image_data=sample_image, metadata={"width": 100, "height": 100}
         )
-
+
         # First crop
         rect1 = (0, 0, 50, 50)
         cropped1 = cropper.crop(image_data, rect1)
-
+
         # Second crop on already cropped image
         rect2 = (10, 10, 40, 40)
         cropped2 = cropper.crop(cropped1, rect2)
-
+
         # Check final result
         assert cropped2.image_data.shape == (30, 30, 3)
         assert len(cropped2.metadata["processing_steps"]) == 2
         assert cropped2.metadata["processing_steps"][0]["area"] == rect1
         assert cropped2.metadata["processing_steps"][1]["area"] == rect2
-
+
     def test_crop_edge_case_single_pixel(self, cropper):
         """Test cropping to a single pixel."""
         # Create small test image
         small_image = np.ones((10, 10, 3), dtype=np.uint8) * 255
         image_data = ImageData(
-            image_data=small_image,
-            metadata={"width": 10, "height": 10}
+            image_data=small_image, metadata={"width": 10, "height": 10}
         )
-
+
         # Crop to single pixel
         rect = (5, 5, 6, 6)
         cropped_data = cropper.crop(image_data, rect)
-
+
         assert cropped_data.image_data.shape == (1, 1, 3)
         assert cropped_data.metadata["width"] == 1
-        assert cropped_data.metadata["height"] == 1
\ No newline at end of file
+        assert cropped_data.metadata["height"] == 1
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_cropper.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_saver.py	2025-06-12 01:47:08.103034+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_saver.py	2025-06-12 03:36:15.643129+00:00
@@ -11,239 +11,233 @@
 from goesvfi.pipeline.image_processing_interfaces import ImageData


 class TestImageSaver:
     """Test image saving functionality."""
-
+
     @pytest.fixture
     def saver(self):
         """Create an ImageSaver instance."""
         return ImageSaver()
-
+
     @pytest.fixture
     def sample_image(self):
         """Create a sample RGB image array."""
         # Create 100x100 RGB image with gradient
         img_array = np.zeros((100, 100, 3), dtype=np.uint8)
         for i in range(100):
             for j in range(100):
-                img_array[i, j] = [i*2, j*2, (i+j)]
+                img_array[i, j] = [i * 2, j * 2, (i + j)]
         return img_array
-
+
     def test_saver_initialization(self, saver):
         """Test ImageSaver initialization."""
-        assert hasattr(saver, 'save')
-        assert hasattr(saver, 'load')
-        assert hasattr(saver, 'process')
-        assert hasattr(saver, 'crop')
-
+        assert hasattr(saver, "save")
+        assert hasattr(saver, "load")
+        assert hasattr(saver, "process")
+        assert hasattr(saver, "crop")
+
     def test_save_rgb_image(self, saver, sample_image):
         """Test saving RGB image."""
-        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
-            tmp_path = Path(tmp.name)
-
+        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
+            tmp_path = Path(tmp.name)
+
         try:
             # Create ImageData
             image_data = ImageData(
                 image_data=sample_image,
-                metadata={"width": 100, "height": 100, "format": "RGB"}
-            )
-
+                metadata={"width": 100, "height": 100, "format": "RGB"},
+            )
+
             # Save image
             saver.save(image_data, str(tmp_path))
-
+
             # Verify file exists and can be loaded
             assert tmp_path.exists()
             loaded_img = Image.open(tmp_path)
             assert loaded_img.size == (100, 100)
             assert loaded_img.mode == "RGB"
-
+
             # Verify pixel data
             loaded_array = np.array(loaded_img)
             assert np.array_equal(loaded_array, sample_image)
         finally:
             if tmp_path.exists():
                 tmp_path.unlink()
-
+
     def test_save_grayscale_image(self, saver):
         """Test saving grayscale image."""
         # Create grayscale image
         gray_array = np.random.randint(0, 255, (50, 50), dtype=np.uint8)
-
-        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
-            tmp_path = Path(tmp.name)
-
+
+        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
+            tmp_path = Path(tmp.name)
+
         try:
             image_data = ImageData(
                 image_data=gray_array,
-                metadata={"width": 50, "height": 50, "format": "L"}
-            )
-
-            saver.save(image_data, str(tmp_path))
-
+                metadata={"width": 50, "height": 50, "format": "L"},
+            )
+
+            saver.save(image_data, str(tmp_path))
+
             # Verify
             assert tmp_path.exists()
             loaded_img = Image.open(tmp_path)
             assert loaded_img.size == (50, 50)
             assert loaded_img.mode == "L"
         finally:
             if tmp_path.exists():
                 tmp_path.unlink()
-
+
     def test_save_creates_directory(self, saver, sample_image):
         """Test that save creates parent directory if it doesn't exist."""
         with tempfile.TemporaryDirectory() as tmpdir:
             # Create nested path that doesn't exist
             output_path = Path(tmpdir) / "subdir1" / "subdir2" / "image.png"
-
-            image_data = ImageData(
-                image_data=sample_image,
-                metadata={"width": 100, "height": 100}
-            )
-
+
+            image_data = ImageData(
+                image_data=sample_image, metadata={"width": 100, "height": 100}
+            )
+
             # Save should create directories
             saver.save(image_data, str(output_path))
-
+
             assert output_path.exists()
             assert output_path.parent.exists()
-
+
     def test_save_different_formats(self, saver, sample_image):
         """Test saving in different formats."""
-        formats = ['.png', '.jpg', '.bmp']
-
+        formats = [".png", ".jpg", ".bmp"]
+
         with tempfile.TemporaryDirectory() as tmpdir:
             for fmt in formats:
                 output_path = Path(tmpdir) / f"test{fmt}"
-
+
                 image_data = ImageData(
-                    image_data=sample_image,
-                    metadata={"width": 100, "height": 100}
+                    image_data=sample_image, metadata={"width": 100, "height": 100}
                 )
-
+
                 saver.save(image_data, str(output_path))
-
+
                 assert output_path.exists()
                 # Verify can be loaded
                 Image.open(output_path)
-
+
     def test_save_error_handling(self, saver, sample_image):
         """Test error handling during save."""
         # Test with invalid path (e.g., read-only location)
         image_data = ImageData(
-            image_data=sample_image,
-            metadata={"width": 100, "height": 100}
+            image_data=sample_image, metadata={"width": 100, "height": 100}
         )
-
+
         # Try to save to an invalid location
         with pytest.raises(IOError):
             saver.save(image_data, "/invalid/path/that/doesnt/exist/image.png")
-
+
     def test_save_invalid_data(self, saver):
         """Test saving invalid image data."""
         # Test with invalid array shape
         invalid_array = np.array([1, 2, 3])  # 1D array
-
-        image_data = ImageData(
-            image_data=invalid_array,
-            metadata={}
-        )
-
-        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
-            tmp_path = Path(tmp.name)
-
+
+        image_data = ImageData(image_data=invalid_array, metadata={})
+
+        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
+            tmp_path = Path(tmp.name)
+
         try:
             with pytest.raises(ValueError):
                 saver.save(image_data, str(tmp_path))
         finally:
             if tmp_path.exists():
                 tmp_path.unlink()
-
+
     def test_not_implemented_methods(self, saver):
         """Test that non-save methods raise NotImplementedError."""
         # Test load
         with pytest.raises(NotImplementedError):
             saver.load("test.png")
-
+
         # Test process
         image_data = ImageData(image_data=np.zeros((10, 10, 3)))
         with pytest.raises(NotImplementedError):
             saver.process(image_data)
-
+
         # Test crop
         with pytest.raises(NotImplementedError):
             saver.crop(image_data, (0, 0, 5, 5))
-
+
     def test_save_rgba_image(self, saver):
         """Test saving RGBA image with transparency."""
         # Create RGBA image
         rgba_array = np.zeros((50, 50, 4), dtype=np.uint8)
         rgba_array[:, :, 0] = 255  # Red channel
         rgba_array[:, :, 3] = 128  # Half transparent
-
-        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
-            tmp_path = Path(tmp.name)
-
+
+        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
+            tmp_path = Path(tmp.name)
+
         try:
             image_data = ImageData(
                 image_data=rgba_array,
-                metadata={"width": 50, "height": 50, "format": "RGBA"}
-            )
-
-            saver.save(image_data, str(tmp_path))
-
+                metadata={"width": 50, "height": 50, "format": "RGBA"},
+            )
+
+            saver.save(image_data, str(tmp_path))
+
             # Verify
             assert tmp_path.exists()
             loaded_img = Image.open(tmp_path)
             assert loaded_img.size == (50, 50)
             assert loaded_img.mode == "RGBA"
         finally:
             if tmp_path.exists():
                 tmp_path.unlink()
-
+
     def test_save_with_source_path_metadata(self, saver, sample_image):
         """Test saving preserves source path in metadata."""
-        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
-            tmp_path = Path(tmp.name)
-
+        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
+            tmp_path = Path(tmp.name)
+
         try:
             image_data = ImageData(
                 image_data=sample_image,
                 source_path="/original/path/image.png",
                 metadata={
                     "width": 100,
                     "height": 100,
-                    "processing_steps": [{"operation": "resize", "scale": 0.5}]
-                }
-            )
-
-            saver.save(image_data, str(tmp_path))
-
+                    "processing_steps": [{"operation": "resize", "scale": 0.5}],
+                },
+            )
+
+            saver.save(image_data, str(tmp_path))
+
             # Just verify it saves successfully with metadata
             assert tmp_path.exists()
         finally:
             if tmp_path.exists():
                 tmp_path.unlink()
-
+
     def test_save_16bit_image(self, saver):
         """Test saving 16-bit depth image."""
         # Create 16-bit grayscale image
         img_16bit = np.random.randint(0, 65535, (100, 100), dtype=np.uint16)
-
-        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
-            tmp_path = Path(tmp.name)
-
+
+        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
+            tmp_path = Path(tmp.name)
+
         try:
             image_data = ImageData(
                 image_data=img_16bit,
-                metadata={"width": 100, "height": 100, "bit_depth": 16}
-            )
-
+                metadata={"width": 100, "height": 100, "bit_depth": 16},
+            )
+
             # This might fail depending on PIL support, but we test the attempt
             try:
                 saver.save(image_data, str(tmp_path))
                 assert tmp_path.exists()
             except (IOError, ValueError):
                 # Expected if PIL doesn't support 16-bit for this format
                 pytest.skip("16-bit image saving not supported")
         finally:
             if tmp_path.exists():
-                tmp_path.unlink()
\ No newline at end of file
+                tmp_path.unlink()
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_saver.py
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui.py	2025-06-05 16:09:16.814647+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui.py	2025-06-12 03:36:15.638955+00:00
@@ -174,18 +174,18 @@
         self.image_cropper = ImageCropper()
         LOGGER.info("GUI Image processors instantiated.")
         # ---------------------------------

         # --- State Variables ---
-        self.sanchez_preview_cache: dict[
-            Path, np.ndarray[Any, Any]
-        ] = {}  # Cache for Sanchez results
+        self.sanchez_preview_cache: dict[Path, np.ndarray[Any, Any]] = (
+            {}
+        )  # Cache for Sanchez results
         self.in_dir: Path | None = None
         self.out_file_path: Path | None = None
-        self.current_crop_rect: tuple[
-            int, int, int, int
-        ] | None = None  # Store crop rect as (x, y, w, h)
+        self.current_crop_rect: tuple[int, int, int, int] | None = (
+            None  # Store crop rect as (x, y, w, h)
+        )
         self.vfi_worker: VfiWorker | None = None
         self.is_processing = False
         self.current_encoder = "RIFE"  # Default encoder
         self.current_model_key = "rife-v4.6"  # Default RIFE model key
         # -----------------------
@@ -2619,13 +2619,13 @@
                             )
                             sanchez_kwargs = {
                                 "res_km": res_km_val
                             }  # Don't set false_colour here
                             if "filename" not in original_image_data.metadata:
-                                original_image_data.metadata[
-                                    "filename"
-                                ] = image_path.name
+                                original_image_data.metadata["filename"] = (
+                                    image_path.name
+                                )
                             if "source_path" not in original_image_data.metadata:
                                 original_image_data.metadata["source_path"] = str(
                                     image_path
                                 )

@@ -2644,13 +2644,13 @@
                                     result_array = np.array(sanchez_result.image_data)
                                 elif isinstance(sanchez_result.image_data, np.ndarray):
                                     result_array = sanchez_result.image_data

                                 if result_array is not None:
-                                    self.sanchez_preview_cache[
-                                        image_path
-                                    ] = result_array.copy()
+                                    self.sanchez_preview_cache[image_path] = (
+                                        result_array.copy()
+                                    )
                                     LOGGER.debug(
                                         f"Stored Sanchez result in cache for: {image_path.name}"
                                     )
                                     image_data_to_process = (
                                         sanchez_result  # Use the successful result
would reformat /Users/justin/Documents/Github/GOES_VFI/goesvfi/gui.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_netcdf_render.py	2025-06-12 01:37:01.069634+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_netcdf_render.py	2025-06-12 03:36:15.660149+00:00
@@ -17,88 +17,88 @@
     RADIANCE_VAR,
     BAND_ID_VAR,
     BAND_WAVELENGTH_VAR,
     X_VAR,
     Y_VAR,
-    TARGET_BAND_ID
+    TARGET_BAND_ID,
 )


 class TestNetCDFRender:
     """Test NetCDF rendering functions for GOES satellite data."""
-
+
     def test_convert_radiance_to_temperature(self):
         """Test conversion from radiance to brightness temperature."""
         # Test with realistic radiance values
         radiance = np.array([100.0, 150.0, 200.0])  # More realistic values
-
+
         # Create mock dataset with planck constants
         mock_ds = MagicMock()
         mock_ds.attrs = {
-            'planck_fk1': 202263.0,
-            'planck_fk2': 3698.0,
-            'planck_bc1': 0.5,
-            'planck_bc2': 0.9991
-        }
-
+            "planck_fk1": 202263.0,
+            "planck_fk2": 3698.0,
+            "planck_bc1": 0.5,
+            "planck_bc2": 0.9991,
+        }
+
         temps = _convert_radiance_to_temperature(
             radiance, mock_ds, DEFAULT_MIN_TEMP_K, DEFAULT_MAX_TEMP_K
         )
-
+
         assert isinstance(temps, np.ndarray)
         assert temps.shape == radiance.shape
         # Check that values are normalized between 0 and 1 (inverted for IR)
         assert np.all(temps >= 0.0)
         assert np.all(temps <= 1.0)
-
+
     def test_validate_band_id(self):
         """Test band ID validation."""
         # Create mock dataset with correct band
         mock_ds = MagicMock()
         mock_band_var = MagicMock()
         mock_band_var.values = TARGET_BAND_ID
         mock_ds.__getitem__ = MagicMock(return_value=mock_band_var)
         mock_ds.variables = {BAND_ID_VAR: mock_band_var}
-
+
         # Should not raise
         _validate_band_id(mock_ds)
-
+
         # Test with wrong band
         mock_band_var.values = 1  # Wrong band
         with pytest.raises(ValueError, match="Expected Band 13"):
             _validate_band_id(mock_ds)
-
-    @patch('xarray.open_dataset')
-    @patch('pathlib.Path.exists', return_value=True)
+
+    @patch("xarray.open_dataset")
+    @patch("pathlib.Path.exists", return_value=True)
     def test_extract_metadata(self, mock_exists, mock_open_dataset):
         """Test metadata extraction from NetCDF."""
         # Create mock dataset
         mock_ds = MagicMock()
         mock_ds.attrs = {
-            'platform_ID': 'GOES-16',
-            'instrument_type': 'ABI',
-            'date_created': '2023-01-15T12:00:00Z'
-        }
-
+            "platform_ID": "GOES-16",
+            "instrument_type": "ABI",
+            "date_created": "2023-01-15T12:00:00Z",
+        }
+
         # Mock band variables
         mock_band_id = MagicMock()
         mock_band_id.values.item.return_value = 13
-
+
         mock_band_wavelength = MagicMock()
         mock_band_wavelength.values.item.return_value = 10.3
-
+
         # Mock x and y variables
         mock_x = MagicMock(size=2500)
         mock_y = MagicMock(size=1500)
-
+
         mock_ds.variables = {
             BAND_ID_VAR: mock_band_id,
             BAND_WAVELENGTH_VAR: mock_band_wavelength,
             X_VAR: mock_x,
-            Y_VAR: mock_y
-        }
-
+            Y_VAR: mock_y,
+        }
+
         # Mock __getitem__ to return the mocked variables
         def get_item(key):
             if key == BAND_ID_VAR:
                 return mock_band_id
             elif key == BAND_WAVELENGTH_VAR:
@@ -106,113 +106,113 @@
             elif key == X_VAR:
                 return mock_x
             elif key == Y_VAR:
                 return mock_y
             return MagicMock()
+
         mock_ds.__getitem__ = MagicMock(side_effect=get_item)
-
+
         mock_open_dataset.return_value.__enter__.return_value = mock_ds
-
+
         # Test extraction
         metadata = extract_metadata(Path("/tmp/test.nc"))
-
+
         assert isinstance(metadata, dict)
-        assert metadata['satellite'] == 'GOES-16'
-        assert metadata['instrument'] == 'ABI'
-        assert metadata['timestamp'] == '2023-01-15T12:00:00Z'
-        assert metadata['band_id'] == 13
-        assert metadata['band_wavelength'] == 10.3
-        assert metadata['resolution_x'] == 2500
-        assert metadata['resolution_y'] == 1500
-
-    @patch('xarray.open_dataset')
-    @patch('goesvfi.integrity_check.render.netcdf._create_figure')
-    @patch('pathlib.Path.exists', return_value=True)
-    def test_render_png_success(self, mock_exists, mock_create_figure, mock_open_dataset):
+        assert metadata["satellite"] == "GOES-16"
+        assert metadata["instrument"] == "ABI"
+        assert metadata["timestamp"] == "2023-01-15T12:00:00Z"
+        assert metadata["band_id"] == 13
+        assert metadata["band_wavelength"] == 10.3
+        assert metadata["resolution_x"] == 2500
+        assert metadata["resolution_y"] == 1500
+
+    @patch("xarray.open_dataset")
+    @patch("goesvfi.integrity_check.render.netcdf._create_figure")
+    @patch("pathlib.Path.exists", return_value=True)
+    def test_render_png_success(
+        self, mock_exists, mock_create_figure, mock_open_dataset
+    ):
         """Test successful rendering to PNG."""
         # Create mock dataset
         mock_ds = MagicMock()
-
+
         # Mock radiance data
         radiance_data = np.random.rand(500, 500) * 100
         mock_radiance = MagicMock()
         mock_radiance.values = radiance_data
-
+
         # Mock band attributes
-        mock_radiance.attrs = {
-            'scale_factor': 0.1,
-            'add_offset': 0.0
-        }
-
+        mock_radiance.attrs = {"scale_factor": 0.1, "add_offset": 0.0}
+
         # Mock band_id variable properly
         mock_band_var = MagicMock()
         mock_band_var.values = np.array(TARGET_BAND_ID)  # Scalar numpy array
-
-        mock_ds.variables = {
-            RADIANCE_VAR: mock_radiance,
-            BAND_ID_VAR: mock_band_var
-        }
-
+
+        mock_ds.variables = {RADIANCE_VAR: mock_radiance, BAND_ID_VAR: mock_band_var}
+
         # Mock __getitem__ to return appropriate variable
         def get_item(key):
             if key == BAND_ID_VAR:
                 return mock_band_var
             elif key == RADIANCE_VAR:
                 return mock_radiance
             return MagicMock()
-
+
         mock_ds.__getitem__ = MagicMock(side_effect=get_item)
-
+
         # Mock band info attributes
         mock_ds.attrs = {
-            'planck_fk1': 202263.0,
-            'planck_fk2': 3698.0,
-            'planck_bc1': 0.5,
-            'planck_bc2': 0.9991
-        }
-
+            "planck_fk1": 202263.0,
+            "planck_fk2": 3698.0,
+            "planck_bc1": 0.5,
+            "planck_bc2": 0.9991,
+        }
+
         mock_open_dataset.return_value.__enter__.return_value = mock_ds
-
+
         # Test rendering
         nc_path = Path("/tmp/test.nc")
         png_path = Path("/tmp/test.png")
-
-        with patch('pathlib.Path.exists', return_value=True):
+
+        with patch("pathlib.Path.exists", return_value=True):
             render_png(nc_path, png_path)
-
+
         # Verify dataset was opened
         mock_open_dataset.assert_called_once()
-
+
         # Verify figure creation was called
         mock_create_figure.assert_called_once()
-
+
     def test_render_png_nonexistent_file(self):
         """Test error handling for non-existent NetCDF file."""
         nc_path = Path("/tmp/nonexistent.nc")
         png_path = Path("/tmp/output.png")
-
+
         with pytest.raises(FileNotFoundError):
             render_png(nc_path, png_path)
-
-    @patch('xarray.open_dataset')
-    @patch('pathlib.Path.exists', return_value=True)
+
+    @patch("xarray.open_dataset")
+    @patch("pathlib.Path.exists", return_value=True)
     def test_render_png_missing_radiance(self, mock_exists, mock_open_dataset):
         """Test error handling for NetCDF without radiance data."""
         # Create mock dataset without radiance variable
         mock_ds = MagicMock()
         mock_ds.variables = {}  # No RADIANCE_VAR
-
+
         mock_open_dataset.return_value.__enter__.return_value = mock_ds
-
+
         nc_path = Path("/tmp/test.nc")
         png_path = Path("/tmp/test.png")
-
-        with pytest.raises(IOError, match="Error rendering NetCDF file.*Radiance variable 'Rad' not found"):
+
+        with pytest.raises(
+            IOError,
+            match="Error rendering NetCDF file.*Radiance variable 'Rad' not found",
+        ):
             render_png(nc_path, png_path)
-
+
     def test_default_temperature_constants(self):
         """Test default temperature constants."""
         assert isinstance(DEFAULT_MIN_TEMP_K, float)
         assert isinstance(DEFAULT_MAX_TEMP_K, float)
         assert DEFAULT_MIN_TEMP_K < DEFAULT_MAX_TEMP_K
         assert DEFAULT_MIN_TEMP_K > 0  # Kelvin scale
-        assert DEFAULT_MAX_TEMP_K < 400  # Reasonable max temp
\ No newline at end of file
+        assert DEFAULT_MAX_TEMP_K < 400  # Reasonable max temp
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_netcdf_render.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_simple.py	2025-06-10 03:33:24.490393+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_simple.py	2025-06-12 03:36:15.662453+00:00
@@ -43,13 +43,15 @@
     img_paths = make_dummy_images(tmp_path, 3)
     output_mp4 = tmp_path / "output.mp4"
     rife_exe = tmp_path / "rife"
     fps = 10

-    with patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch, \
-         patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch, \
-         patch.object(pathlib.Path, "glob", return_value=img_paths):
+    with (
+        patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch,
+        patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch,
+        patch.object(pathlib.Path, "glob", return_value=img_paths),
+    ):

         # Mock ffmpeg Popen to succeed
         mock_popen = MagicMock()
         mock_popen.returncode = 0
         mock_popen.wait.return_value = 0
@@ -71,15 +73,15 @@
         results = list(gen)

     # Assert
     # 1. FFmpeg was called via Popen (for encoding)
     mock_popen_patch.assert_called_once()
-
+
     # 2. RIFE (subprocess.run) was NOT called
     mock_run_patch.assert_not_called()
-
+
     # 3. FFmpeg stdin received frame data
     assert mock_popen.stdin.write.call_count >= 1
-
+
     # 4. Results contain progress updates and final path
     assert any(isinstance(r, tuple) for r in results)  # Progress updates
-    assert any(isinstance(r, pathlib.Path) for r in results)  # Final path
\ No newline at end of file
+    assert any(isinstance(r, pathlib.Path) for r in results)  # Final path
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_simple.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_background_worker.py	2025-06-12 03:26:06.245869+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_background_worker.py	2025-06-12 03:36:15.668074+00:00
@@ -35,11 +35,13 @@
 class TestTaskProgress:
     """Test TaskProgress dataclass."""

     def test_task_progress_creation(self):
         """Test creating TaskProgress instance."""
-        progress = TaskProgress(current=5, total=10, eta_seconds=2.5, message="Processing...")
+        progress = TaskProgress(
+            current=5, total=10, eta_seconds=2.5, message="Processing..."
+        )
         assert progress.current == 5
         assert progress.total == 10
         assert progress.eta_seconds == 2.5
         assert progress.message == "Processing..."

@@ -54,13 +56,11 @@
     """Test TaskResult dataclass."""

     def test_task_result_success(self):
         """Test creating successful TaskResult."""
         result = TaskResult(
-            task_id="test_task",
-            status=TaskStatus.COMPLETED,
-            result="Success!"
+            task_id="test_task", status=TaskStatus.COMPLETED, result="Success!"
         )
         assert result.task_id == "test_task"
         assert result.status == TaskStatus.COMPLETED
         assert result.result == "Success!"
         assert result.error is None
@@ -71,11 +71,11 @@
         error = ValueError("Test error")
         result = TaskResult(
             task_id="test_task",
             status=TaskStatus.FAILED,
             error=error,
-            error_traceback="Traceback..."
+            error_traceback="Traceback...",
         )
         assert result.task_id == "test_task"
         assert result.status == TaskStatus.FAILED
         assert result.result is None
         assert result.error == error
@@ -85,10 +85,11 @@
 class TestTask:
     """Test Task class functionality."""

     def test_task_creation(self):
         """Test creating a Task instance."""
+
         def dummy_func(x, y):
             return x + y

         task = Task("test_task", dummy_func, 1, 2)
         assert task.task_id == "test_task"
@@ -98,19 +99,20 @@
         assert isinstance(task.signals, TaskSignals)
         assert not task._cancel_requested

     def test_task_successful_execution(self):
         """Test successful task execution."""
+
         def test_func(x, y, progress_callback=None, cancel_check=None):
             # Report progress
             if progress_callback:
                 progress_callback(TaskProgress(current=1, total=2))
-
+
             # Check for cancellation
             if cancel_check and cancel_check():
                 return None
-
+
             return x + y

         task = Task("test_task", test_func, 5, 3)

         # Track signals manually
@@ -118,13 +120,19 @@
         progress_calls = []
         completed_calls = []
         failed_calls = []

         task.signals.started.connect(lambda task_id: started_calls.append(task_id))
-        task.signals.progress.connect(lambda task_id, p: progress_calls.append((task_id, p)))
-        task.signals.completed.connect(lambda task_id, r: completed_calls.append((task_id, r)))
-        task.signals.failed.connect(lambda task_id, e, t: failed_calls.append((task_id, e, t)))
+        task.signals.progress.connect(
+            lambda task_id, p: progress_calls.append((task_id, p))
+        )
+        task.signals.completed.connect(
+            lambda task_id, r: completed_calls.append((task_id, r))
+        )
+        task.signals.failed.connect(
+            lambda task_id, e, t: failed_calls.append((task_id, e, t))
+        )

         # Run the task
         task.run()

         # Check signals
@@ -145,21 +153,26 @@

         assert len(failed_calls) == 0

     def test_task_failure(self):
         """Test task execution with error."""
+
         def failing_func(progress_callback=None, cancel_check=None):
             raise ValueError("Test error")

         task = Task("test_task", failing_func)

         # Track signals
         failed_calls = []
         completed_calls = []

-        task.signals.failed.connect(lambda task_id, e, t: failed_calls.append((task_id, e, t)))
-        task.signals.completed.connect(lambda task_id, r: completed_calls.append((task_id, r)))
+        task.signals.failed.connect(
+            lambda task_id, e, t: failed_calls.append((task_id, e, t))
+        )
+        task.signals.completed.connect(
+            lambda task_id, r: completed_calls.append((task_id, r))
+        )

         # Run the task
         task.run()

         # Check signals
@@ -171,15 +184,16 @@

         assert len(completed_calls) == 0

     def test_task_cancellation(self):
         """Test task cancellation."""
+
         def cancellable_func(progress_callback=None, cancel_check=None):
             # Check for cancellation
             if cancel_check and cancel_check():
                 return None
-
+
             return "Should not reach here"

         task = Task("test_task", cancellable_func)

         # Request cancellation before running
@@ -189,11 +203,13 @@
         # Track signals
         cancelled_calls = []
         completed_calls = []

         task.signals.cancelled.connect(lambda task_id: cancelled_calls.append(task_id))
-        task.signals.completed.connect(lambda task_id, r: completed_calls.append((task_id, r)))
+        task.signals.completed.connect(
+            lambda task_id, r: completed_calls.append((task_id, r))
+        )

         # Run the task
         task.run()

         # Check signals
@@ -201,26 +217,27 @@
         assert cancelled_calls[0] == "test_task"
         assert len(completed_calls) == 0

     def test_task_progress_reporting(self):
         """Test task progress reporting."""
+
         def progress_func(progress_callback=None, cancel_check=None):
             # Report multiple progress updates
             if progress_callback:
                 for i in range(3):
-                    progress_callback(TaskProgress(
-                        current=i + 1,
-                        total=3,
-                        message=f"Step {i + 1}"
-                    ))
+                    progress_callback(
+                        TaskProgress(current=i + 1, total=3, message=f"Step {i + 1}")
+                    )
             return "Done"

         task = Task("test_task", progress_func)

         # Track signals
         progress_calls = []
-        task.signals.progress.connect(lambda task_id, p: progress_calls.append((task_id, p)))
+        task.signals.progress.connect(
+            lambda task_id, p: progress_calls.append((task_id, p))
+        )

         # Run the task
         task.run()

         # Check progress updates
@@ -248,10 +265,11 @@
         assert task_manager._tasks == {}
         assert task_manager.thread_pool.maxThreadCount() <= 16

     def test_submit_task(self, task_manager):
         """Test submitting a task."""
+
         def simple_func(x, progress_callback=None, cancel_check=None):
             return x * 2

         # Submit task
         task_manager.submit_task("test_task", simple_func, 5)
@@ -272,11 +290,11 @@
         assert not task_manager.is_task_active("test_task")

         # After submitting
         def dummy_func(progress_callback=None, cancel_check=None):
             return "result"
-
+
         task_manager.submit_task("test_task", dummy_func)
         assert task_manager.is_task_active("test_task")
         assert task_manager.get_active_task_count() == 1


@@ -299,14 +317,14 @@

     def test_start_stop_monitoring(self, freeze_monitor):
         """Test starting and stopping monitoring."""
         # QTimer requires Qt event loop, so we'll just test the state changes
         # without actually starting the timer
-
+
         # Initially timer should not be active
         assert not freeze_monitor._timer.isActive()
-
+
         # Test that stop_monitoring resets the frozen state
         freeze_monitor._is_frozen = True
         freeze_monitor.stop_monitoring()
         assert not freeze_monitor.is_frozen()

@@ -333,71 +351,74 @@
     """Test BackgroundProcessManager functionality."""

     def test_background_manager_initialization(self):
         """Test BackgroundProcessManager initialization."""
         manager = BackgroundProcessManager()
-
+
         assert manager.task_manager is not None
         assert isinstance(manager.task_manager, TaskManager)
         assert manager.freeze_monitor is not None
         assert isinstance(manager.freeze_monitor, UIFreezeMonitor)
-
+
         # Cleanup
         manager.cleanup()

     def test_task_submission_forwarding(self):
         """Test that task submission is forwarded correctly."""
         manager = BackgroundProcessManager()
-
+
         # Mock the task manager's submit_task method
-        with patch.object(manager.task_manager, 'submit_task') as mock_submit:
+        with patch.object(manager.task_manager, "submit_task") as mock_submit:
+
             def test_func(x):
                 return x * 2
-
+
             manager.submit_task("test_task", test_func, 5)
             mock_submit.assert_called_once_with("test_task", test_func, 5)
-
+
         manager.cleanup()

     def test_task_cancellation_forwarding(self):
         """Test that task cancellation is forwarded correctly."""
         manager = BackgroundProcessManager()
-
+
         # Mock the task manager's cancel_task method
-        with patch.object(manager.task_manager, 'cancel_task') as mock_cancel:
+        with patch.object(manager.task_manager, "cancel_task") as mock_cancel:
             mock_cancel.return_value = True
-
+
             result = manager.cancel_task("test_task")
             assert result is True
             mock_cancel.assert_called_once_with("test_task")
-
+
         manager.cleanup()

     def test_freeze_logging(self):
         """Test that freeze events are logged."""
         manager = BackgroundProcessManager()
-
+
         with patch("goesvfi.integrity_check.background_worker.LOGGER") as mock_logger:
             # Trigger freeze detection
             manager._on_freeze_detected(150.5)
             mock_logger.warning.assert_called_with("UI freeze detected: %.1fms", 150.5)

             # Trigger freeze resolution
             manager._on_freeze_resolved(250.5)
-            mock_logger.info.assert_called_with("UI freeze resolved after %.1fms", 250.5)
-
+            mock_logger.info.assert_called_with(
+                "UI freeze resolved after %.1fms", 250.5
+            )
+
         manager.cleanup()

     def test_cleanup(self):
         """Test cleanup of background manager."""
         manager = BackgroundProcessManager()
-
+
         # Test that cleanup calls the necessary methods
-        with patch.object(manager.freeze_monitor, 'stop_monitoring') as mock_stop:
-            with patch.object(manager.task_manager, 'cleanup') as mock_cleanup:
+        with patch.object(manager.freeze_monitor, "stop_monitoring") as mock_stop:
+            with patch.object(manager.task_manager, "cleanup") as mock_cleanup:
                 manager.cleanup()
-
+
                 # Verify cleanup methods were called
                 mock_stop.assert_called_once()
                 mock_cleanup.assert_called_once()


@@ -405,44 +426,45 @@
     """Test global convenience functions."""

     @patch("goesvfi.integrity_check.background_worker.background_manager")
     def test_run_in_background(self, mock_manager):
         """Test run_in_background function."""
+
         def test_func(x):
             return x * 2

         run_in_background("test_task", test_func, 5)
         mock_manager.submit_task.assert_called_once_with("test_task", test_func, 5)

     @patch("goesvfi.integrity_check.background_worker.background_manager")
     def test_cancel_background_task(self, mock_manager):
         """Test cancel_background_task function."""
         mock_manager.cancel_task.return_value = True
-
+
         result = cancel_background_task("test_task")
-
+
         assert result is True
         mock_manager.cancel_task.assert_called_once_with("test_task")

     @patch("goesvfi.integrity_check.background_worker.background_manager")
     def test_get_task_manager(self, mock_manager):
         """Test get_task_manager function."""
         mock_task_manager = MagicMock()
         mock_manager.task_manager = mock_task_manager
-
+
         result = get_task_manager()
-
+
         assert result == mock_task_manager

     @patch("goesvfi.integrity_check.background_worker.background_manager")
     def test_get_freeze_monitor(self, mock_manager):
         """Test get_freeze_monitor function."""
         mock_freeze_monitor = MagicMock()
         mock_manager.freeze_monitor = mock_freeze_monitor
-
+
         result = get_freeze_monitor()
-
+
         assert result == mock_freeze_monitor


 class TestTaskStatus:
     """Test TaskStatus enum."""
@@ -459,83 +481,86 @@
 class TestEdgeCases:
     """Test edge cases and error scenarios."""

     def test_task_with_no_callbacks(self):
         """Test task that doesn't use progress_callback or cancel_check."""
+
         def simple_func(**kwargs):
             # Function should accept but ignore the callbacks
             return "Done"

         task = Task("test_task", simple_func)
-
+
         # Track completion
         completed = []
         task.signals.completed.connect(lambda tid, r: completed.append(r))
-
+
         # Run task
         task.run()
-
+
         # Should complete successfully even without using callbacks
         assert len(completed) == 1
         assert completed[0].result == "Done"

     def test_task_with_kwargs(self):
         """Test task with keyword arguments."""
+
         def func_with_kwargs(a, b=10, c=20, progress_callback=None, cancel_check=None):
             return a + b + c

         task = Task("test_task", func_with_kwargs, 5, b=15)
-
+
         # Track completion
         completed = []
         task.signals.completed.connect(lambda tid, r: completed.append(r))
-
+
         # Run task
         task.run()
-
+
         # Check result
         assert len(completed) == 1
         assert completed[0].result == 40  # 5 + 15 + 20

     def test_thread_pool_limits(self):
         """Test thread pool maximum thread count."""
         manager = TaskManager()
-
+
         # Check thread count is reasonable
         max_threads = manager.thread_pool.maxThreadCount()
         assert 1 <= max_threads <= 16
-
+
         # Verify it's using the global instance
         assert manager.thread_pool == QThreadPool.globalInstance()
-
+
         manager.cleanup()

     def test_freeze_monitor_time_calculations(self):
         """Test freeze monitor time calculations."""
         monitor = UIFreezeMonitor()
-
+
         # Set up a fake freeze
         current_time = time.time() * 1000
         monitor._is_frozen = True
         monitor._freeze_start_time = current_time - 500  # 500ms ago
-
+
         # Check duration calculation
         duration = monitor.get_freeze_duration()
         assert 490 < duration < 510  # Allow some tolerance
-
+
         monitor.stop_monitoring()

     @patch("goesvfi.integrity_check.background_worker.LOGGER")
     def test_error_logging(self, mock_logger):
         """Test that errors are properly logged."""
+
         def failing_func(progress_callback=None, cancel_check=None):
             raise RuntimeError("Test error")

         task = Task("test_task", failing_func)
         task.run()
-
+
         # Check that error was logged
         mock_logger.error.assert_called()
         call_args = mock_logger.error.call_args
         # The format is: "Task %s failed: %s\n%s", task_id, error, traceback
         assert call_args[0][1] == "test_task"  # task_id
-        assert "Test error" in str(call_args[0][2])  # error message
\ No newline at end of file
+        assert "Test error" in str(call_args[0][2])  # error message
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_background_worker.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_s3_store_critical.py	2025-06-12 01:35:35.180160+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_s3_store_critical.py	2025-06-12 03:36:15.688521+00:00
@@ -17,226 +17,224 @@
 from goesvfi.integrity_check.time_index import SatellitePattern


 class TestS3StoreCritical:
     """Test S3 store critical functionality."""
-
+
     @pytest.mark.asyncio
     async def test_s3_store_initialization(self):
         """Test S3 store initialization."""
         store = S3Store()
-
+
         # Test context manager
         async with store:
             assert store._s3_client is not None
-
+
         # After context exit, should be cleaned up
         assert store._s3_client is None
-
+
     @pytest.mark.asyncio
     async def test_download_success(self):
         """Test successful file download from S3."""
         store = S3Store()
-
-        # Mock S3 client
-        mock_s3_client = AsyncMock()
-
+
+        # Mock S3 client
+        mock_s3_client = AsyncMock()
+
         # Mock head_object to return success
-        mock_s3_client.head_object = AsyncMock(return_value={'ContentLength': 9})
-
+        mock_s3_client.head_object = AsyncMock(return_value={"ContentLength": 9})
+
         # Mock download_file
         mock_s3_client.download_file = AsyncMock()
-
-        with patch.object(store, '_get_s3_client', return_value=mock_s3_client):
-            with patch('pathlib.Path.exists', return_value=True):
-                with patch('pathlib.Path.stat') as mock_stat:
+
+        with patch.object(store, "_get_s3_client", return_value=mock_s3_client):
+            with patch("pathlib.Path.exists", return_value=True):
+                with patch("pathlib.Path.stat") as mock_stat:
                     mock_stat.return_value.st_size = 9
-                    with patch('pathlib.Path.mkdir'):
+                    with patch("pathlib.Path.mkdir"):
                         local_path = Path("/tmp/test_file.nc")
                         ts = datetime(2023, 1, 1, 12, 0, 0)
-
+
                         # Test download
                         result = await store.download(
                             ts=ts,
                             satellite=SatellitePattern.GOES_16,
-                            dest_path=local_path
+                            dest_path=local_path,
                         )
-
+
                         # Verify result
                         assert result == local_path
-
+
                         # Verify S3 client was called correctly
                         mock_s3_client.download_file.assert_called_once()
-
+
     @pytest.mark.asyncio
     async def test_download_not_found(self):
         """Test handling of file not found errors."""
         store = S3Store()
-
+
         # Mock S3 client to raise NoSuchKey error
         mock_s3_client = AsyncMock()
-
+
         # Create boto3 style error
         import botocore.exceptions
+
         error = botocore.exceptions.ClientError(
-            {'Error': {'Code': '404', 'Message': 'NoSuchKey'}},
-            'HeadObject'
+            {"Error": {"Code": "404", "Message": "NoSuchKey"}}, "HeadObject"
         )
         mock_s3_client.head_object = AsyncMock(side_effect=error)
-
+
         # Mock the paginator for wildcard search
         mock_paginator = MagicMock()
+
         async def empty_paginate(*args, **kwargs):
             # Yield empty page
-            yield {'Contents': []}
+            yield {"Contents": []}
+
         mock_paginator.paginate = MagicMock(return_value=empty_paginate())
         mock_s3_client.get_paginator = MagicMock(return_value=mock_paginator)
-
-        with patch.object(store, '_get_s3_client', return_value=mock_s3_client):
+
+        with patch.object(store, "_get_s3_client", return_value=mock_s3_client):
             local_path = Path("/tmp/missing_file.nc")
             ts = datetime(2023, 1, 1, 12, 0, 0)
-
+
             # Should raise RemoteStoreError (the ResourceNotFoundError gets wrapped)
             with pytest.raises(RemoteStoreError) as exc_info:
                 await store.download(
-                    ts=ts,
-                    satellite=SatellitePattern.GOES_16,
-                    dest_path=local_path
+                    ts=ts, satellite=SatellitePattern.GOES_16, dest_path=local_path
                 )
-
+
             # Verify it's about not finding files
             assert "searching for GOES_16 data" in str(exc_info.value)
-
+
     @pytest.mark.asyncio
     async def test_exists_success(self):
         """Test checking if file exists."""
         store = S3Store()
-
-        # Mock S3 client
-        mock_s3_client = AsyncMock()
-        mock_s3_client.head_object = AsyncMock(return_value={'ContentLength': 9})
-
-        with patch.object(store, '_get_s3_client', return_value=mock_s3_client):
+
+        # Mock S3 client
+        mock_s3_client = AsyncMock()
+        mock_s3_client.head_object = AsyncMock(return_value={"ContentLength": 9})
+
+        with patch.object(store, "_get_s3_client", return_value=mock_s3_client):
             ts = datetime(2023, 1, 1, 12, 0, 0)
-
+
             # Test exists
-            result = await store.exists(
-                ts=ts,
-                satellite=SatellitePattern.GOES_16
-            )
-
+            result = await store.exists(ts=ts, satellite=SatellitePattern.GOES_16)
+
             assert result is True
-
+
             # Verify S3 client was called correctly
             mock_s3_client.head_object.assert_called_once()
-
+
     @pytest.mark.asyncio
     async def test_exists_not_found(self):
         """Test exists returns False for missing files."""
         store = S3Store()
-
+
         # Mock S3 client to raise 404 error
         mock_s3_client = AsyncMock()
-
+
         # Create boto3 style error
         import botocore.exceptions
+
         error = botocore.exceptions.ClientError(
-            {'Error': {'Code': '404', 'Message': 'Not Found'}},
-            'HeadObject'
+            {"Error": {"Code": "404", "Message": "Not Found"}}, "HeadObject"
         )
         mock_s3_client.head_object = AsyncMock(side_effect=error)
-
-        with patch.object(store, '_get_s3_client', return_value=mock_s3_client):
+
+        with patch.object(store, "_get_s3_client", return_value=mock_s3_client):
             ts = datetime(2023, 1, 1, 12, 0, 0)
-
+
             # Test exists
-            result = await store.exists(
-                ts=ts,
-                satellite=SatellitePattern.GOES_16
-            )
-
+            result = await store.exists(ts=ts, satellite=SatellitePattern.GOES_16)
+
             assert result is False
-
+
     @pytest.mark.asyncio
     async def test_concurrent_downloads(self):
         """Test concurrent download handling."""
         store = S3Store()
-
-        # Mock S3 client
-        mock_s3_client = AsyncMock()
-        mock_s3_client.head_object = AsyncMock(return_value={'ContentLength': 9})
+
+        # Mock S3 client
+        mock_s3_client = AsyncMock()
+        mock_s3_client.head_object = AsyncMock(return_value={"ContentLength": 9})
         mock_s3_client.download_file = AsyncMock()
-
-        with patch.object(store, '_get_s3_client', return_value=mock_s3_client):
-            with patch('pathlib.Path.exists', return_value=True):
-                with patch('pathlib.Path.stat') as mock_stat:
+
+        with patch.object(store, "_get_s3_client", return_value=mock_s3_client):
+            with patch("pathlib.Path.exists", return_value=True):
+                with patch("pathlib.Path.stat") as mock_stat:
                     mock_stat.return_value.st_size = 9
-                    with patch('pathlib.Path.mkdir'):
+                    with patch("pathlib.Path.mkdir"):
                         # Download multiple files concurrently
                         tasks = []
                         for i in range(5):
                             local_path = Path(f"/tmp/concurrent_{i}.nc")
                             ts = datetime(2023, 1, 1, 12, i, 0)
                             task = store.download(
                                 ts=ts,
                                 satellite=SatellitePattern.GOES_16,
-                                dest_path=local_path
+                                dest_path=local_path,
                             )
                             tasks.append(task)
-
+
                         # Wait for all downloads
                         await asyncio.gather(*tasks)
-
+
                         # Verify all files were requested
                         assert mock_s3_client.download_file.call_count == 5
-
+
     @pytest.mark.asyncio
     async def test_download_with_wildcard(self):
         """Test download with wildcard pattern matching."""
         store = S3Store()
-
-        # Mock S3 client
-        mock_s3_client = AsyncMock()
-
+
+        # Mock S3 client
+        mock_s3_client = AsyncMock()
+
         # Mock head_object to return 404 (so it tries wildcard)
         import botocore.exceptions
+
         error = botocore.exceptions.ClientError(
-            {'Error': {'Code': '404', 'Message': 'Not Found'}},
-            'HeadObject'
+            {"Error": {"Code": "404", "Message": "Not Found"}}, "HeadObject"
         )
         mock_s3_client.head_object = AsyncMock(side_effect=error)
-
+
         # Mock paginator for wildcard search
         mock_paginator = MagicMock()
         mock_page = {
-            'Contents': [
-                {'Key': 'ABI-L1b-RadC/2023/001/12/OR_ABI-L1b-RadC-M6C13_G16_s20230011200000_e20230011200000_c20230011200000.nc'},
+            "Contents": [
+                {
+                    "Key": "ABI-L1b-RadC/2023/001/12/OR_ABI-L1b-RadC-M6C13_G16_s20230011200000_e20230011200000_c20230011200000.nc"
+                },
             ]
         }
+
         async def async_pages():
             yield mock_page
+
         mock_paginator.paginate = MagicMock(return_value=async_pages())
         mock_s3_client.get_paginator = MagicMock(return_value=mock_paginator)
-
+
         # Mock download_file
         mock_s3_client.download_file = AsyncMock()
-
-        with patch.object(store, '_get_s3_client', return_value=mock_s3_client):
-            with patch('pathlib.Path.exists', return_value=True):
-                with patch('pathlib.Path.stat') as mock_stat:
+
+        with patch.object(store, "_get_s3_client", return_value=mock_s3_client):
+            with patch("pathlib.Path.exists", return_value=True):
+                with patch("pathlib.Path.stat") as mock_stat:
                     mock_stat.return_value.st_size = 1000
-                    with patch('pathlib.Path.mkdir'):
+                    with patch("pathlib.Path.mkdir"):
                         local_path = Path("/tmp/wildcard_test.nc")
                         ts = datetime(2023, 1, 1, 12, 0, 0)
-
+
                         # Test download
                         result = await store.download(
                             ts=ts,
                             satellite=SatellitePattern.GOES_16,
-                            dest_path=local_path
+                            dest_path=local_path,
                         )
-
+
                         # Verify result
                         assert result == local_path
-
+
                         # Verify wildcard search was performed
-                        mock_s3_client.get_paginator.assert_called_once()
\ No newline at end of file
+                        mock_s3_client.get_paginator.assert_called_once()
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_s3_store_critical.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_fixed.py	2025-06-10 04:03:23.595714+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_fixed.py	2025-06-12 03:36:15.689132+00:00
@@ -83,11 +83,11 @@
     # Mock Image.open to return a mock image with size attribute
     mock_img = MagicMock()
     mock_img.size = (4, 4)  # Match the size of our test PNG
     mock_img.width = 4
     mock_img.height = 4
-    mock_img.mode = 'RGB'  # Set image mode to RGB
+    mock_img.mode = "RGB"  # Set image mode to RGB
     mock_img.__enter__.return_value = mock_img  # For context manager usage
     mock_img.close = MagicMock()  # Mock close method
     mock_img.save = MagicMock()

     # Configure mock Popen for ffmpeg
@@ -133,68 +133,69 @@
         if res == 0:
             try:
                 # The actual path used has a timestamp
                 import re
                 from datetime import datetime
+
                 timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                 # Use output_mp4 base name, not raw_output
                 actual_path = output_mp4.parent / f"{output_mp4.stem}_{timestamp}.mp4"
-
+
                 actual_path.parent.mkdir(parents=True, exist_ok=True)
                 with open(actual_path, "wb") as f:
                     f.write(b"dummy ffmpeg output")
                 print(f"Mock Popen created file: {actual_path}")
             except Exception as e:
-                print(
-                    f"Mock Popen failed to create file: {e}"
-                )
+                print(f"Mock Popen failed to create file: {e}")
         return res

     mock_popen_instance.wait = wait_with_file_creation

-    with patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch, \
-         patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch, \
-         patch("goesvfi.pipeline.run_vfi.Image.open") as mock_image_open, \
-         patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor, \
-         patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class, \
-         patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class, \
-         patch.object(pathlib.Path, "glob", return_value=img_paths):
+    with (
+        patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch,
+        patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch,
+        patch("goesvfi.pipeline.run_vfi.Image.open") as mock_image_open,
+        patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor,
+        patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class,
+        patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class,
+        patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class,
+        patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class,
+        patch.object(pathlib.Path, "glob", return_value=img_paths),
+    ):

         # Setup a mock executor that doesn't actually use multiprocessing
         mock_executor_instance = MagicMock()
         mock_executor.return_value.__enter__.return_value = mock_executor_instance
-
+
         mock_image_open.return_value = mock_img
         mock_popen_patch.return_value = mock_popen_instance
-
+
         mock_loader = MagicMock()
         mock_loader_class.return_value = mock_loader
-
+
         # Create mock ImageData with required attributes
         mock_image_data = MagicMock()
         mock_image_data.width = 4
         mock_image_data.height = 4
         mock_image_data.image = mock_img  # The PIL image
         mock_loader.load.return_value = mock_image_data
-
+
         # Mock SanchezProcessor to return same image data
         mock_sanchez = MagicMock()
         mock_sanchez_class.return_value = mock_sanchez
         mock_sanchez.process.return_value = mock_image_data
-
+
         # Mock ImageCropper to return same image data
         mock_cropper = MagicMock()
         mock_cropper_class.return_value = mock_cropper
         mock_cropper.crop.return_value = mock_image_data
-
+
         # Mock ImageSaver to just pretend to save
         mock_saver = MagicMock()
         mock_saver_class.return_value = mock_saver
         mock_saver.save.return_value = None
-
+
         # Configure map to return expected paths
         mock_executor_instance.map.return_value = img_paths

         # Act: run with skip_model=True
         gen = run_vfi_mod.run_vfi(
@@ -218,15 +219,15 @@
     # Check mock Popen instance (the one returned) for stdin writes
     assert mock_popen_instance.stdin.write.call_count >= 1

     # Check results and file creation
     assert any(isinstance(r, tuple) for r in results)  # Progress updates
-
+
     # Find the path result
     path_results = [r for r in results if isinstance(r, pathlib.Path)]
     assert len(path_results) > 0, f"No path results found. All results: {results}"
-
+
     # The returned path should have a timestamp in the name
     final_path = path_results[-1]
     assert final_path.parent == raw_output.parent
-    assert final_path.suffix == '.mp4'
-    assert final_path.exists()  # Check mock file creation
\ No newline at end of file
+    assert final_path.suffix == ".mp4"
+    assert final_path.exists()  # Check mock file creation
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_fixed.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_progress_reporting.py	2025-06-12 03:30:50.356307+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_progress_reporting.py	2025-06-12 03:36:15.700725+00:00
@@ -328,11 +328,11 @@
             # Call progress callback to simulate scanning
             progress_cb = kwargs.get("progress_callback")
             if progress_cb:
                 for i in range(6):
                     progress_cb(i, 5, f"Step {i}/5: Mock scanning...")
-
+
             # Return all files as existing
             existing = set([datetime.now() - timedelta(hours=i) for i in range(5)])
             missing = set()
             return existing, missing

@@ -362,25 +362,25 @@
         # Verify progress messages
         assert any("Phase 1/2" in msg for msg in progress_messages)
         assert any("Phase 2/2" in msg for msg in progress_messages)
         assert any("No missing files to download" in msg for msg in progress_messages)
         assert fetch_called, "fetch_missing_files should be called even with empty set"
-
+
         # Check final completion message
         assert any("Reconciliation complete" in msg for msg in progress_messages)

     @pytest.mark.asyncio
     async def test_progress_with_download_errors(
         self, reconcile_manager, mock_s3_store
     ):
         """Test progress reporting when downloads fail."""
         satellite = SatellitePattern.GOES_16
-
+
         # Create test timestamps
         mock_timestamps = set()
         now = datetime.now()
-
+
         # Add some older timestamps that will use S3
         for i in range(3):
             mock_timestamps.add(now - timedelta(days=30) - timedelta(hours=i))

         # Configure S3 store to fail
@@ -404,16 +404,21 @@
             progress_callback=progress_callback,
             error_callback=error_callback,
         )

         # Verify error handling progress messages
-        assert any("Step 1/4: Analyzing missing files" in msg for msg in progress_messages)
+        assert any(
+            "Step 1/4: Analyzing missing files" in msg for msg in progress_messages
+        )
         assert any("Error" in msg or "error" in msg for msg in progress_messages)
         assert len(errors) == 3, "Should have 3 errors for 3 failed downloads"
-
+
         # Verify final message shows failures
-        assert any("Download complete: 0/3 files downloaded successfully" in msg for msg in progress_messages)
+        assert any(
+            "Download complete: 0/3 files downloaded successfully" in msg
+            for msg in progress_messages
+        )

     @pytest.mark.asyncio
     async def test_progress_callback_none_handling(
         self, reconcile_manager, test_dates, tmp_path
     ):
@@ -437,13 +442,11 @@
         assert isinstance(existing, set)
         assert isinstance(missing, set)
         assert len(existing) + len(missing) > 0

     @pytest.mark.asyncio
-    async def test_progress_large_file_count(
-        self, reconcile_manager, tmp_path
-    ):
+    async def test_progress_large_file_count(self, reconcile_manager, tmp_path):
         """Test progress reporting with a large number of files."""
         # Test with a large time range that generates many timestamps
         end_date = datetime.now()
         start_date = end_date - timedelta(days=7)  # 7 days
         satellite = SatellitePattern.GOES_16
@@ -467,15 +470,23 @@
             progress_callback=progress_callback,
         )

         # Verify progress updates for large file count
         # The actual count may vary by 1 due to inclusive/exclusive boundaries
-        assert any("1008" in msg or "1009" in msg for msg in progress_messages), "Should show total file count"
-
+        assert any(
+            "1008" in msg or "1009" in msg for msg in progress_messages
+        ), "Should show total file count"
+
         # Verify we get periodic updates during filesystem check
-        filesystem_updates = [msg for msg in progress_messages if "Checking filesystem" in msg and "/" in msg]
-        assert len(filesystem_updates) > 10, "Should have multiple progress updates for large file count"
+        filesystem_updates = [
+            msg
+            for msg in progress_messages
+            if "Checking filesystem" in msg and "/" in msg
+        ]
+        assert (
+            len(filesystem_updates) > 10
+        ), "Should have multiple progress updates for large file count"

     @pytest.mark.asyncio
     async def test_concurrent_download_progress(
         self, mock_cache_db, mock_cdn_store, mock_s3_store
     ):
@@ -489,24 +500,24 @@
             max_concurrency=5,  # Allow 5 concurrent downloads
         )

         satellite = SatellitePattern.GOES_16
         now = datetime.now()
-
+
         # Create many recent timestamps for concurrent CDN downloads
         mock_timestamps = set()
         for i in range(10):
             mock_timestamps.add(now - timedelta(hours=i))

         # Track download order
         download_order = []
-
+
         async def mock_download(ts, sat, path):
             download_order.append(ts)
             await asyncio.sleep(0.01)  # Small delay to simulate download
             return path
-
+
         mock_cdn_store.exists.return_value = True
         mock_cdn_store.download.side_effect = mock_download

         progress_messages = []

would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_progress_reporting.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi.py	2025-06-10 03:43:34.425846+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi.py	2025-06-12 03:36:15.706819+00:00
@@ -43,13 +43,15 @@
     img_paths = make_dummy_images(tmp_path, 3)
     output_mp4 = tmp_path / "output.mp4"
     rife_exe = tmp_path / "rife"
     fps = 10

-    with patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch, \
-         patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch, \
-         patch.object(pathlib.Path, "glob", return_value=img_paths):
+    with (
+        patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch,
+        patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch,
+        patch.object(pathlib.Path, "glob", return_value=img_paths),
+    ):

         # Mock ffmpeg Popen to succeed
         mock_popen = MagicMock()
         mock_popen.returncode = 0
         mock_popen.wait.return_value = 0
@@ -71,17 +73,17 @@
         results = list(gen)

     # Assert
     # 1. FFmpeg was called via Popen (for encoding)
     mock_popen_patch.assert_called_once()
-
+
     # 2. RIFE (subprocess.run) was NOT called
     mock_run_patch.assert_not_called()
-
+
     # 3. FFmpeg stdin received frame data
     assert mock_popen.stdin.write.call_count >= 1
-
+
     # 4. Results contain progress updates and final path
     assert any(isinstance(r, tuple) for r in results)  # Progress updates
     assert any(isinstance(r, pathlib.Path) for r in results)  # Final path


@@ -90,18 +92,20 @@
     img_paths = make_dummy_images(tmp_path, 3)
     output_mp4 = tmp_path / "output.mp4"
     rife_exe = tmp_path / "rife"
     fps = 10

-    with patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch, \
-         patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch, \
-         patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class, \
-         patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class, \
-         patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor, \
-         patch.object(pathlib.Path, "glob", return_value=img_paths):
+    with (
+        patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch,
+        patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch,
+        patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class,
+        patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class,
+        patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class,
+        patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class,
+        patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor,
+        patch.object(pathlib.Path, "glob", return_value=img_paths),
+    ):

         # Mock ffmpeg Popen to fail on write
         mock_popen = MagicMock()
         mock_popen.returncode = 1  # Non-zero exit code
         mock_popen.wait.return_value = 1
@@ -112,37 +116,39 @@
         mock_popen.stdout.readline.return_value = b""
         mock_popen.stdout.read.return_value = b"FFmpeg error output"
         mock_popen.stderr = MagicMock()
         mock_popen.stderr.read.return_value = b"FFmpeg error"
         mock_popen_patch.return_value = mock_popen
-
-        # Setup mock executor
+
+        # Setup mock executor
         mock_executor_instance = MagicMock()
         mock_executor.return_value.__enter__.return_value = mock_executor_instance
         mock_executor_instance.map.return_value = img_paths
-
+
         # Setup ImageLoader mock
         mock_loader = MagicMock()
         mock_loader_class.return_value = mock_loader
         mock_image_data = MagicMock()
         mock_image_data.width = 4
         mock_image_data.height = 4
         mock_image_data.image = MagicMock()
         mock_image_data.image_data = np.zeros((4, 4, 3), dtype=np.uint8)
         mock_image_data.metadata = {}
         mock_loader.load.return_value = mock_image_data
-
+
         # Setup other mocks
         mock_saver = MagicMock()
         mock_saver_class.return_value = mock_saver
+
         # Mock save to create the file so Image.open doesn't fail
         def mock_save(data, path):
             # Create the file
             pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)
             create_test_png(pathlib.Path(path), size=(4, 4))
+
         mock_saver.save.side_effect = mock_save
-
+
         mock_sanchez = MagicMock()
         mock_sanchez_class.return_value = mock_sanchez
         mock_cropper = MagicMock()
         mock_cropper_class.return_value = mock_cropper
         mock_cropper.crop.return_value = mock_image_data
@@ -155,11 +161,11 @@
             fps=fps,
             num_intermediate_frames=1,
             max_workers=1,
             skip_model=True,
         )
-
+
         # Consume the generator and expect IOError/OSError
         with pytest.raises((IOError, OSError), match="Broken pipe"):
             list(gen)


@@ -169,44 +175,46 @@
     output_mp4 = tmp_path / "output.mp4"
     rife_exe = tmp_path / "rife"
     fps = 10

     # We need to mock at the SanchezProcessor level, not colourise function
-    with patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch, \
-         patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch, \
-         patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class, \
-         patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor, \
-         patch("goesvfi.pipeline.run_vfi.Image.open") as mock_image_open, \
-         patch.object(pathlib.Path, "glob", return_value=img_paths):
+    with (
+        patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch,
+        patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch,
+        patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class,
+        patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class,
+        patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class,
+        patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class,
+        patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor,
+        patch("goesvfi.pipeline.run_vfi.Image.open") as mock_image_open,
+        patch.object(pathlib.Path, "glob", return_value=img_paths),
+    ):

         # Mock ffmpeg Popen to succeed
         mock_popen = MagicMock()
         mock_popen.returncode = 0
         mock_popen.wait.return_value = 0
         mock_popen.stdin = MagicMock()
         mock_popen.stdout = MagicMock()
         mock_popen.stdout.readline.return_value = b""
         mock_popen_patch.return_value = mock_popen
-
-        # Setup mock executor
+
+        # Setup mock executor
         mock_executor_instance = MagicMock()
         mock_executor.return_value.__enter__.return_value = mock_executor_instance
         mock_executor_instance.map.return_value = img_paths
-
+
         # Mock Image.open for reading processed images
         mock_img = MagicMock()
         mock_img.size = (4, 4)
         mock_img.width = 4
         mock_img.height = 4
-        mock_img.mode = 'RGB'
+        mock_img.mode = "RGB"
         mock_img.__enter__.return_value = mock_img
         mock_img.save = MagicMock()
         mock_image_open.return_value = mock_img
-
+
         # Setup ImageLoader mock
         mock_loader = MagicMock()
         mock_loader_class.return_value = mock_loader
         # Create properly structured ImageData
         mock_image_data = MagicMock()
@@ -214,22 +222,22 @@
         mock_image_data.height = 4
         # For ImageSaver, it expects image_data attribute with numpy array
         mock_image_data.image_data = np.zeros((4, 4, 3), dtype=np.uint8)
         mock_image_data.metadata = {}
         mock_loader.load.return_value = mock_image_data
-
+
         # Mock SanchezProcessor
         mock_sanchez = MagicMock()
         mock_sanchez_class.return_value = mock_sanchez
         # Return same structured data
         mock_sanchez.process.return_value = mock_image_data
-
+
         # Mock ImageCropper
         mock_cropper = MagicMock()
         mock_cropper_class.return_value = mock_cropper
         mock_cropper.crop.return_value = mock_image_data
-
+
         # Mock ImageSaver
         mock_saver = MagicMock()
         mock_saver_class.return_value = mock_saver
         mock_saver.save.return_value = None

@@ -256,44 +264,46 @@
     img_paths = make_dummy_images(tmp_path, 3)
     output_mp4 = tmp_path / "output.mp4"
     rife_exe = tmp_path / "rife"
     fps = 10

-    with patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch, \
-         patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch, \
-         patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class, \
-         patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor, \
-         patch("goesvfi.pipeline.run_vfi.Image.open") as mock_image_open, \
-         patch.object(pathlib.Path, "glob", return_value=img_paths):
+    with (
+        patch("goesvfi.pipeline.run_vfi.subprocess.run") as mock_run_patch,
+        patch("goesvfi.pipeline.run_vfi.subprocess.Popen") as mock_popen_patch,
+        patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class,
+        patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class,
+        patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class,
+        patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class,
+        patch("goesvfi.pipeline.run_vfi.ProcessPoolExecutor") as mock_executor,
+        patch("goesvfi.pipeline.run_vfi.Image.open") as mock_image_open,
+        patch.object(pathlib.Path, "glob", return_value=img_paths),
+    ):

         # Mock ffmpeg Popen to succeed
         mock_popen = MagicMock()
         mock_popen.returncode = 0
         mock_popen.wait.return_value = 0
         mock_popen.stdin = MagicMock()
         mock_popen.stdout = MagicMock()
         mock_popen.stdout.readline.return_value = b""
         mock_popen_patch.return_value = mock_popen
-
-        # Setup mock executor
+
+        # Setup mock executor
         mock_executor_instance = MagicMock()
         mock_executor.return_value.__enter__.return_value = mock_executor_instance
         mock_executor_instance.map.return_value = img_paths
-
+
         # Mock Image.open for reading processed images
         mock_img = MagicMock()
         mock_img.size = (4, 4)
         mock_img.width = 4
         mock_img.height = 4
-        mock_img.mode = 'RGB'
+        mock_img.mode = "RGB"
         mock_img.__enter__.return_value = mock_img
         mock_img.save = MagicMock()
         mock_image_open.return_value = mock_img
-
+
         # Setup ImageLoader mock
         mock_loader = MagicMock()
         mock_loader_class.return_value = mock_loader
         # Create properly structured ImageData
         mock_image_data = MagicMock()
@@ -301,22 +311,22 @@
         mock_image_data.height = 4
         # For ImageSaver, it expects image_data attribute with numpy array
         mock_image_data.image_data = np.zeros((4, 4, 3), dtype=np.uint8)
         mock_image_data.metadata = {}
         mock_loader.load.return_value = mock_image_data
-
+
         # Mock SanchezProcessor to return original (simulating fallback)
         mock_sanchez = MagicMock()
         mock_sanchez_class.return_value = mock_sanchez
         # Return same image data (simulating fallback to original)
         mock_sanchez.process.return_value = mock_image_data
-
+
         # Mock ImageCropper
         mock_cropper = MagicMock()
         mock_cropper_class.return_value = mock_cropper
         mock_cropper.crop.return_value = mock_image_data
-
+
         # Mock ImageSaver
         mock_saver = MagicMock()
         mock_saver_class.return_value = mock_saver
         mock_saver.save.return_value = None

@@ -329,11 +339,11 @@
             num_intermediate_frames=1,
             max_workers=1,
             skip_model=True,
             false_colour=True,
         )
-
+
         # Should still complete despite Sanchez issues
         results = list(gen)

     # Assert: should still produce output
-    assert any(isinstance(r, pathlib.Path) for r in results)
\ No newline at end of file
+    assert any(isinstance(r, pathlib.Path) for r in results)
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi.py
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_refactored.py	2025-06-10 03:48:49.766111+00:00
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_refactored.py	2025-06-12 03:36:15.733672+00:00
@@ -251,11 +251,11 @@
         assert "Tiling requested but not supported" in caplog.text
         # Note: UHD warning is only shown when tiling is disabled
         # Since tiling is enabled in this test, we need to test without tiling
         assert "Spatial TTA requested but not supported" in caplog.text
         assert "Temporal TTA requested but not supported" in caplog.text
-
+
         # Test UHD warning separately (without tiling)
         caplog.clear()
         run_vfi_mod._check_rife_capability_warnings(
             capability_detector=detector,
             rife_tile_enable=False,  # Disable tiling to see UHD warning
@@ -306,11 +306,11 @@
         # Create mock RIFE executable and model directory
         rife_exe = tmp_path / "rife"
         rife_exe.touch()
         models_dir = rife_exe.parent.parent / "models" / "rife-v4.6"
         models_dir.mkdir(parents=True)
-
+
         # Create mock images
         img_paths = make_dummy_images(tmp_path, 3)

         # Create mock FFmpeg process
         mock_proc = MagicMock()
@@ -569,11 +569,11 @@
 ):
     """Integration test for the refactored run_vfi function."""
     # Setup a mock executor that doesn't actually use multiprocessing
     mock_executor_instance = MagicMock()
     mock_executor.return_value.__enter__.return_value = mock_executor_instance
-
+
     # Create test images
     img_paths = make_dummy_images(tmp_path, 3)
     output_mp4 = tmp_path / "output.mp4"
     raw_output = output_mp4.with_suffix(".raw.mp4")
     rife_exe = tmp_path / "rife"
@@ -581,69 +581,74 @@
     # Mock Image.open
     mock_img = MagicMock()
     mock_img.size = (4, 4)
     mock_img.width = 4
     mock_img.height = 4
-    mock_img.mode = 'RGB'
+    mock_img.mode = "RGB"
     mock_img.__enter__.return_value = mock_img
     mock_img.save = MagicMock()
     mock_image_open.return_value = mock_img

     # Mock FFmpeg Popen
     mock_popen_instance = MagicMock()
     mock_popen_instance.stdin = MagicMock()
     mock_popen_instance.stdout = MagicMock()
     mock_popen_instance.stdout.readline.return_value = b""
     mock_popen_instance.returncode = 0
-
+
     # Simulate file creation upon successful wait
     def wait_with_file_creation(*args, **kwargs):
         # Create output file with timestamp
         from datetime import datetime
+
         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
         actual_path = output_mp4.parent / f"{output_mp4.stem}_{timestamp}.mp4"
         actual_path.parent.mkdir(parents=True, exist_ok=True)
         actual_path.touch()
         return 0
-
+
     mock_popen_instance.wait = wait_with_file_creation
     mock_popen_patch.return_value = mock_popen_instance

     # Don't create raw_output here, let the mock handle it
-
+
     # Mock ImageLoader, ImageSaver, and other processors
-    with patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class, \
-         patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class, \
-         patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class:
-
+    with (
+        patch("goesvfi.pipeline.run_vfi.ImageLoader") as mock_loader_class,
+        patch("goesvfi.pipeline.run_vfi.ImageSaver") as mock_saver_class,
+        patch("goesvfi.pipeline.run_vfi.SanchezProcessor") as mock_sanchez_class,
+        patch("goesvfi.pipeline.run_vfi.ImageCropper") as mock_cropper_class,
+    ):
+
         # Setup ImageLoader mock
         mock_loader = MagicMock()
         mock_loader_class.return_value = mock_loader
         mock_image_data = MagicMock()
         mock_image_data.width = 4
         mock_image_data.height = 4
         mock_image_data.image_data = np.zeros((4, 4, 3), dtype=np.uint8)
         mock_image_data.metadata = {}
         mock_loader.load.return_value = mock_image_data
-
+
         # Setup other mocks
         mock_saver = MagicMock()
         mock_saver_class.return_value = mock_saver
+
         # Mock save to create the file so Image.open doesn't fail
         def mock_save(data, path):
             # Create the file
             pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)
             create_test_png(pathlib.Path(path))
+
         mock_saver.save.side_effect = mock_save
-
+
         mock_sanchez = MagicMock()
         mock_sanchez_class.return_value = mock_sanchez
         mock_cropper = MagicMock()
         mock_cropper_class.return_value = mock_cropper
         mock_cropper.crop.return_value = mock_image_data
-
+
         # Configure map to return expected paths
         mock_executor_instance.map.return_value = img_paths

         # Patch glob to return our test images
         with patch.object(pathlib.Path, "glob", return_value=img_paths):
would reformat /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_run_vfi_refactored.py

Oh no! 💥 💔 💥
48 files would be reformatted, 231 files would be left unchanged.

[91mBlack would reformat 1 files. ❌[0m
[1m[93mRun with --format flag to apply the formatting changes[0m
[1m[94m
[1mRunning isort Import Sorter...[0m[0m
ERROR: /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py Imports are incorrectly sorted and/or formatted.
ERROR: /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_s3_store_critical.py Imports are incorrectly sorted and/or formatted.
ERROR: /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_ffmpeg_builder_critical.py Imports are incorrectly sorted and/or formatted.
ERROR: /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_netcdf_render.py Imports are incorrectly sorted and/or formatted.
ERROR: /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_saver.py Imports are incorrectly sorted and/or formatted.
ERROR: /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_cropper.py Imports are incorrectly sorted and/or formatted.
ERROR: /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_integration.py Imports are incorrectly sorted and/or formatted.
ERROR: /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_main_window.py Imports are incorrectly sorted and/or formatted.
--- /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:before	2025-05-10 22:56:21.912335
+++ /Users/justin/Documents/Github/GOES_VFI/goesvfi/integrity_check/remote/s3_store.py:after	2025-06-11 20:36:16.817630
@@ -27,7 +27,9 @@
 from botocore.config import Config

 # Rename our ConnectionError to avoid conflict with built-in one
-from goesvfi.integrity_check.remote.base import AuthenticationError
+from goesvfi.integrity_check.remote.base import (
+    AuthenticationError,
+)
 from goesvfi.integrity_check.remote.base import ConnectionError
 from goesvfi.integrity_check.remote.base import ConnectionError as RemoteConnectionError
 from goesvfi.integrity_check.remote.base import (
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_s3_store_critical.py:before	2025-06-11 18:35:35.180160
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_s3_store_critical.py:after	2025-06-11 20:36:16.856044
@@ -1,19 +1,22 @@
 """Critical tests for S3 store functionality."""

+import asyncio
+from datetime import datetime
+from pathlib import Path
+from unittest.mock import AsyncMock, MagicMock, patch
+
 import pytest
-from unittest.mock import MagicMock, patch, AsyncMock
-from pathlib import Path
-from datetime import datetime
-import asyncio
-
-from goesvfi.integrity_check.remote.s3_store import S3Store
+
+from goesvfi.integrity_check.remote.base import (
+    AuthenticationError,
+)
+from goesvfi.integrity_check.remote.base import ConnectionError as RemoteConnectionError
 from goesvfi.integrity_check.remote.base import (
     RemoteStore,
     RemoteStoreError,
-    AuthenticationError,
-    ConnectionError as RemoteConnectionError,
     ResourceNotFoundError,
 )
+from goesvfi.integrity_check.remote.s3_store import S3Store
 from goesvfi.integrity_check.time_index import SatellitePattern


--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_ffmpeg_builder_critical.py:before	2025-06-11 18:47:47.756598
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_ffmpeg_builder_critical.py:after	2025-06-11 20:36:16.857032
@@ -2,9 +2,11 @@

 import sys
 from pathlib import Path
+
 sys.path.insert(0, str(Path(__file__).parent.parent.parent))

 import pytest
+
 from goesvfi.pipeline.ffmpeg_builder import FFmpegCommandBuilder


--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_netcdf_render.py:before	2025-06-11 18:37:01.069634
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_netcdf_render.py:after	2025-06-11 20:36:16.858237
@@ -1,25 +1,26 @@
 """Tests for NetCDF rendering functionality."""

+import tempfile
+from pathlib import Path
+from unittest.mock import MagicMock, mock_open, patch
+
+import numpy as np
 import pytest
-import numpy as np
-from pathlib import Path
-from unittest.mock import MagicMock, patch, mock_open
-import tempfile
 import xarray as xr

 from goesvfi.integrity_check.render.netcdf import (
-    render_png,
-    extract_metadata,
-    _validate_band_id,
-    _convert_radiance_to_temperature,
-    DEFAULT_MIN_TEMP_K,
-    DEFAULT_MAX_TEMP_K,
-    RADIANCE_VAR,
     BAND_ID_VAR,
     BAND_WAVELENGTH_VAR,
+    DEFAULT_MAX_TEMP_K,
+    DEFAULT_MIN_TEMP_K,
+    RADIANCE_VAR,
+    TARGET_BAND_ID,
     X_VAR,
     Y_VAR,
-    TARGET_BAND_ID
+    _convert_radiance_to_temperature,
+    _validate_band_id,
+    extract_metadata,
+    render_png,
 )


--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_saver.py:before	2025-06-11 18:47:08.103034
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_saver.py:after	2025-06-11 20:36:16.859953
@@ -1,14 +1,15 @@
 """Tests for image saving functionality."""

+import os
+import tempfile
+from pathlib import Path
+
+import numpy as np
 import pytest
-import numpy as np
-from pathlib import Path
 from PIL import Image
-import tempfile
-import os
-
+
+from goesvfi.pipeline.image_processing_interfaces import ImageData
 from goesvfi.pipeline.image_saver import ImageSaver
-from goesvfi.pipeline.image_processing_interfaces import ImageData


 class TestImageSaver:
--- /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_cropper.py:before	2025-06-11 18:46:12.725910
+++ /Users/justin/Documents/Github/GOES_VFI/tests/unit/test_image_cropper.py:after	2025-06-11 20:36:16.863953
@@ -1,11 +1,12 @@
 """Tests for image cropping functionality."""

+import os
+import tempfile
+from pathlib import Path
+
+import numpy as np
 import pytest
-import numpy as np
-from pathlib import Path
 from PIL import Image
-import tempfile
-import os

 from goesvfi.pipeline.image_cropper import ImageCropper
 from goesvfi.pipeline.image_processing_interfaces import ImageData
--- /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_integration.py:before	2025-06-09 20:54:46.250740
+++ /Users/justin/Documents/Github/GOES_VFI/tests/integration/test_integrity_tab_integration.py:after	2025-06-11 20:36:16.896068
@@ -15,7 +15,6 @@
 from PyQt6.QtCore import QCoreApplication, QDate, QDateTime, Qt, QTime
 from PyQt6.QtWidgets import QApplication, QMainWindow

-from goesvfi.integrity_check.satellite_integrity_tab_group import SatelliteIntegrityTabGroup
 from goesvfi.integrity_check.enhanced_gui_tab import EnhancedIntegrityCheckTab

 # Import the tab components we want to test
@@ -24,7 +23,10 @@
     FetchSource,
 )
 from goesvfi.integrity_check.optimized_timeline_tab import OptimizedTimelineTab
-from goesvfi.integrity_check.satellite_integrity_tab_group import OptimizedResultsTab
+from goesvfi.integrity_check.satellite_integrity_tab_group import (
+    OptimizedResultsTab,
+    SatelliteIntegrityTabGroup,
+)
 from goesvfi.integrity_check.time_index import SatellitePattern, TimeIndex

 # Import our test utilities
--- /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_main_window.py:before	2025-06-09 21:33:26.885934
+++ /Users/justin/Documents/Github/GOES_VFI/tests/gui/test_main_window.py:after	2025-06-11 20:36:16.907852
@@ -9,7 +9,14 @@
 import pytest
 from PyQt6.QtCore import QByteArray, QRect, Qt, QThread, pyqtSignal
 from PyQt6.QtGui import QImage, QPixmap
-from PyQt6.QtWidgets import QApplication, QDialog, QFileDialog, QMessageBox, QWidget, QPushButton
+from PyQt6.QtWidgets import (
+    QApplication,
+    QDialog,
+    QFileDialog,
+    QMessageBox,
+    QPushButton,
+    QWidget,
+)

 import goesvfi.gui


[91misort would fix imports in 8 files. ❌[0m
[1m[93mRun with --format flag to apply the import sorting changes[0m
[94m
======================================================================[0m
[1m[94m                   SUMMARY                      [0m
[94m======================================================================[0m

[91mFlake8: 514 issues[0m
[91mFlake8-Qt-TR: 69 issues[0m
[93mPylint: 1 issues[0m
[91mMypy: 525 issues[0m
[93mBlack: 1 issues[0m
[93misort: 8 issues[0m

[1m[91mTotal: 1118 issues found - Check output above for details ⚠️[0m
