"""
GOES Satellite Imagery Tab

This module extends the Integrity Check tab with satellite imagery capabilities,
providing UI components for selecting and viewing different GOES products.
"""

import logging
import os
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Union, cast

from PyQt6.QtCore import (
    QDate,
    QDateTime,
    QSize,
    Qt,
    QTime,
    QTimer,
    pyqtSignal,
    pyqtSlot,
)
from PyQt6.QtGui import QFont, QIcon, QMovie, QPixmap
from PyQt6.QtWidgets import (
    QButtonGroup,
    QCheckBox,
    QComboBox,
    QDateEdit,
    QFileDialog,
    QFrame,
    QGridLayout,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QMessageBox,
    QProgressBar,
    QPushButton,
    QRadioButton,
    QSizePolicy,
    QSpacerItem,
    QSpinBox,
    QTimeEdit,
    QToolButton,
    QVBoxLayout,
    QWidget,
)

from .goes_imagery import (
    ChannelType,
    GOESImageryManager,
    ImageryMode,
    ProcessingMode,
    ProductType,
)

# Configure logging
logger = logging.getLogger(__name__)


class ImageSelectionPanel(QWidget):
    """Panel for selecting satellite imagery options."""

    imageRequested = pyqtSignal(dict)

    def __init__(self, parent: Optional[QWidget] = None) -> None:
        super().__init__(parent)
        self.initUI()

    def initUI(self) -> None:
        """Initialize the UI components."""
        # Main layout
        layout = QVBoxLayout(self)

        # Product type selection
        product_group = QGroupBox("Product Type")
        product_layout = QVBoxLayout(product_group)

        self.product_combo = QComboBox()
        for product in ProductType:
            self.product_combo.addItem(product.name.replace("_", " "), product)

        product_layout.addWidget(self.product_combo)
        layout.addWidget(product_group)

        # Channel selection
        channel_group = QGroupBox("Channel Selection")
        channel_layout = QGridLayout(channel_group)

        # Add channel groups
        visible_group = QGroupBox("Visible")
        visible_layout = QVBoxLayout(visible_group)

        self.ch1_btn = QRadioButton("CH1: Blue")
        self.ch2_btn = QRadioButton("CH2: Red")
        self.ch3_btn = QRadioButton("CH3: Veggie")

        visible_layout.addWidget(self.ch1_btn)
        visible_layout.addWidget(self.ch2_btn)
        visible_layout.addWidget(self.ch3_btn)

        # Near-IR group
        nearir_group = QGroupBox("Near-IR")
        nearir_layout = QVBoxLayout(nearir_group)

        self.ch4_btn = QRadioButton("CH4: Cirrus")
        self.ch5_btn = QRadioButton("CH5: Snow/Ice")
        self.ch6_btn = QRadioButton("CH6: Cloud Part.")

        nearir_layout.addWidget(self.ch4_btn)
        nearir_layout.addWidget(self.ch5_btn)
        nearir_layout.addWidget(self.ch6_btn)

        # Water Vapor group
        wv_group = QGroupBox("Water Vapor")
        wv_layout = QVBoxLayout(wv_group)

        self.ch8_btn = QRadioButton("CH8: Upper-Level")
        self.ch9_btn = QRadioButton("CH9: Mid-Level")
        self.ch10_btn = QRadioButton("CH10: Lower-Level")

        wv_layout.addWidget(self.ch8_btn)
        wv_layout.addWidget(self.ch9_btn)
        wv_layout.addWidget(self.ch10_btn)

        # IR group
        ir_group = QGroupBox("Infrared")
        ir_layout = QVBoxLayout(ir_group)

        self.ch7_btn = QRadioButton("CH7: Shortwave")
        self.ch11_btn = QRadioButton("CH11: Cloud Phase")
        self.ch12_btn = QRadioButton("CH12: Ozone")
        self.ch13_btn = QRadioButton("CH13: Clean IR")
        self.ch13_btn.setChecked(True)  # Default selection
        self.ch14_btn = QRadioButton("CH14: Dirty IR")
        self.ch15_btn = QRadioButton("CH15: CO2 Mid")
        self.ch16_btn = QRadioButton("CH16: CO2 Long")

        ir_layout.addWidget(self.ch7_btn)
        ir_layout.addWidget(self.ch11_btn)
        ir_layout.addWidget(self.ch12_btn)
        ir_layout.addWidget(self.ch13_btn)
        ir_layout.addWidget(self.ch14_btn)
        ir_layout.addWidget(self.ch15_btn)
        ir_layout.addWidget(self.ch16_btn)

        # Composites group
        comp_group = QGroupBox("Composites")
        comp_layout = QVBoxLayout(comp_group)

        self.true_color_btn = QRadioButton("True Color")
        self.wv_comp_btn = QRadioButton("Water Vapor")
        self.ir_comp_btn = QRadioButton("IR Composite")

        comp_layout.addWidget(self.true_color_btn)
        comp_layout.addWidget(self.wv_comp_btn)
        comp_layout.addWidget(self.ir_comp_btn)

        # Add all groups to the channel layout
        channel_layout.addWidget(visible_group, 0, 0)
        channel_layout.addWidget(nearir_group, 0, 1)
        channel_layout.addWidget(wv_group, 1, 0)
        channel_layout.addWidget(ir_group, 1, 1, 2, 1)  # IR group spans 2 rows
        channel_layout.addWidget(comp_group, 2, 0)

        # Add channel group to main layout
        layout.addWidget(channel_group)

        # Group all radio buttons
        self.channel_group = QButtonGroup(self)
        for btn in [
            self.ch1_btn,
            self.ch2_btn,
            self.ch3_btn,
            self.ch4_btn,
            self.ch5_btn,
            self.ch6_btn,
            self.ch7_btn,
            self.ch8_btn,
            self.ch9_btn,
            self.ch10_btn,
            self.ch11_btn,
            self.ch12_btn,
            self.ch13_btn,
            self.ch14_btn,
            self.ch15_btn,
            self.ch16_btn,
            self.true_color_btn,
            self.wv_comp_btn,
            self.ir_comp_btn,
        ]:
            self.channel_group.addButton(btn)

        # Create channel to ChannelType mapping
        self.channel_mapping = {
            self.ch1_btn: ChannelType.CH01,
            self.ch2_btn: ChannelType.CH02,
            self.ch3_btn: ChannelType.CH03,
            self.ch4_btn: ChannelType.CH04,
            self.ch5_btn: ChannelType.CH05,
            self.ch6_btn: ChannelType.CH06,
            self.ch7_btn: ChannelType.CH07,
            self.ch8_btn: ChannelType.CH08,
            self.ch9_btn: ChannelType.CH09,
            self.ch10_btn: ChannelType.CH10,
            self.ch11_btn: ChannelType.CH11,
            self.ch12_btn: ChannelType.CH12,
            self.ch13_btn: ChannelType.CH13,
            self.ch14_btn: ChannelType.CH14,
            self.ch15_btn: ChannelType.CH15,
            self.ch16_btn: ChannelType.CH16,
            self.true_color_btn: ChannelType.TRUE_COLOR,
            self.wv_comp_btn: ChannelType.WATER_VAPOR,
            self.ir_comp_btn: ChannelType.IR_COMPOSITE,
        }

        # Add tooltips
        for btn, channel in self.channel_mapping.items():
            tooltip = (
                f"{channel.display_name} ({channel.wavelength})\n{channel.description}"
            )
            btn.setToolTip(tooltip)

        # Mode selection
        mode_group = QGroupBox("Image Source Mode")
        mode_layout = QHBoxLayout(mode_group)

        self.raw_data_btn = QRadioButton("Raw Data Mode")
        self.image_product_btn = QRadioButton("Image Product Mode")
        self.image_product_btn.setChecked(True)  # Default selection

        mode_layout.addWidget(self.raw_data_btn)
        mode_layout.addWidget(self.image_product_btn)

        # Group mode buttons
        self.mode_group = QButtonGroup(self)
        self.mode_group.addButton(self.raw_data_btn)
        self.mode_group.addButton(self.image_product_btn)

        # Add tooltips
        self.raw_data_btn.setToolTip(
            "Process raw NetCDF data into images\n"
            "More flexible but requires more processing"
        )
        self.image_product_btn.setToolTip(
            "Download pre-processed images from NOAA\n"
            "Faster and more reliable but less flexible"
        )

        layout.addWidget(mode_group)

        # Processing options
        processing_group = QGroupBox("Processing Options")
        processing_layout = QGridLayout(processing_group)

        # Resolution options
        resolution_label = QLabel("Resolution:")
        self.resolution_combo = QComboBox()
        self.resolution_combo.addItem("Native Resolution", "native")
        self.resolution_combo.addItem("2.7K", "2.7k")
        self.resolution_combo.addItem("1.2K", "1.2k")
        self.resolution_combo.setCurrentIndex(1)  # Default to 2.7K

        # Processing level
        processing_label = QLabel("Processing:")
        self.processing_combo = QComboBox()
        self.processing_combo.addItem("None", ProcessingMode.NONE)
        self.processing_combo.addItem("Basic", ProcessingMode.BASIC)
        self.processing_combo.addItem("Advanced", ProcessingMode.ADVANCED)
        self.processing_combo.setCurrentIndex(1)  # Default to Basic

        # Image size for pre-processed
        size_label = QLabel("Image Size:")
        self.size_combo = QComboBox()
        self.size_combo.addItem("600 px", "600")
        self.size_combo.addItem("1200 px", "1200")
        self.size_combo.addItem("2400 px", "2400")
        self.size_combo.setCurrentIndex(1)  # Default to 1200px

        # Add to layout
        processing_layout.addWidget(resolution_label, 0, 0)
        processing_layout.addWidget(self.resolution_combo, 0, 1)
        processing_layout.addWidget(processing_label, 1, 0)
        processing_layout.addWidget(self.processing_combo, 1, 1)
        processing_layout.addWidget(size_label, 2, 0)
        processing_layout.addWidget(self.size_combo, 2, 1)

        layout.addWidget(processing_group)

        # Download button
        self.download_btn = QPushButton("Download Imagery")
        self.download_btn.clicked.connect(self.requestImage)
        layout.addWidget(self.download_btn)

        # Update UI state based on mode selection
        self.updateUIState()
        self.mode_group.buttonClicked.connect(self.updateUIState)

    def updateUIState(self) -> None:
        """Update UI state based on selected mode."""
        raw_data_mode = self.raw_data_btn.isChecked()

        # Enable/disable resolution and processing based on mode
        self.resolution_combo.setEnabled(raw_data_mode)
        self.processing_combo.setEnabled(raw_data_mode)

        # Enable/disable image size based on mode
        self.size_combo.setEnabled(not raw_data_mode)

    def requestImage(self) -> None:
        """Request an image with the current settings."""
        # Get selected channel
        selected_btn = self.channel_group.checkedButton()
        if not selected_btn:
            logger.warning("No channel selected")
            return

        # Use a try/except block to handle the type mismatch case
        # This fixes a mypy error where QAbstractButton doesn't match QRadioButton expected by dict.get
        try:
            # Use cast to tell mypy that selected_btn is actually a QRadioButton
            # We know this is safe because we only added QRadioButtons to the channel_group
            channel = self.channel_mapping.get(cast(QRadioButton, selected_btn))
        except KeyError:
            logger.error("Selected button not found in channel mapping")
            return

        # Get product type
        product_idx = self.product_combo.currentIndex()
        product = self.product_combo.itemData(product_idx)

        # Get mode
        mode = (
            ImageryMode.RAW_DATA
            if self.raw_data_btn.isChecked()
            else ImageryMode.IMAGE_PRODUCT
        )

        # Get resolution/size
        if mode == ImageryMode.RAW_DATA:
            resolution = self.resolution_combo.currentData()
            size = None
        else:
            resolution = None
            size = self.size_combo.currentData()

        # Get processing level
        processing_idx = self.processing_combo.currentIndex()
        processing = self.processing_combo.itemData(processing_idx)

        # Emit signal with request parameters
        request = {
            "channel": channel,
            "product_type": product,
            "mode": mode,
            "processing": processing,
            "resolution": resolution,
            "size": size,
        }

        self.imageRequested.emit(request)


class ImageViewPanel(QWidget):
    """Panel for viewing satellite imagery."""

    def __init__(self, parent: Optional[QWidget] = None) -> None:
        super().__init__(parent)
        self.initUI()

    def initUI(self) -> None:
        """Initialize the UI components."""
        # Main layout
        layout = QVBoxLayout(self)

        # Image display
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.image_label.setMinimumSize(600, 600)
        self.image_label.setStyleSheet("background-color: #f0f0f0;")

        # Default message
        self.image_label.setText("No imagery loaded")

        # Progress bar for downloads
        self.progress = QProgressBar()
        self.progress.setVisible(False)

        # Loading animation
        self.loading_movie = QMovie(":/icons/loading.gif")
        self.loading_movie.setScaledSize(QSize(64, 64))

        # Status label
        self.status_label = QLabel()
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # Add components to layout
        layout.addWidget(self.image_label)
        layout.addWidget(self.progress)
        layout.addWidget(self.status_label)

    def showImage(self, image_path: Path) -> None:
        """Display an image."""
        if not image_path or not image_path.exists():
            self.image_label.setText("Image not found")
            return

        # Load and display the image
        pixmap = QPixmap(str(image_path))

        # Scale pixmap if needed
        if (
            pixmap.width() > self.image_label.width()
            or pixmap.height() > self.image_label.height()
        ):
            pixmap = pixmap.scaled(
                self.image_label.size(),
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation,
            )

        self.image_label.setPixmap(pixmap)

        # Update status
        file_size = os.path.getsize(image_path) / 1024  # KB
        self.status_label.setText(f"Loaded: {image_path.name} ({file_size:.1f} KB)")

    def showLoading(self, message: str = "Loading imagery...") -> None:
        """Show loading animation."""
        self.image_label.setMovie(self.loading_movie)
        self.loading_movie.start()
        self.status_label.setText(message)

    def setProgress(self, value: int, max_value: int = 100) -> None:
        """Update progress bar."""
        self.progress.setVisible(True)
        self.progress.setMaximum(max_value)
        self.progress.setValue(value)

    def hideProgress(self) -> None:
        """Hide progress bar."""
        self.progress.setVisible(False)

    def clearImage(self) -> None:
        """Clear the image display."""
        self.loading_movie.stop()
        self.image_label.clear()
        self.image_label.setText("No imagery loaded")
        self.status_label.setText("")
        self.hideProgress()


class GOESImageryTab(QWidget):
    """Tab for viewing GOES satellite imagery."""

    def __init__(self, parent: Optional[QWidget] = None) -> None:
        super().__init__(parent)
        self.initUI()

        # Create imagery manager
        self.imagery_manager = GOESImageryManager()

    def initUI(self) -> None:
        """Initialize the UI components."""
        # Main layout
        layout = QHBoxLayout(self)

        # Control panel (left side)
        self.selection_panel = ImageSelectionPanel()

        # Image view panel (right side)
        self.view_panel = ImageViewPanel()

        # Add panels to the main layout
        layout.addWidget(self.selection_panel, 1)
        layout.addWidget(self.view_panel, 3)

        # Connect signals
        self.selection_panel.imageRequested.connect(self.handleImageRequest)

    def handleImageRequest(self, request: Dict[str, Any]) -> None:
        """Handle request for imagery."""
        # Show loading state
        self.view_panel.showLoading(f"Loading {request['channel'].name}...")

        # Use a timer to simulate processing
        # In a real implementation, this would be a thread or concurrent.futures
        QTimer.singleShot(100, lambda: self.processImageRequest(request))

    def processImageRequest(self, request: Dict[str, Any]) -> None:
        """Process image request."""
        try:
            # Get image based on request
            image_path = self.imagery_manager.get_imagery(
                channel=request["channel"],
                product_type=request["product_type"],
                mode=request["mode"],
                processing=request["processing"],
                resolution=request["resolution"],
                size=request["size"],
            )

            # Display the image - make sure we have a valid path before passing to showImage
            if image_path:
                self.view_panel.showImage(image_path)
            else:
                self.view_panel.clearImage()
                self.view_panel.status_label.setText("No image available")

        except Exception as e:
            logger.error(f"Error processing image request: {e}")
            self.view_panel.clearImage()
            self.view_panel.status_label.setText(f"Error: {str(e)}")


# Example usage if run directly
if __name__ == "__main__":
    import sys

    from PyQt6.QtWidgets import QApplication

    app = QApplication(sys.argv)

    window = QWidget()
    window.setWindowTitle("GOES Imagery Tab Demo")
    window.setGeometry(100, 100, 1200, 800)

    layout = QVBoxLayout(window)
    tab = GOESImageryTab()
    layout.addWidget(tab)

    window.show()
    sys.exit(app.exec())
