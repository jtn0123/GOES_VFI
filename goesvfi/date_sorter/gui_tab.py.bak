import logging
from typing import Optional

from PyQt6.QtCore import pyqtSignal
from PyQt6.QtWidgets import (QFileDialog, QGridLayout, QGroupBox, QLabel,
                             QLineEdit, QMessageBox, QProgressBar, QPushButton,
                             QScrollBar, QSizePolicy, QTextEdit, QVBoxLayout,
                             QWidget)

from goesvfi.date_sorter import sorter  # Import the sorter module
from goesvfi.date_sorter.view_model import \
    DateSorterViewModel  # Import the ViewModel

LOGGER = logging.getLogger(__name__)


class DateSorterTab(QWidget):
    directory_selected = pyqtSignal(str)  # Signal emitted when a directory is selected

    # Modified __init__ to accept a ViewModel instance
    def __init__(
        self, view_model: DateSorterViewModel, parent: Optional[QWidget] = None
    ) -> None:
        super().__init__(parent)

        if not isinstance(view_model, DateSorterViewModel):
            raise TypeError("view_model must be an instance of DateSorterViewModel")

        self.view_model = view_model  # Use the provided ViewModel

        # Main Layout
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # Source Group
        source_group = QGroupBox("Source")
        source_group.setSizePolicy(
            QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Fixed
        )
        source_layout = QGridLayout()
        source_layout.setContentsMargins(10, 15, 10, 10)
        source_layout.setSpacing(8)

        source_label = QLabel("Folder:")
        self.source_line_edit = QLineEdit()
        source_browse_button = QPushButton("Browse...")
        source_browse_button.setFixedWidth(100)

        source_layout.addWidget(source_label, 0, 0)
        source_layout.addWidget(self.source_line_edit, 0, 1)
        source_layout.addWidget(source_browse_button, 0, 2)
        source_group.setLayout(source_layout)
        main_layout.addWidget(source_group)

        # Options Group
        options_group = QGroupBox("Analysis Options")
        options_group.setSizePolicy(
            QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Fixed
        )
        options_layout = QGridLayout()
        options_layout.setContentsMargins(10, 15, 10, 10)
        options_layout.setSpacing(8)

        interval_label = QLabel("Time Interval Detection:")
        interval_info = QLabel("(Automatic interval detection will be used)")
        interval_info.setStyleSheet("color: #666; font-style: italic;")

        options_layout.addWidget(interval_label, 0, 0)
        options_layout.addWidget(interval_info, 0, 1, 1, 2)
        options_group.setLayout(options_layout)
        main_layout.addWidget(options_group)

        # Actions Group
        actions_group = QGroupBox("Actions")
        actions_group.setSizePolicy(
            QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Fixed
        )
        actions_layout = QVBoxLayout()
        actions_layout.setContentsMargins(10, 15, 10, 10)
        actions_layout.setSpacing(8)

        # Scan Button
        self.scan_button = QPushButton("Scan Folder")
        self.scan_button.setFixedHeight(30)
        actions_layout.addWidget(self.scan_button)
        actions_group.setLayout(actions_layout)
        main_layout.addWidget(actions_group)

        # Status Group
        status_group = QGroupBox("Status")
        status_layout = QVBoxLayout()
        status_layout.setContentsMargins(10, 15, 10, 10)
        status_layout.setSpacing(10)

        # Progress Bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setFormat("%p%")
        status_layout.addWidget(self.progress_bar)

        # Status Text Display
        self.status_text = QTextEdit()
        self.status_text.setReadOnly(True)
        self.status_text.setMinimumHeight(200)
        self.status_text.setStyleSheet(
            "background-color: #f5f5f5; font-family: 'Courier New', 'DejaVu Sans Mono', monospace;"
        )
        status_layout.addWidget(self.status_text)

        status_group.setLayout(status_layout)
        main_layout.addWidget(status_group, 1)  # Give status area more vertical space

        # Connect signals
        source_browse_button.clicked.connect(self._browse_source)
        self.scan_button.clicked.connect(self._start_scan)

        # Set main layout
        self.setLayout(main_layout)

        # Register observer with ViewModel
        self.view_model.set_observer(self._update_ui)
        self._update_ui()  # Initial UI update

    def _browse_source(self) -> None:
        """Opens a dialog to select the source folder and updates the ViewModel."""
        folder_path = QFileDialog.getExistingDirectory(self, "Select Source Folder")
        if folder_path:
            self.view_model.source_directory = folder_path
            LOGGER.info(f"Selected source folder: {folder_path}")
            self.directory_selected.emit(folder_path)  # Emit signal with selected path

    def _start_scan(self) -> None:
        """Calls the start scan command on the ViewModel."""
        if self.view_model.can_start_sorting:
            self.view_model.start_sorting()
        else:
            # This case should ideally be handled by the ViewModel's can_execute
            # but adding a fallback message here for clarity.
            QMessageBox.warning(
                self, "Action Not Allowed", "Cannot start scan at this time."
            )

    def _update_ui(self) -> None:
        """Updates the UI elements based on the ViewModel's state."""
        self.source_line_edit.setText(self.view_model.source_directory)
        self.status_text.setPlainText(
            self.view_model.status_message
        )  # Use setPlainText to replace content
        self.progress_bar.setValue(int(self.view_model.progress_percentage))
        self.scan_button.setEnabled(self.view_model.can_start_sorting)

        # Auto-scroll status text to bottom
        v_scrollbar: Optional[QScrollBar] = self.status_text.verticalScrollBar()
        if v_scrollbar:
            v_scrollbar.setValue(v_scrollbar.maximum())
